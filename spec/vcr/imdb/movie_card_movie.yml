---
http_interactions:
- request:
    method: get
    uri: http://www.imdb.com/title/tt0118715/?ref_=fn_al_tt_1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 06 Aug 2017 18:20:44 GMT
      Server:
      - Server
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self' imdb.com *.imdb.com *.media-imdb.com withoutabox.com
        *.withoutabox.com amazon.com *.amazon.com amazon.co.uk *.amazon.co.uk amazon.de
        *.amazon.de translate.google.com images.google.com www.google.com www.google.co.uk
        search.aol.com bing.com www.bing.com
      Content-Type:
      - text/html;charset=UTF-8
      Content-Language:
      - en-US
      Vary:
      - Accept-Encoding,User-Agent
      Set-Cookie:
      - session-id-time=2132763644; Domain=.imdb.com; Expires=Fri, 24-Aug-2085 21:34:52
        GMT; Path=/
      - session-id=000-0000000-0000000; Domain=.imdb.com; Expires=Fri, 24-Aug-2085
        21:34:52 GMT; Path=/
      - uu=BCYtkAG7riRDOdXK1tGqbqu9zCB8Te0RZqW-A3vRrbjxKc5tjLd1GPJRVEM_ygaAm_OtSKrA2ozI%0D%0A_nsWl5Z_NSisWMvBCQndOqe7I6Jmvu16hwn7tQGqcmpoLalU7kSe3ano4kfa1zYWYlp6RW6OP_dS%0D%0A6iaCZkZnJ3Mu2Bp7m_kA7Hzee0A8DXm7q1WiqZ2FDhyx3aajS_BBlVNDulZBc7Q87HNew2MoNON-%0D%0AI9SH3EttFRnbGCpQz4d6Ey58lNOjzmtTlFLyTNLw7-psUP_EBelUoA%0D%0A;
        Domain=.imdb.com; Expires=Fri, 24-Aug-2085 21:34:52 GMT; Path=/
      P3p:
      - policyref="http://i.imdb.com/images/p3p.xml",CP="CAO DSP LAW CUR ADM IVAo
        IVDo CONo OTPo OUR DELi PUBi OTRi BUS PHY ONL UNI PUR FIN COM NAV INT DEM
        CNT STA HEA PRE LOC GOV OTC "
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        








<!DOCTYPE html>
<html
xmlns:og="http://ogp.me/ns#"
xmlns:fb="http://www.facebook.com/2008/fbml">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="apple-itunes-app" content="app-id=342792525, app-argument=imdb:///title/tt0118715?src=mdot">
            <script type="text/javascript">var ue_t0=window.ue_t0||+new Date();</script>
            <script type="text/javascript">
                var ue_mid = "A1EVAM02EL8SFB"; 
                var ue_sn = "www.imdb.com";  
                var ue_furl = "fls-na.amazon.com";
                var ue_sid = "000-0000000-0000000";
                var ue_id = "0TPTMHJB6PTZ251DMAC3";
                (function(e){var c=e;var a=c.ue||{};a.main_scope="mainscopecsm";a.q=[];a.t0=c.ue_t0||+new Date();a.d=g;function g(h){return +new Date()-(h?0:a.t0)}function d(h){return function(){a.q.push({n:h,a:arguments,t:a.d()})}}function b(m,l,h,j,i){var k={m:m,f:l,l:h,c:""+j,err:i,fromOnError:1,args:arguments};c.ueLogError(k);return false}b.skipTrace=1;e.onerror=b;function f(){c.uex("ld")}if(e.addEventListener){e.addEventListener("load",f,false)}else{if(e.attachEvent){e.attachEvent("onload",f)}}a.tag=d("tag");a.log=d("log");a.reset=d("rst");c.ue_csm=c;c.ue=a;c.ueLogError=d("err");c.ues=d("ues");c.uet=d("uet");c.uex=d("uex");c.uet("ue")})(window);(function(e,d){var a=e.ue||{};function c(g){if(!g){return}var f=d.head||d.getElementsByTagName("head")[0]||d.documentElement,h=d.createElement("script");h.async="async";h.src=g;f.insertBefore(h,f.firstChild)}function b(){var k=e.ue_cdn||"z-ecx.images-amazon.com",g=e.ue_cdns||"images-na.ssl-images-amazon.com",j="/images/G/01/csminstrumentation/",h=e.ue_file||"ue-full-11e51f253e8ad9d145f4ed644b40f692._V1_.js",f,i;if(h.indexOf("NSTRUMENTATION_FIL")>=0){return}if("ue_https" in e){f=e.ue_https}else{f=e.location&&e.location.protocol=="https:"?1:0}i=f?"https://":"http://";i+=f?g:k;i+=j;i+=h;c(i)}if(!e.ue_inline){if(a.loadUEFull){a.loadUEFull()}else{b()}}a.uels=c;e.ue=a})(window,document);
                if (!('CS' in window)) { window.CS = {}; }
                    window.CS.loginLocation = "https://www.imdb.com/registration/signin?u=%2Ftitle%2Ftt0118715%2F%3Fref_%3Dfn_al_tt_1";
            </script>
 

        
        <script type="text/javascript">var IMDbTimer={starttime: new Date().getTime(),pt:'java'};</script>

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadTitle", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_title"] = new Date().getTime(); })(IMDbTimer);</script>
        <title>The Big Lebowski (1998) - IMDb</title>
  <script>(function(t){ (t.events = t.events || {})["csm_head_post_title"] = new Date().getTime(); })(IMDbTimer);</script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadTitle", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadTitle", {wb: 1});
    }
</script>
        
            <link rel="canonical" href="http://www.imdb.com/title/tt0118715/" />
            <meta property="og:url" content="http://www.imdb.com/title/tt0118715/" />

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadIcons", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_icon"] = new Date().getTime(); })(IMDbTimer);</script>
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/safari-favicon-517611381._CB522736552_.svg" mask rel="icon" sizes="any">
        <link rel="icon" type="image/ico" href="http://ia.media-imdb.com/images/G/01/imdb/images/favicon-2165806970._CB522736556_.ico" />
        <meta name="theme-color" content="#000000" />
        <link rel="shortcut icon" type="image/x-icon" href="http://ia.media-imdb.com/images/G/01/imdb/images/desktop-favicon-2165806970._CB522736561_.ico" />
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-4151659188._CB522736129_.png" rel="apple-touch-icon"> 
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-76x76-53536248._CB522736233_.png" rel="apple-touch-icon" sizes="76x76"> 
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-120x120-2442878471._CB522736253_.png" rel="apple-touch-icon" sizes="120x120"> 
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-152x152-1475823641._CB522736557_.png" rel="apple-touch-icon" sizes="152x152">            
        <link rel="search" type="application/opensearchdescription+xml" href="http://ia.media-imdb.com/images/G/01/imdb/images/imdbsearch-3349468880._CB522736605_.xml" title="IMDb" />
  <script>(function(t){ (t.events = t.events || {})["csm_head_post_icon"] = new Date().getTime(); })(IMDbTimer);</script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadIcons", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadIcons", {wb: 1});
    }
</script>
        
        <meta property="pageId" content="tt0118715" />
        <meta property="pageType" content="title" />
        <meta property="subpageType" content="main" />


        <link rel='image_src' href="https://images-na.ssl-images-amazon.com/images/M/MV5BZTFjMjBiYzItNzU5YS00MjdiLWJkOTktNDQ3MTE3ZjY2YTY5XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UY1200_CR84,0,630,1200_AL_.jpg">
        <meta property='og:image' content="https://images-na.ssl-images-amazon.com/images/M/MV5BZTFjMjBiYzItNzU5YS00MjdiLWJkOTktNDQ3MTE3ZjY2YTY5XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UY1200_CR84,0,630,1200_AL_.jpg" />

        <meta property='og:type' content="video.movie" />
    <meta property='fb:app_id' content='115109575169727' />

    <meta property='og:title' content="The Big Lebowski (1998)" />
    <meta property='og:site_name' content='IMDb' />
    <meta name="title" content="The Big Lebowski (1998) - IMDb" />
        <meta name="description" content="Directed by Joel Coen, Ethan Coen.  With Jeff Bridges, John Goodman, Julianne Moore, Steve Buscemi. &quot;The Dude&quot; Lebowski, mistaken for a millionaire Lebowski, seeks restitution for his ruined rug and enlists his bowling buddies to help get it." />
        <meta property="og:description" content="Directed by Joel Coen, Ethan Coen.  With Jeff Bridges, John Goodman, Julianne Moore, Steve Buscemi. &quot;The Dude&quot; Lebowski, mistaken for a millionaire Lebowski, seeks restitution for his ruined rug and enlists his bowling buddies to help get it." />
        <meta name="keywords" content="Reviews, Showtimes, DVDs, Photos, Message Boards, User Ratings, Synopsis, Trailers, Credits" />
        <meta name="request_id" content="0TPTMHJB6PTZ251DMAC3" />

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadCSS", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_css"] = new Date().getTime(); })(IMDbTimer);</script>
<!-- h=ics-1d-c4-2xl-6e33c077.us-east-1 -->

            <link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/collections/title-flat-v2-1326624430._CB503856396_.css" />
        <noscript>
            <link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/wheel/nojs-2827156349._CB522739048_.css">
        </noscript>
  <script>(function(t){ (t.events = t.events || {})["csm_head_post_css"] = new Date().getTime(); })(IMDbTimer);</script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadCSS", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadCSS", {wb: 1});
    }
</script>

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadJS", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_ads"] = new Date().getTime(); })(IMDbTimer);</script>
        
        <script  type="text/javascript">
            // ensures js doesn't die if ads service fails.  
            // Note that we need to define the js here, since ad js is being rendered inline after this.
            (function(f) {
                // Fallback javascript, when the ad Service call fails.  
                
                if((window.csm == null || window.generic == null || window.consoleLog == null)) {
                    if (window.console && console.log) {
                        console.log("one or more of window.csm, window.generic or window.consoleLog has been stubbed...");
                    }
                }
                
                window.csm = window.csm || { measure:f, record:f, duration:f, listen:f, metrics:{} };
                window.generic = window.generic || { monitoring: { start_timing: f, stop_timing: f } };
                window.consoleLog = window.consoleLog || f;
            })(function() {});
        </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_head_delivery_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadJS", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadJS", {wb: 1});
    }
</script>
        </head>
    <body id="styleguide-v2" class="fixed">
<script>
    if (typeof uet == 'function') {
      uet("bb");
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_body_delivery_started');
    }
  </script>
        <div id="wrapper">
            <div id="root" class="redesign">
<script>
    if (typeof uet == 'function') {
      uet("ns");
    }
</script>
<div id="nb20" class="navbarSprite">
<div id="supertab">	
	<!-- no content received for slot: top_ad -->
	
</div>
  <div id="navbar" class="navbarSprite">
<noscript>
  <link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/site/consumer-navbar-no-js-3652782989._CB522736526_.css" />
</noscript>
<!--[if IE]><link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/site/consumer-navbar-ie-2133976414._CB522736582_.css"><![endif]-->
<span id="home_img_holder">
<a href="/?ref_=nv_home"
title="Home" class="navbarSprite" id="home_img" ></a>  <span class="alt_logo">
    <a href="/?ref_=nv_home"
title="Home" >IMDb</a>
  </span>
</span>
<form
 method="get"
 action="/find"
 class="nav-searchbar-inner"
 id="navbar-form"

>
  <div id="nb_search">
    <noscript><div id="more_if_no_javascript"><a href="/search/">More</a></div></noscript>
    <button id="navbar-submit-button" class="primary btn" type="submit"><div class="magnifyingglass navbarSprite"></div></button>
    <input type="hidden" name="ref_" value="nv_sr_fn" />
    <input type="text" autocomplete="off" value="" name="q" id="navbar-query" placeholder="Find Movies, TV shows, Celebrities and more...">
    <div class="quicksearch_dropdown_wrapper">
      <select name="s" id="quicksearch" class="quicksearch_dropdown navbarSprite"
              onchange="jumpMenu(this); suggestionsearch_dropdown_choice(this);">
        <option value="all" >All</option>
        <option value="tt" >Titles</option>
        <option value="ep" >TV Episodes</option>
        <option value="nm" >Names</option>
        <option value="co" >Companies</option>
        <option value="kw" >Keywords</option>
        <option value="ch" >Characters</option>
        <option value="qu" >Quotes</option>
        <option value="bi" >Bios</option>
        <option value="pl" >Plots</option>
      </select>
    </div>
    <div id="navbar-suggestionsearch"></div>
  </div>
</form>
<div id="megaMenu">
    <ul id="consumer_main_nav" class="main_nav">
        <li class="spacer"></li>
        <li class="css_nav_item" id="navTitleMenu">
            <p class="navCategory">
                <a href="/movies-in-theaters/?ref_=nv_tp_inth_1"
>Movies</a>,
                <a href="/chart/toptv/?ref_=nv_tp_tv250_2"
>TV</a><br />
                & <a href="/showtimes/?ref_=nv_tp_sh_3"
>Showtimes</a></p>
            <span class="downArrow"></span>
            <div id="navMenu1" class="sub_nav">
                <div id="titleAd"></div>
                <div class="subNavListContainer">
                    <h5>MOVIES</h5>
                    <ul>
                        <li><a href="/movies-in-theaters/?ref_=nv_mv_inth_1"
>In Theaters</a></li>
                        <li><a href="/showtimes/?ref_=nv_mv_sh_2"
>Showtimes & Tickets</a></li>
                        <li><a href="/trailers/?ref_=nv_mv_tr_3"
>Latest Trailers</a></li>
                        <li><a href="/movies-coming-soon/?ref_=nv_mv_cs_4"
>Coming Soon</a></li>
                        <li><a href="/calendar/?ref_=nv_mv_cal_5"
>Release Calendar</a></li>
                        <li><a href="/chart/top?ref_=nv_mv_250_6"
>Top Rated Movies</a></li>
                        <li><a href="/india/top-rated-indian-movies?ref_=nv_mv_250_in_7"
>Top Rated Indian Movies</a></li>
                        <li><a href="/chart/moviemeter?ref_=nv_mv_mpm_8"
>Most Popular Movies</a></li>
                    </ul>
                    <h5>CHARTS & TRENDS</h5>
                    <ul>
                        <li><a href="/chart/?ref_=nv_ch_cht_1"
>Box Office</a></li>
                        <li><a href="/search/title?count=100&groups=oscar_best_picture_winners&sort=year,desc&ref_=nv_ch_osc_2"
>Oscar Winners</a></li>
                        <li><a href="/genre/?ref_=nv_ch_gr_3"
>Most Popular by Genre</a></li>
                    </ul>
                </div>
                <div class="subNavListContainer">
                    <h5>TV & VIDEO</h5>
                    <ul>
                        <li><a href="/tv/?ref_=nv_tvv_tv_1"
>IMDb TV</a></li>
                        <li><a href="/tvgrid/?ref_=nv_tvv_ls_2"
>On Tonight</a></li>
                        <li><a href="/chart/toptv/?ref_=nv_tvv_250_3"
>Top Rated TV Shows</a></li>
                        <li><a href="/chart/tvmeter?ref_=nv_tvv_mptv_4"
>Most Popular TV Shows</a></li>
                        <li><a href="/feature/watch-now-on-amazon/?ref_=nv_tvv_wn_5"
>Watch Now on Amazon</a></li>
                        <li><a href="/sections/dvd/?ref_=nv_tvv_dvd_6"
>DVD & Blu-Ray</a></li>
                    </ul>
                    <h5>SPECIAL FEATURES</h5>
                    <ul>
                        <li><a href="/amazon-originals/?ref_=nv_sf_ams_1"
>Amazon Originals</a></li>
                        <li><a href="/streaming/?ref_=nv_sf_st_2"
>Streaming</a></li>
                        <li><a href="/comic-con/?ref_=nv_sf_ccn_3"
>Comic-Con</a></li>
                        <li><a href="/imdbpicks/?ref_=nv_sf_picks_4"
>IMDb Picks</a></li>
                        <li><a href="/superheroes/?ref_=nv_sf_supr_5"
>Superheroes</a></li>
                    </ul>
                </div>
            </div>
        </li>
        <li class="spacer"></li>
        <li class="css_nav_item" id="navNameMenu">
            <p class="navCategory">
                <a href="/search/name?gender=male,female&ref_=nv_tp_cel_1"
>Celebs</a>,
                <a href="/awards-central/?ref_=nv_tp_awrd_2"
>Events</a><br />
                & <a href="/gallery/rg784964352?ref_=nv_tp_ph_3"
>Photos</a></p>
            <span class="downArrow"></span>
            <div id="navMenu2" class="sub_nav">
                <div id="nameAd"></div>
                <div class="subNavListContainer">
                    <h5>CELEBS</h5>
                    <ul>
                            <li><a href="/search/name?birth_monthday=08-06&refine=birth_monthday&ref_=nv_cel_brn_1"
>Born Today</a></li>
                        <li><a href="/news/celebrity?ref_=nv_cel_nw_2"
>Celebrity News</a></li>
                        <li><a href="/search/name?gender=male,female&ref_=nv_cel_m_3"
>Most Popular Celebs</a></li>
                    </ul>
                    <h5>PHOTOS</h5>
                    <ul>
                        <li><a href="/gallery/rg1859820288?ref_=nv_ph_ls_1"
>Latest Stills</a></li>
                        <li><a href="/gallery/rg1624939264?ref_=nv_ph_lp_2"
>Latest Posters</a></li>
                        <li><a href="/gallery/rg1641716480?ref_=nv_ph_lv_3"
>Photos We Love</a></li>
                    </ul>
                </div>
                <div class="subNavListContainer">
                    <h5>EVENTS</h5>
                    <ul>
                        <li><a href="/awards-central/?ref_=nv_ev_awrd_1"
>Awards Central</a></li>
                        <li><a href="/oscars/?ref_=nv_ev_acd_2"
>Oscars</a></li>
                        <li><a href="/golden-globes/?ref_=nv_ev_gg_3"
>Golden Globes</a></li>
                        <li><a href="/sundance/?ref_=nv_ev_sun_4"
>Sundance</a></li>
                        <li><a href="/cannes/?ref_=nv_ev_can_5"
>Cannes</a></li>
                        <li><a href="/comic-con/?ref_=nv_ev_comic_6"
>Comic-Con</a></li>
                        <li><a href="/emmys/?ref_=nv_ev_rte_7"
>Emmy Awards</a></li>
                        <li><a href="/venice/?ref_=nv_ev_venice_8"
>Venice Film Festival</a></li>
                        <li><a href="/toronto/?ref_=nv_ev_tff_9"
>Toronto Film Festival</a></li>
                        <li><a href="/festival-central/?ref_=nv_ev_fc_10"
>Festival Central</a></li>
                        <li><a href="/festival-central/tribeca?ref_=nv_ev_tff_11"
>Tribeca</a></li>
                        <li><a href="/event/all/?ref_=nv_ev_all_12"
>All Events</a></li>
                    </ul>
                </div>
            </div>
        </li>
        <li class="spacer"></li>
        <li class="css_nav_item" id="navNewsMenu">
            <p class="navCategory">
                <a href="/news/top?ref_=nv_tp_nw_1"
>News</a> &<br />
                <a href="/czone/?ref_=nv_cm_cz_2"
>Community</a>
            </p>
            <span class="downArrow"></span>
            <div id="navMenu3" class="sub_nav">
                <div id="latestHeadlines">
                    <div class="subNavListContainer">
                        <h5>LATEST HEADLINES</h5>
    <ul>
                <li itemprop="headline">
<a href="/news/ni61377005/?ref_=nv_nw_tn_1"
> 'The Dark Tower' Tops Lowest Weekend of Summer 2017 Yet
</a><br />
                        <span class="time">2 hours ago</span>
                </li>
                <li itemprop="headline">
<a href="/news/ni61376849/?ref_=nv_nw_tn_2"
> Alec Baldwin Sets First Look Deal with ABC Studios, to Return as ‘Match Game’ Host for Season 3
</a><br />
                        <span class="time">2 hours ago</span>
                </li>
                <li itemprop="headline">
<a href="/news/ni61376299/?ref_=nv_nw_tn_3"
> 'Handmaid's Tale' Wins Top Honor at 2017 TCA Awards
</a><br />
                        <span class="time">15 hours ago</span>
                </li>
    </ul>
                    </div>
                </div>
                <div class="subNavListContainer">
                    <h5>NEWS</h5>
                    <ul>
                        <li><a href="/news/top?ref_=nv_nw_tp_1"
>Top News</a></li>
                        <li><a href="/news/movie?ref_=nv_nw_mv_2"
>Movie News</a></li>
                        <li><a href="/news/tv?ref_=nv_nw_tv_3"
>TV News</a></li>
                        <li><a href="/news/celebrity?ref_=nv_nw_cel_4"
>Celebrity News</a></li>
                        <li><a href="/news/indie?ref_=nv_nw_ind_5"
>Indie News</a></li>
                    </ul>
                    <h5>COMMUNITY</h5>
                    <ul>
                        <li><a href="/czone/?ref_=nv_cm_cz_2"
>Contributor Zone</a></li>
                        <li><a href="/poll/?ref_=nv_cm_pl_3"
>Polls</a></li>
                    </ul>
                </div>
            </div>
        </li>
        <li class="spacer"></li>
        <li class="css_nav_item" id="navWatchlistMenu">
<p class="navCategory singleLine watchlist">
    <a href="/list/watchlist?ref_=nv_wl_all_0"
>Watchlist</a>
</p>
<span class="downArrow"></span>
<div id="navMenu4" class="sub_nav">
    <h5>
            YOUR WATCHLIST
    </h5>
    <ul id="navWatchlist">
    </ul>
    <script>
    if (!('imdb' in window)) { window.imdb = {}; }
    window.imdb.watchlistTeaserData = [
                {
                        href : "/list/watchlist",
                src : "http://ia.media-imdb.com/images/G/01/imdb/images/navbar/watchlist_slot1_logged_out-1670046337._CB522736556_.jpg"
                },
                {
                    href : "/search/title?count=100&title_type=feature,tv_series",
                src : "http://ia.media-imdb.com/images/G/01/imdb/images/navbar/watchlist_slot2_popular-4090757197._CB522736562_.jpg"
                },
                {
                    href : "/chart/top",
                src : "http://ia.media-imdb.com/images/G/01/imdb/images/navbar/watchlist_slot3_top250-575799966._CB522736596_.jpg"
                }
    ];
    </script>
</div>
        </li>
        <li class="spacer"></li>
    </ul>
<script>
if (!('imdb' in window)) { window.imdb = {}; }
window.imdb.navbarAdSlots = {
    titleAd : {
    },
    nameAd : {
    }
}
</script>
</div>
<div id="nb_extra">
    <ul id="nb_extra_nav" class="main_nav">
        <li class="css_nav_item" id="navProMenu">
            <p class="navCategory">
<a href="http://pro.imdb.com/signup/index.html?rf=cons_nb_hm&ref_=cons_nb_hm"
> <img alt="IMDbPro Menu" src="http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_logo_nb-3000473826._CB530713470_.png" />
</a>            </p>
            <span class="downArrow"></span>
            <div id="navMenuPro" class="imdb-pro-ad sub_nav">
<a href="http://pro.imdb.com/signup/index.html?rf=cons_nb_hm&ref_=cons_nb_hm"
class="imdp-pro-ad__link" > <div id="proAd" class="imdb-pro-ad__image">
<img alt="Go to IMDbPro" height="180" width="174"
src="http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_menu_user-4091932618._CB530713443_.png"
srcset="http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_menu_user-4091932618._CB530713443_.png 1x,
http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_menu_user_2x-2074318947._CB530713441_.png 2x" />
</div>
<section class="imdb-pro-ad__content">
<h1 class="imdb-pro-ad__title">The leading information resource for the entertainment industry</h1>
<p class="imdb-pro-ad__line">Find industry contacts &amp; talent representation</p>
<p class="imdb-pro-ad__line">Manage your photos, credits, &amp; more</p>
<p class="imdb-pro-ad__line">Showcase yourself on IMDb &amp; Amazon</p>
<span role="button" class="imdb-pro-ad__button">Go to IMDbPro</a>
</section>
</a>            </div>
        </li>
        <li class="spacer"><span class="ghost">|</span></li>
        <li>
            <a href="/help/?ref_=nb_hlp"
>Help</a>
        </li>
        <li class="social">

    <a href="/offsite/?page-action=fol_fb&token=BCYsBy_Xo-wwScsoCyb_ZWEQPAz6BRrmCWkyssXOS-yqQjCcVnxo4ammGM5JpSFYFlCOFcTY06Sa%0D%0AFDlNKEcALn_ObnQCh8jp_FbsZC0L6xmlq4yGl6Ew6ZgyZm1Z__4OaoWrB8sPvAD1QlBta6cct79R%0D%0Ab8UOY_u7oElkk4Qtjd5t7M3zBN9P5JWRyOHhe8UscHGMexuKBzlmPCTmiJ3Vy4Shtw%0D%0A&ref_=tt_nv_fol_fb"
title="Follow IMDb on Facebook" target="_blank" itemprop='url'> <span class="desktop-sprite follow-facebook" ></span>
</a>
    <a href="/offsite/?page-action=fol_tw&token=BCYr0aBADtLxjnFDwa7G5Uv6gZ7vTw8Q1qdKZr6TKNzmwpIP2WHKM5uOY3Jwwc9rEwxXVmQzSFRg%0D%0Ap5lSYIqZCW8VVGS_EHOesVyol8-D1XvmmfnA90qhknRhsKUPVrkSyERLGDMt96tK-r48UJ2V3twd%0D%0ASCQoXztoFTCOBIutvx-L1Wpmt38etUBnno2BUAHk45SNmd3CIjKBta91ixxI92f3Fw%0D%0A&ref_=tt_nv_fol_tw"
title="Follow IMDb on Twitter" target="_blank" itemprop='url'> <span class="desktop-sprite follow-twitter" ></span>
</a>
    <a href="/offsite/?page-action=fol_inst&token=BCYnKUJJ7oSSX0SswUkxkPNkMXylYcj3SoJ_JmBxCLRCU9T4bLurMSkM5s-XZ3uZA-I-FurGDpgP%0D%0A6HV4Y9raRZqlugmp5JljtXf_BCzHcZGm8Cac4BxG-573P1g9zT9rZcTbqSp8RQoe4A7gQnqpT7fe%0D%0Am1Oj7j21FkfyjCbBk-xRpvZ1VSRD5g0PBxXZcd3a3fTrND3fqFVU1QWm0SMGCtz2Jw%0D%0A&ref_=tt_nv_fol_inst"
title="Follow IMDb on Instagram" target="_blank" itemprop='url'> <span class="desktop-sprite follow-instagram" ></span>
</a>
        </li>
    </ul>
</div>
<div id="nb_personal">
    <ul id="consumer_user_nav" class="main_nav">

            <li class="css_nav_menu no_arrow" id="navUserMenu">
            <p class="navCategory singleLine">
                <a id="facebook-signin-link" href="https://graph.facebook.com/v2.8/oauth/authorize?client_id=127059960673829&scope=email%2Cuser_about_me%2Cuser_birthday&state=eyI0OWU2YyI6ImRhMjkiLCJ1IjoiaHR0cHM6Ly93d3cuaW1kYi5jb20vP3JlZl89bnZfZmJfbGdpbiIsIm1hbnVhbExpbmsiOiJmYWxzZSJ9&redirect_uri=https%3A%2F%2Fwww.imdb.com%2Fregistration%2Ffacebookhandler%2F" class="signin-button">
                <span class="facebook-logo"></span>
                <span class="signin-facebook-text">Sign in with Facebook</span></a>
                <a href="https://www.imdb.com/registration/signin?u=/title/tt0118715/%3Fref_%3Dfn_al_tt_1&ref_=nv_usr_lgin_1"
rel="login" class="signin-other-options-text" id="nblogin" >Other Sign in options</a>
                </p>
        </li>
    </ul>
</div>
  </div>
</div>
	
	<!-- no content received for slot: navstrip -->
	
	
	<!-- no content received for slot: injected_navstrip -->
	
<script>
    if (typeof uet == 'function') {
      uet("ne");
    }
</script>
              

                    <div id="pagecontent" class="pagecontent" itemscope itemtype="http://schema.org/Movie">
	
	<!-- no content received for slot: injected_billboard -->
	


    
    
    

    
    
    

    
    
    

	
	<!-- no content received for slot: navboard -->
	


    
    
    

    
    
    

<div id="content-2-wide" class="flatland">
    <div id="main_top" class="main">

    
    
    

    
    
    


    
    
    

            <div class="title-overview">


  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleOverviewWidget_started');
    }
  </script>
        <div id="title-overview-widget" class="heroic-overview">
            <div class="message_box">
                <div id="star-ratings-widget-error" class="hidden error">
                    <h2>There was an error trying to load your rating for this title.</h2>
                    <p>Some parts of this page won't work property. Please reload or try later.</p>
                </div>
            </div>
            <div class="vital">                
      <div id="quicklinksBar" class="subnav">
  <div id="quicklinksMainSection">
         <a href="/title/tt0118715/fullcredits?ref_=tt_ql_1"
class="quicklink" >FULL CAST AND CREW</a> <span class="ghost">|</span>
         <a href="/title/tt0118715/trivia?ref_=tt_ql_2"
class="quicklink" >TRIVIA</a> <span class="ghost">|</span>
         <a href="/title/tt0118715/reviews?ref_=tt_ql_3"
class="quicklink" >USER REVIEWS</a> <span class="ghost">|</span>
      <a href="http://pro.imdb.com/title/tt0118715?rf=cons_tt_contact&ref_=cons_tt_contact"
class="quicklink" >IMDbPro</a>
        <span class="ghost">|</span>
        <span class="show_more quicklink">
            MORE<span class="titleOverviewSprite quicklinksArrowUp"></span>
        </span>
        <span class="show_less quicklink" style="display:none">
           LESS<span class="titleOverviewSprite quicklinksArrowDown"></span>
        </span>
  </div>

    <span class="titleOverviewShareButton launch-share-popover quicklink">SHARE</span>
    <div id="share-popover">
        <a class="close-popover" href="#">X</a>
        <h4>Share</h4>
        
    
    
    <a onclick="window.open(&quot;http://www.facebook.com/sharer.php?u=http%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0118715%2F%3Fref_%3Dext_shr_fb_tt&quot;, 'newWindow', 'width=626,height=436'); return false;"
       href="http://www.facebook.com/sharer.php?u=http%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0118715%2F%3Fref_%3Dext_shr_fb_tt"
       title="Share on Facebook"
       class="facebook"
       target="_blank"><div class="option facebook">
                            <span class="titlePageSprite share_facebook"></span>
                            <div>Facebook</div>
                        </div></a>
    
    
    <a onclick="window.open(&quot;http://twitter.com/intent/tweet?text=The%20Big%20Lebowski%20(14%20May%201998%20(Netherlands))%20-%20imdb.com%2Ftitle%2Ftt0118715%2F%3Fref_%3Dext_shr_tw_tt&quot;, 'newWindow', 'width=815,height=436'); return false;"
       href="http://twitter.com/intent/tweet?text=The%20Big%20Lebowski%20(14%20May%201998%20(Netherlands))%20-%20imdb.com%2Ftitle%2Ftt0118715%2F%3Fref_%3Dext_shr_tw_tt"
       title="Share on Twitter"
       class="twitter"
       target="_blank"><div class="option twitter">
                            <span class="titlePageSprite share_twitter"></span>
                            <div>Twitter</div>
                        </div></a>
    <a href="mailto:?subject=IMDb%3A%20The%20Big%20Lebowski%20(14%20May%201998%20(Netherlands))&body=IMDb%3A%20The%20Big%20Lebowski%20(14%20May%201998%20(Netherlands))%0A%26quot%3BThe%20Dude%26quot%3B%20Lebowski%2C%20mistaken%20for%20a%20millionaire%20Lebowski%2C%20seeks%20restitution%20for%20his%20ruined%20rug%20and%20enlists%20his%20bowling%20buddies%20to%20help%20get%20it.%0Ahttp%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0118715%2F%3Fref_%3Dext_shr_eml_tt" 
       title="Share by e-mail"
       class=""><div class='option email'>
                    <span class='titlePageSprite share_email'></span>
                    <div>E-mail</div>
                    </div></a>
     <a href="#" class="open-checkin-popover">
        <div class="option checkin">
            <span class="titlePageSprite share_checkin"></span>
            <div>Check in</div>
        </div>
     </a>     
            
    </div>
    
        <div id="share-checkin">
<div class="add_to_checkins" data-const="tt0118715" data-lcn="title-maindetails">
<span class="btn2_wrapper"><a onclick='' class="btn2 large btn2_text_on disabled checkins_action_btn"><span class="btn2_glyph">0</span><span class="btn2_text">Check in</span></a></span>    <div class="popup checkin-dialog">
        <a class="small disabled close btn">X</a>
        <span class="beta">Beta</span>
        <span class="title">I'm Watching This!</span>
        <div class="body">
            <div class="info">Keep track of everything you watch; tell your friends.
            </div>
            <div class="small message_box">
                <div class="hidden error"><h2>Error</h2> Please try again!</div>
                <div class="hidden success"><h2>Added to Your Check-Ins.</h2> <a href="/list/checkins">View</a></div>
            </div>
            <textarea data-msg="Enter a comment..."></textarea>
            <div class="share">
                <button class="large primary btn"><span>Check in</span></button>
<!--
                    Check-ins are more fun when<br>
                    you <a href="/register/sharing">enable Facebook sharing</a>!
-->
            </div>
        </div>
    </div>
    <input type="hidden" name="49e6c" value="da29">
</div>
        </div>

   <div class="quicklinkSection" id="full_subnav" style="display:none">           
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">DETAILS</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/fullcredits?ref_=tt_ql_dt_1"
class="quicklink" >Full Cast and Crew</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/releaseinfo?ref_=tt_ql_dt_2"
class="quicklink" >Release Dates</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/officialsites?ref_=tt_ql_dt_3"
class="quicklink quicklinkGray" >Official Sites</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/business?ref_=tt_ql_dt_4"
class="quicklink" >Box Office/Business</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/companycredits?ref_=tt_ql_dt_5"
class="quicklink" >Company Credits</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/locations?ref_=tt_ql_dt_6"
class="quicklink" >Filming Locations</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/technical?ref_=tt_ql_dt_7"
class="quicklink" >Technical Specs</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/literature?ref_=tt_ql_dt_8"
class="quicklink" >Literature</a>                </div>
    </div>
               </div>
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">STORYLINE</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/taglines?ref_=tt_ql_stry_1"
class="quicklink" >Taglines</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/plotsummary?ref_=tt_ql_stry_2"
class="quicklink" >Plot Summary</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/synopsis?ref_=tt_ql_stry_3"
class="quicklink" >Synopsis</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/keywords?ref_=tt_ql_stry_4"
class="quicklink" >Plot Keywords</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/parentalguide?ref_=tt_ql_stry_5"
class="quicklink" >Parents Guide</a>                </div>
    </div>
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">RELATED ITEMS</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/news?ref_=tt_ql_rel_1"
class="quicklink" >NewsDesk</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/externalsites?ref_=tt_ql_rel_2"
class="quicklink" >External Sites</a>                </div>
    </div>
               </div>
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">OPINION</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/awards?ref_=tt_ql_op_1"
class="quicklink" >Awards</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/faq?ref_=tt_ql_op_2"
class="quicklink" >FAQ</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/reviews?ref_=tt_ql_op_3"
class="quicklink" >User Reviews</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/ratings?ref_=tt_ql_op_4"
class="quicklink" >User Ratings</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/externalreviews?ref_=tt_ql_op_5"
class="quicklink" >External Reviews</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/criticreviews?ref_=tt_ql_op_6"
class="quicklink" >Metacritic Reviews</a>                </div>
    </div>
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">PHOTO & VIDEO</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/mediaindex?ref_=tt_ql_pv_1"
class="quicklink" >Photo Gallery</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/videogallery?ref_=tt_ql_pv_2"
class="quicklink" >Trailers and Videos</a>                </div>
    </div>
               </div>
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">DID YOU KNOW?</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/trivia?ref_=tt_ql_trv_1"
class="quicklink" >Trivia</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/goofs?ref_=tt_ql_trv_2"
class="quicklink" >Goofs</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/crazycredits?ref_=tt_ql_trv_3"
class="quicklink" >Crazy Credits</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/quotes?ref_=tt_ql_trv_4"
class="quicklink" >Quotes</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/alternateversions?ref_=tt_ql_trv_5"
class="quicklink" >Alternate Versions</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/movieconnections?ref_=tt_ql_trv_6"
class="quicklink" >Connections</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0118715/soundtrack?ref_=tt_ql_trv_7"
class="quicklink" >Soundtracks</a>                </div>
    </div>
               </div>
   </div>
      </div>  
         
                <div class="title_block">
                    <div class="title_bar_wrapper">

    <div class="ratings_wrapper">
        <div class="imdbRating" itemtype="http://schema.org/AggregateRating" itemscope="" itemprop="aggregateRating">
                <div class="ratingValue">
<strong title="8.2 based on 586,009 user ratings"><span itemprop="ratingValue">8.2</span></strong><span class="grey">/</span><span class="grey" itemprop="bestRating">10</span>                </div>
                <a href="/title/tt0118715/ratings?ref_=tt_ov_rt"
><span class="small" itemprop="ratingCount">586,009</span></a>
                    <div class="hiddenImportant">
                            <span itemprop="reviewCount">1,060 user</span>
                            <span itemprop="reviewCount">253 critic</span>
                    </div>
        </div>
  <div id="star-rating-widget" class="star-rating-widget" data-tconst="tt0118715" data-rating="0" data-user="" data-auth="" data-tracking-tag="title-maindetails">
    <div class="star-rating-button">
      <button>
        <span class="star-rating-star no-rating"></span>
            <span class="star-rating-text">Rate This</span>
      </button>
    </div>
  </div>
    </div>
    <div class="titleBar">
        <div class="primary_ribbon">
            <div class="ribbonize" data-tconst="tt0118715" data-caller-name="title"></div>
            <div class="wlb_dropdown_btn" data-tconst="tt0118715" data-size="large" data-caller-name="title" data-type="primary"></div>
            <div class="wlb_dropdown_list" style="display:none"></div>
        </div>

        <div class="title_wrapper">
<h1 itemprop="name" class="">The Big Lebowski&nbsp;<span id="titleYear">(<a href="/year/1998/?ref_=tt_ov_inf"
>1998</a>)</span>            </h1>
            <div class="subtext">
                    <meta itemprop="contentRating" content="12">12
<span class="ghost">|</span>                    <time itemprop="duration" datetime="PT117M">
                        1h 57min
                    </time>
<span class="ghost">|</span>
<a href="/genre/Comedy?ref_=tt_ov_inf"
><span class="itemprop" itemprop="genre">Comedy</span></a>, 
<a href="/genre/Crime?ref_=tt_ov_inf"
><span class="itemprop" itemprop="genre">Crime</span></a>

<span class="ghost">|</span>
<a href="/title/tt0118715/releaseinfo?ref_=tt_ov_inf"
title="See more release dates" >14 May 1998 (Netherlands)
<meta itemprop="datePublished" content="1998-05-14" />
</a>            </div>
        </div>
    </div>
                    </div>
                </div>



                
            </div>
                <div class="minPosterWithPlotSummaryHeight">
    <div class="poster">
<a href="/title/tt0118715/mediaviewer/rm2950895360?ref_=tt_ov_i"
> <img alt="The Big Lebowski Poster" title="The Big Lebowski Poster"
src="https://images-na.ssl-images-amazon.com/images/M/MV5BZTFjMjBiYzItNzU5YS00MjdiLWJkOTktNDQ3MTE3ZjY2YTY5XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UX182_CR0,0,182,268_AL_.jpg"
itemprop="image" />
</a>    </div>
    <div class="plot_summary_wrapper">
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitlePlotAndCreditSummaryWidget_started');
    }
  </script>
    <div class="plot_summary minPlotHeightWithPoster">
            <div class="summary_text" itemprop="description">
                    &quot;The Dude&quot; Lebowski, mistaken for a millionaire Lebowski, seeks restitution for his ruined rug and enlists his bowling buddies to help get it.
            </div>
        
    <div class="credit_summary_item">
        <h4 class="inline">Directors:</h4>
            <span itemprop="director" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0001054?ref_=tt_ov_dr"
itemprop='url'><span class="itemprop" itemprop="name">Joel Coen</span></a>,             </span>
            <span itemprop="director" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0001053?ref_=tt_ov_dr"
itemprop='url'><span class="itemprop" itemprop="name">Ethan Coen</span></a> (uncredited)            </span>
    </div>
    <div class="credit_summary_item">
        <h4 class="inline">Writers:</h4>
            <span itemprop="creator" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0001053?ref_=tt_ov_wr"
itemprop='url'><span class="itemprop" itemprop="name">Ethan Coen</span></a>,             </span>
            <span itemprop="creator" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0001054?ref_=tt_ov_wr"
itemprop='url'><span class="itemprop" itemprop="name">Joel Coen</span></a>            </span>
    </div>
    <div class="credit_summary_item">
        <h4 class="inline">Stars:</h4>
            <span itemprop="actors" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000313?ref_=tt_ov_st_sm"
itemprop='url'><span class="itemprop" itemprop="name">Jeff Bridges</span></a>,             </span>
            <span itemprop="actors" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000422?ref_=tt_ov_st_sm"
itemprop='url'><span class="itemprop" itemprop="name">John Goodman</span></a>,             </span>
            <span itemprop="actors" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000194?ref_=tt_ov_st_sm"
itemprop='url'><span class="itemprop" itemprop="name">Julianne Moore</span></a>            </span>
            <span class="ghost">|</span>
<a href="fullcredits?ref_=tt_ov_st_sm"
>See full cast & crew</a>&nbsp;&raquo;
    </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitlePlotAndCreditSummaryWidget_finished');
    }
  </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleReviewsAndPopularityWidget_started');
    }
  </script>
      <div class="titleReviewBar ">           
    <div class="titleReviewBarItem">
<a href="criticreviews?ref_=tt_ov_rt"
> <div class="metacriticScore score_favorable titleReviewBarSubItem">
<span>69</span>
</div></a>        <div class="titleReviewBarSubItem">
            <div><a href="criticreviews?ref_=tt_ov_rt"
>
Metascore
</a>            </div>
            <div><span class="subText"> 
               From <a href="http://www.metacritic.com"
target='_blank'>metacritic.com</a> 
               </span>
            </div>
        </div>
    </div>
                   <div class="divider"></div>
           
    <div class="titleReviewBarItem titleReviewbarItemBorder">
        <div>
        Reviews
        </div>
        <div>
            <span class="subText">
                   <a href="reviews?ref_=tt_ov_rt"
>1,060 user</a>                   
                       <span class="ghostText">|</span>
                   <a href="externalreviews?ref_=tt_ov_rt"
>253 critic</a>
             </span>
        </div>
    </div>
                   <div class="divider"></div>

    <div class="titleReviewBarItem">
  <div class="titleOverviewSprite popularityTrendUp"></div>
        <div class="titleReviewBarSubItem">
            <div>
            Popularity
            </div>
            <div>
                <span class="subText">
                    299
      (<span class="titleOverviewSprite popularityImageUp"></span> <span class="popularityUpOrFlat">87</span>)
                </span>
            </div>
        </div>                                   
    </div>
      </div>              
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleReviewsAndPopularityWidget_finished');
    }
  </script>
    </div>
                </div>

    
    
    
        </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleOverviewWidget_finished');
    }
  </script>
            </div> 

<script>
    if (typeof uet == 'function') {
      uet("af");
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_atf_main');
    }
  </script>

    </div> 

<script>
    if (typeof uet == 'function') {
      uet("cf");
    }
</script>


    <div id="sidebar">

	
	<!-- no content received for slot: top_rhs -->
	
  <script>
    if ('csm' in window) {
      csm.measure('csm_atf_sidebar');
    }
  </script>


    
    
    

    
    
    




    
    
        <a name="slot_right-3"></a>
        <div class="mini-article">
        
    
        
                                

    
            <script type="text/javascript">if(typeof uet === 'function'){uet('bb','NinjaWidget',{wb:1});}</script>
                                

                    
    
        <span class="ab_widget">
        
    

    <div class="ab_ninja">
<span class="widget_header"> <span class="oneline"> <a href="/imdbpicks/summer-movie-guide-2017/ls064175482/?pf_rd_m=A2FGELUUNOQJNL&pf_rd_p=3149839222&pf_rd_r=0TPTMHJB6PTZ251DMAC3&pf_rd_s=right-3&pf_rd_t=15021&pf_rd_i=tt0118715&ref_=tt_ecw_mvg17_rhs_hd" > <h3>What Movies Are Coming This Summer?</h3> </a> </span> </span> <div class="widget_content no_inline_blurb"> <div class="widget_nested"> <div class="ninja_image_pack"> <div class="ninja_center"> <div class="ninja_image first_image last_image" style="width:307px;height:auto;" > <div style="width:307px;height:auto;margin:0 auto;"> <div class="widget_image"> <div class="image"> <a href="/imdbpicks/summer-movie-guide-2017/ls064175482/?pf_rd_m=A2FGELUUNOQJNL&pf_rd_p=3149839222&pf_rd_r=0TPTMHJB6PTZ251DMAC3&pf_rd_s=right-3&pf_rd_t=15021&pf_rd_i=tt0118715&ref_=tt_ecw_mvg17_rhs_i_1" > <img itemprop="image" class="pri_image" src="https://images-na.ssl-images-amazon.com/images/M/MV5BMjE3MDYzOTUwN15BMl5BanBnXkFtZTgwMDYyMzIwMjI@._CR209,109,962,720_UX614_UY460._SY230_SX307_AL_.jpg" /> </a> <div class="widget_caption caption_overlay"> <div class="primary"> <div class="onoverflow"> <i>The Hitman's Bodyguard</i> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> <p class="blurb">Superheroes, swimsuits, and special operatives await you in our Summer Movie Guide. Plan your season and take note of the hotly anticipated indie, foreign, and documentary releases, too.</p> <p class="seemore"><a href="/imdbpicks/summer-movie-guide-2017/ls064175482/?pf_rd_m=A2FGELUUNOQJNL&pf_rd_p=3149839222&pf_rd_r=0TPTMHJB6PTZ251DMAC3&pf_rd_s=right-3&pf_rd_t=15021&pf_rd_i=tt0118715&ref_=tt_ecw_mvg17_rhs_sm" class="position_bottom supplemental" >Check out our Summer Movie Guide</a></p>    </div>
    

                        
        </span>



            <script type="text/javascript">
                if(typeof uex === 'function'){uex('ld','NinjaWidget',{wb:1});}
            </script>
        




        </div>
    

  <div class="aux-content-widget-2"> 
    <div class="social">     
  <script type="text/javascript">if (uet) { uet('bb', 'facebook_like_iframe', {wb: 1}); }</script>
  <div class="social_networking_like">
    <iframe
      id="iframe_like"
      name="fbLikeIFrame_0"
      class="social-iframe"
      scrolling="no"
      frameborder="0"
      allowTransparency="allowTransparency"
      ref="http://www.imdb.com/title/tt0118715/"
      width=280
      height=65></iframe>
  </div>
    </div>
  </div>


    
    
    

    
    
    

    
    
    

	
	<!-- no content received for slot: rhs_cornerstone -->
	


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "RelatedNewsWidgetRHS", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_RelatedNewsWidgetRHS_started');
    }
  </script>

      <div class="mini-article" >
        <h3>Related News</h3>

        
                
                    
                    
                    <div class="news_item odd" >
                        <span itemprop="headline" >
                            <a href="/title/tt0118715/news?ref_=tt_nwr_1#ni61360259"
>Quote of the Week: Sam Shepard</a>
                        </span>
                        
                        <br /><small>
                                <span itemprop="datePublished">
                                  31 July 2017 10:34 PM, +01:00
                                </span>
                            
                                <span class="ghost">|</span><span itemprop="provider" >
                                        <a href="/news/ns0000122?ref_=tt_nwr_1"
>www.culturecatch.com</a>
                                </span>
                        </small>
                    </div>
                
                    
                    
                    <div class="news_item even" >
                        <span itemprop="headline" >
                            <a href="/title/tt0118715/news?ref_=tt_nwr_2#ni61359693"
>‘The Night Of’: Why John Turturro’s Itchy Lawyer Gets Under Our Skin</a>
                        </span>
                        
                        <br /><small>
                                <span itemprop="datePublished">
                                  31 July 2017 7:49 PM, +01:00
                                </span>
                            
                                <span class="ghost">|</span><span itemprop="provider" >
                                        <a href="/news/ns0000139?ref_=tt_nwr_2"
>Indiewire</a>
                                </span>
                        </small>
                    </div>
                
                    
                    
                    <div class="news_item odd" >
                        <span itemprop="headline" >
                            <a href="/title/tt0118715/news?ref_=tt_nwr_3#ni61359663"
>‘The Night Of’: Why John Turturro’s Itchy Lawyer Gets Under Our Skin</a>
                        </span>
                        
                        <br /><small>
                                <span itemprop="datePublished">
                                  31 July 2017 7:49 PM, +01:00
                                </span>
                            
                                <span class="ghost">|</span><span itemprop="provider" >
                                        <a href="/news/ns0000353?ref_=tt_nwr_3"
>Thompson on Hollywood</a>
                                </span>
                        </small>
                    </div>
       
            <div class="see-more">
                <a href="/title/tt0118715/news?ref_=tt_nwr_sm"
>See all 1855 related articles</a>&nbsp;&raquo;
            </div>

      </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_RelatedNewsWidgetRHS_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "RelatedNewsWidgetRHS", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "RelatedNewsWidgetRHS", {wb: 1});
    }
</script>


    
    
    

	
	<!-- no content received for slot: middle_rhs -->
	


    
    
    


    
    
        <a name="slot_right-7"></a>
        <div class="mini-article">
        
    
        
                                

    
            <script type="text/javascript">if(typeof uet === 'function'){uet('bb','ZergnetWidget',{wb:1});}</script>
                                

                    
    
        <span class="ab_widget">
            <div class="ab_zergnet">
<span class="widget_header"> <span class="oneline"> <h3>Around The Web</h3> <span>&nbsp;|&nbsp;</span> <h4>Powered by ZergNet</h4> </span> </span> <div class="widget_content no_inline_blurb"> <div class="widget_nested"> <iframe class="zergnet-frame__sidebar" scrolling="no" seamless src="http://ia.media-imdb.com/images/G/01/imdb/html/zergnet-2975767399._CB522861833_.html?widgetId=47009"></iframe> </div> </div>    </div>

                        
        </span>



            <script type="text/javascript">
                if(typeof uex === 'function'){uex('ld','ZergnetWidget',{wb:1});}
            </script>
        




        </div>
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "RelatedListsWidget", {wb: 1});
    }
</script>
        <div class="mini-article">
            <div id="relatedListsWidget">
                <div class="rightcornerlink">
                    <a href="/list/create?ref_=tt_rls"
>Create a list</a>&nbsp;&raquo;
                </div>
                <h3>User Lists</h3>
                <p>Related lists from IMDb users</p>

    <div class="list-preview even">
        <div class="list-preview-item-narrow">
<a href="/list/ls003580801?ref_=tt_rls_1"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTM5MzM4OTIxNl5BMl5BanBnXkFtZTcwNjY2NDUxNw@@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls003580801?ref_=tt_rls_1"
>
to watch
</a></strong>
        </div>
        <div class="list_meta">
            a list of 31 titles
            <br />created 08&nbsp;Sep&nbsp;2011
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview odd">
        <div class="list-preview-item-narrow">
<a href="/list/ls006845054?ref_=tt_rls_2"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNmNhMzI0NmQtMzU1OS00NzQzLTg0NzctZDJkODZlMjU3OTc5XkEyXkFqcGdeQXVyNDc2NjEyMw@@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls006845054?ref_=tt_rls_2"
>
My favourites
</a></strong>
        </div>
        <div class="list_meta">
            a list of 31 titles
            <br />created 22&nbsp;Jan&nbsp;2012
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview even">
        <div class="list-preview-item-narrow">
<a href="/list/ls055845446?ref_=tt_rls_3"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNjYwNTA3MDIyMl5BMl5BanBnXkFtZTYwMjIxNjA3._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls055845446?ref_=tt_rls_3"
>
Fave Movies of all Time!
</a></strong>
        </div>
        <div class="list_meta">
            a list of 33 titles
            <br />created 24&nbsp;Jan&nbsp;2013
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview odd">
        <div class="list-preview-item-narrow">
<a href="/list/ls053126857?ref_=tt_rls_4"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTkxMTA5OTAzMl5BMl5BanBnXkFtZTgwNjA5MDc3NjE@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls053126857?ref_=tt_rls_4"
>
Top 25 Films From The 90s
</a></strong>
        </div>
        <div class="list_meta">
            a list of 26 titles
            <br />created 09&nbsp;Jun&nbsp;2013
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview even">
        <div class="list-preview-item-narrow">
<a href="/list/ls066497251?ref_=tt_rls_5"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/tv.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BZjZjMzQ2ZmUtZWEyZC00NWJiLWFjM2UtMzhmYzZmZDcxMzllXkEyXkFqcGdeQXVyNTA4NzY1MzY@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls066497251?ref_=tt_rls_5"
>
Movies/Shows that have changed me
</a></strong>
        </div>
        <div class="list_meta">
            a list of 49 titles
            <br />created 7&nbsp;months&nbsp;ago
        </div>
        <div class="clear">&nbsp;</div>
    </div>
                <div class="see-more">
                    <a href="/lists/tt0118715?ref_=tt_rls_sm"
>See all related lists</a>&nbsp;&raquo;
                </div>
            </div>
        </div>
<script>
    if (typeof uet == 'function') {
      uet("be", "RelatedListsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "RelatedListsWidget", {wb: 1});
    }
</script>
        


    
    
    

	
	<!-- no content received for slot: btf_rhs1 -->
	


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "ConnectWidget", {wb: 1});
    }
</script>
    <div class="mini-article">
        <h3>Connect with IMDb</h3>
        <div id="facebookWrapper">
            <iframe
                scrolling="no"
                frameborder="0"
                id="facebookIframe"
                allowTransparency="true"></iframe>
        </div>
        <hr>
        <iframe allowtransparency="true"
            frameborder="0"
            role="presentation"
            scrolling="no"
            id="twitterIframe"></iframe>
    </div>
<script>
    if (typeof uet == 'function') {
      uet("be", "ConnectWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "ConnectWidget", {wb: 1});
    }
</script>


    
    
    


  
      
    <div class="mini-article">
        <div id="ratingWidget">
            <h3>Share this Rating</h3>
            <p>
                Title:
                <strong>The Big Lebowski</strong>
                (1998)
            </p>
            <span class="imdbRatingPlugin imdbRatingStyle1" data-user="" data-title="tt0118715" data-style="t1">
<a href="/title/tt0118715/?ref_=tt_plg_rt"
> <img alt="The Big Lebowski (1998) on IMDb"
src="http://ia.media-imdb.com/images/G/01/imdb/images/plugins/imdb_46x22-2264473254._CB522736238_.png">
</a>                <span class="rating">8.2<span class="ofTen">/10</span></span>                
<img src="http://ia.media-imdb.com/images/G/01/imdb/images/plugins/imdb_star_22x21-2889147855._CB522736550_.png" class="star">
            </span>
            <p>Want to share IMDb's rating on your own site? Use the HTML below.</p>
            <div id="ratingPluginHTML" class="hidden">
                <div class="message_box small">
                    <div class="error">
                        <p>
                        You must be a registered user to use the IMDb rating plugin.
                        </p>
                        <a href="/register/login?ref_=tt_plg_rt"
class="cboxElement" rel='login'>Login</a>
                    </div>
                </div>
            </div>
            <div id="ratingWidgetLinks">
                <span class="titlePageSprite arrows show"></span>
                <a href="/plugins?titleId=tt0118715&ref_=tt_plg_rt"
id="toggleRatingPluginHTML" itemprop='url' >Show HTML</a>
                <a href="/plugins?titleId=tt0118715&ref_=tt_plg_rt"
itemprop='url'>View more styles</a>
            </div>
        </div>
    </div>


    
    
    


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleMainDetailsRelatedPolls", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMainDetailsRelatedPolls_started');
    }
  </script>
<div class="mini-article poll-widget-rhs ">
    <style>
        .mini-article.poll-widget-rhs ul li { margin-bottom: 0.5em; clear: left; font-weight: bold;}
        .mini-article.poll-widget-rhs span { margin-bottom: 0.5em; clear: left;}
        .mini-article.poll-widget-rhs img { float: left; padding: 0 5px 5px 0; height: 86px; width: 86px;}
    </style>
    <h3>User Polls</h3>
    <ul>
        <li>
<a href="/poll/q2dNE_sz5dw/?ref_=tt_po_i1"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQ5NTI4NDAxMV5BMl5BanBnXkFtZTcwMTQxNDY3Mw@@._V1_SY86_CR21,0,86,86_.jpg" /></a>        <a href="/poll/q2dNE_sz5dw/?ref_=tt_po_q1"
>Top 250 Friendships</a>
        <li>
<a href="/poll/ATXbtaLLs4k/?ref_=tt_po_i2"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNjUyMTc4MDExMV5BMl5BanBnXkFtZTgwNDg0NDIwMjE@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/ATXbtaLLs4k/?ref_=tt_po_q2"
>Top 25 nine-word movie quotes ...</a>
        <li>
<a href="/poll/7iHWdhNBql8/?ref_=tt_po_i3"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxNzY3MzUxOV5BMl5BanBnXkFtZTcwMDA0NjMyNA@@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/7iHWdhNBql8/?ref_=tt_po_q3"
>Movie Titles To Name Your Dog After</a>
        <li>
<a href="/poll/eYtBhZVqBZ8/?ref_=tt_po_i4"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNDNhN2IxZWItNGEwYS00ZDNhLThiM2UtODU3NWJlZjBkYjQxXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/eYtBhZVqBZ8/?ref_=tt_po_q4"
>Pop's Culture - Gifts for Dad on Father's Day</a>
        <li>
<a href="/poll/2xAsf5ykarQ/?ref_=tt_po_i5"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BZWQyN2ZkODktMTBkNS00OTBjLWJhOGYtNGU4YWVkNTY0ZDZkXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/2xAsf5ykarQ/?ref_=tt_po_q5"
>From Flop to Favorite</a>
        <li>
<a href="/poll/dfgIl8jufLE/?ref_=tt_po_i6"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTY4NzcwODg3Nl5BMl5BanBnXkFtZTcwNTEwOTMyMw@@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/dfgIl8jufLE/?ref_=tt_po_q6"
>Indie films</a>
    </ul>
    <div class="see-more"><a href="/poll/?ref_=tt_po_sm"
>See more polls &raquo;</a></div>
</div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMainDetailsRelatedPolls_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleMainDetailsRelatedPolls", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleMainDetailsRelatedPolls", {wb: 1});
    }
</script>


    
    
    

	
	<!-- no content received for slot: bottom_rhs -->
	


    
    
    
        
	
	<!-- no content received for slot: btf_rhs2 -->
	


    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    </div> 

    <div id="main_bottom" class="main">

    
    
    



    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleAwardsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsWidget_started');
    }
  </script>
      <div class="article highlighted" id="titleAwardsRanks">
          <strong>
<a href="/chart/top?ref_=tt_awd"
> Top Rated Movies #165
</a>          </strong>
          |

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleAwardsSummaryWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsSummaryWidget_started');
    }
  </script>
    <span itemprop="awards">
      4 wins &amp; 17 nominations.
    </span>
    <span class="see-more inline">
<a href="/title/tt0118715/awards?ref_=tt_awd"
class="btn-full" >See more awards</a>&nbsp;&raquo;    </span>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsSummaryWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleAwardsSummaryWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleAwardsSummaryWidget", {wb: 1});
    }
</script>
      </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleAwardsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleAwardsWidget", {wb: 1});
    }
</script>


    
    
    



    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleMediaStripWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_started');
    }
  </script>


  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_started');
    }
  </script>

      <div class = "article" id="titleMediaStrip">
        <div class="mediastrip_container combined">
                <div id="combined-photos">
                    <h2>Photos</h2>
    <div class="mediastrip">        	
                
<a href="/title/tt0118715/mediaviewer/rm1706671104?context=default&ref_=tt_pv_md_1"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Jeff Bridges at an event for The Big Lebowski (1998)" title="Jeff Bridges at an event for The Big Lebowski (1998)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjA5NDEyNTk5Nl5BMl5BanBnXkFtZTcwNTExNzQzNg@@._V1_UX105_CR0,0,105,105_AL_.jpg" itemprop='image' /></a>                
<a href="/title/tt0118715/mediaviewer/rm465157120?context=default&ref_=tt_pv_md_2"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Julianne Moore at an event for The Big Lebowski (1998)" title="Julianne Moore at an event for The Big Lebowski (1998)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjIzNDU3MjA2N15BMl5BanBnXkFtZTcwOTAxNzQzNg@@._V1_UX105_CR0,0,105,105_AL_.jpg" itemprop='image' /></a>                
<a href="/title/tt0118715/mediaviewer/rm2114226176?context=default&ref_=tt_pv_md_3"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Jeff Bridges and Sam Elliott in The Big Lebowski (1998)" title="Jeff Bridges and Sam Elliott in The Big Lebowski (1998)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQ1MTQxMzA2OV5BMl5BanBnXkFtZTcwMDM1NzI3Mg@@._V1_UY105_CR27,0,105,105_AL_.jpg" itemprop='image' /></a>                
<a href="/title/tt0118715/mediaviewer/rm3648637952?context=default&ref_=tt_pv_md_4"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Philip Seymour Hoffman in The Big Lebowski (1998)" title="Philip Seymour Hoffman in The Big Lebowski (1998)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTcyMDk5MjE4NV5BMl5BanBnXkFtZTgwMzc0MTAwMjE@._V1_UX105_CR0,0,105,105_AL_.jpg" itemprop='image' /></a>                
<a href="/title/tt0118715/mediaviewer/rm1896122368?context=default&ref_=tt_pv_md_5"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Ethan Coen and Joel Coen in The Big Lebowski (1998)" title="Ethan Coen and Joel Coen in The Big Lebowski (1998)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTMxMzI4MDc1M15BMl5BanBnXkFtZTcwNzI1NzI3Mg@@._V1_UY105_CR27,0,105,105_AL_.jpg" itemprop='image' /></a>    </div>
                </div>
            <div class="combined-see-more see-more">
<a href="/title/tt0118715/mediaindex?ref_=tt_pv_mi_sm"
><span class="titlePageSprite showAllVidsAndPics"></span></a>
<a href="/title/tt0118715/mediaindex?ref_=tt_pv_mi_sm"
>136 photos</a>

<span class="ghost">|</span>
<a href="/title/tt0118715/news?ref_=tt_pv_nw_sm"
>1855 news articles</a> &raquo;            </div>
        </div>
      </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_finished');
    }
  </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleMediaStripWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleMediaStripWidget", {wb: 1});
    }
</script>



<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleRecsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleRecsWidget_started');
    }
  </script>
    
        <div class="article" id="titleRecs">
            <span class="rightcornerlink">
            <a href="/help/show_leaf?personalrecommendations&ref_=tt_rec_lm"
>Learn more</a>
            </span>
            
            <h2 class="rec_heading_wrapper">  
                <span class="rec_heading" data-spec="p13nsims:tt0118715">People who liked this also liked...&nbsp;</span>
            </h2>

            <div class="rec_wrapper" id="title_recs"
                data-items-per-request="24"
                data-items-per-page="6"
                data-specs="p13nsims:tt0118715"
                data-caller-name="p13nsims-title">      
                
    <div class="rec_const_picker">
        <div class="rec_view">
            <div class="rec_grave" style="display:none"></div>
            <div class="rec_slide">
                        <div class="rec_page">         
    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0116282">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0116282/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Fargo" title="Fargo"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxNzY3MzUxOV5BMl5BanBnXkFtZTcwMDA0NjMyNA@@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0477348">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0477348/?ref_=tt_rec_tti"
><img height="113" width="76" alt="No Country for Old Men" title="No Country for Old Men"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjA5Njk3MjM4OV5BMl5BanBnXkFtZTcwMTc5MTE1MQ@@._V1_UY113_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0105236">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0105236/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Reservoir Dogs" title="Reservoir Dogs"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BZmExNmEwYWItYmQzOS00YjA5LTk2MjktZjEyZDE1Y2QxNjA1XkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0208092">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0208092/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Snatch" title="Snatch"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTA2NDYxOGYtYjU1Mi00Y2QzLTgxMTQtMWI1MGI0ZGQ5MmU4XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UY113_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt1205489">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt1205489/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Gran Torino" title="Gran Torino"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQyMTczMTAxMl5BMl5BanBnXkFtZTcwOTc1ODE0Mg@@._V1_UY113_CR2,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0266697">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0266697/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Kill Bill: Vol. 1" title="Kill Bill: Vol. 1"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTU1NDg1Mzg4M15BMl5BanBnXkFtZTYwMDExOTc3._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

                        </div>
                        <div class="rec_page">         
    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0469494">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0469494/?ref_=tt_rec_tti"
><img height="113" width="76" alt="There Will Be Blood" title="There Will Be Blood"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjAxODQ4MDU5NV5BMl5BanBnXkFtZTcwMDU4MjU1MQ@@._V1_UY113_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0093058">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0093058/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Full Metal Jacket" title="Full Metal Jacket"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNzc2ZThkOGItZGY5YS00MDYwLTkyOTAtNDRmZWIwMGRhYTc0L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0066921">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0066921/?ref_=tt_rec_tti"
><img height="113" width="76" alt="A Clockwork Orange" title="A Clockwork Orange"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTY3MjM1Mzc4N15BMl5BanBnXkFtZTgwODM0NzAxMDE@._V1_UY113_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0110912">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0110912/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Pulp Fiction" title="Pulp Fiction"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTkxMTA5OTAzMl5BMl5BanBnXkFtZTgwNjA5MDc3NjE@._V1_UY113_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0434409">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0434409/?ref_=tt_rec_tti"
><img height="113" width="76" alt="V for Vendetta" title="V for Vendetta"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BYzllMjJkODAtYjMwMi00YmNhLWFhYzAtZjZjODg5YzEwOGUwXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_UY113_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0114814">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0114814/?ref_=tt_rec_tti"
><img height="113" width="76" alt="The Usual Suspects" title="The Usual Suspects"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BYTViNjMyNmUtNDFkNC00ZDRlLThmMDUtZDU2YWE4NGI2ZjVmXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

                        </div>
            </div>
            <div class="rec_nav">
                <div class="rec_nav_page_num"></div>
                <a class="rec_nav_left">&#9668; Prev 6</a>
                <a class="rec_nav_right">Next 6 &#9658;</a>
            </div>
        </div>
    </div>
    
   <div class="rec_overviews">

         
      <div class="rec_overview" data-tconst="tt0116282">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0116282">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0116282/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Fargo" title="Fargo"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTgxNzY3MzUxOV5BMl5BanBnXkFtZTcwMDA0NjMyNA@@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0116282" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0116282/?ref_=tt_rec_tt"
><b>Fargo</b></a>
            <span class="nobr">(1996)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Crime          
 <span class="ghost">|</span> 
                     Drama          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0116282|imdb|8.1|8.1|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.1/10 (495,057 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 113.4px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.1</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0116282/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Jerry Lundegaard's inept crime falls apart due to his and his henchmen's bungling and the persistent police work of the quite pregnant Marge Gunderson.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Directors:</b>
Joel Coen,
Ethan Coen  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
William H. Macy, 
Frances McDormand, 
Steve Buscemi</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0477348">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0477348">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0477348/?ref_=tt_rec_tti"
><img height="190" width="128" alt="No Country for Old Men" title="No Country for Old Men"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjA5Njk3MjM4OV5BMl5BanBnXkFtZTcwMTc5MTE1MQ@@._V1_UY190_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0477348" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0477348/?ref_=tt_rec_tt"
><b>No Country for Old Men</b></a>
            <span class="nobr">(2007)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Crime          
 <span class="ghost">|</span> 
                     Drama          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0477348|imdb|8.1|8.1|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.1/10 (671,002 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 113.4px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.1</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0477348/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Violence and mayhem ensue after a hunter stumbles upon a drug deal gone wrong and more than two million dollars in cash near the Rio Grande.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Directors:</b>
Ethan Coen,
Joel Coen  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Tommy Lee Jones, 
Javier Bardem, 
Josh Brolin</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0105236">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0105236">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0105236/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Reservoir Dogs" title="Reservoir Dogs"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BZmExNmEwYWItYmQzOS00YjA5LTk2MjktZjEyZDE1Y2QxNjA1XkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0105236" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0105236/?ref_=tt_rec_tt"
><b>Reservoir Dogs</b></a>
            <span class="nobr">(1992)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Crime          
 <span class="ghost">|</span> 
                     Drama          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0105236|imdb|8.3|8.3|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.3/10 (726,783 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 116.2px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.3</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0105236/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
After a simple jewelry heist goes terribly wrong, the surviving criminals begin to suspect that one of them is a police informant.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Quentin Tarantino  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Harvey Keitel, 
Tim Roth, 
Michael Madsen</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0208092">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0208092">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0208092/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Snatch" title="Snatch"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTA2NDYxOGYtYjU1Mi00Y2QzLTgxMTQtMWI1MGI0ZGQ5MmU4XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UY190_CR1,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0208092" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0208092/?ref_=tt_rec_tt"
><b>Snatch</b></a>
            <span class="nobr">(2000)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Comedy          
 <span class="ghost">|</span> 
                     Crime          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0208092|imdb|8.3|8.3|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.3/10 (648,215 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 116.2px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.3</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0208092/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Unscrupulous boxing promoters, violent bookmakers, a Russian gangster, incompetent amateur robbers, and supposedly Jewish jewelers fight to track down a priceless stolen diamond.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Guy Ritchie  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Jason Statham, 
Brad Pitt, 
Benicio Del Toro</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt1205489">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt1205489">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt1205489/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Gran Torino" title="Gran Torino"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQyMTczMTAxMl5BMl5BanBnXkFtZTcwOTc1ODE0Mg@@._V1_UY190_CR3,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt1205489" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt1205489/?ref_=tt_rec_tt"
><b>Gran Torino</b></a>
            <span class="nobr">(2008)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 12

                     Drama          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt1205489|imdb|8.2|8.2|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.2/10 (603,615 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 114.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.2</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt1205489/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Disgruntled Korean War veteran Walt Kowalski sets out to reform his neighbor, a Hmong teenager who tried to steal Kowalski's prized possession: a 1972 Gran Torino.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Clint Eastwood  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Clint Eastwood, 
Bee Vang, 
Christopher Carley</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0266697">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0266697">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0266697/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Kill Bill: Vol. 1" title="Kill Bill: Vol. 1"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTU1NDg1Mzg4M15BMl5BanBnXkFtZTYwMDExOTc3._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0266697" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0266697/?ref_=tt_rec_tt"
><b>Kill Bill: Vol. 1</b></a>
            <span class="nobr">(2003)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Action          
 <span class="ghost">|</span> 
                     Crime          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0266697|imdb|8.1|8.1|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.1/10 (797,802 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 113.4px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.1</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0266697/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
The Bride wakens from a four-year coma. The child she carried in her womb is gone. Now she must wreak vengeance on the team of assassins who betrayed her - a team she was once part of.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Quentin Tarantino  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Uma Thurman, 
David Carradine, 
Daryl Hannah</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0469494">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0469494">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0469494/?ref_=tt_rec_tti"
><img height="190" width="128" alt="There Will Be Blood" title="There Will Be Blood"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjAxODQ4MDU5NV5BMl5BanBnXkFtZTcwMDU4MjU1MQ@@._V1_UY190_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0469494" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0469494/?ref_=tt_rec_tt"
><b>There Will Be Blood</b></a>
            <span class="nobr">(2007)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Drama          
 <span class="ghost">|</span> 
                     History          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0469494|imdb|8.1|8.1|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.1/10 (407,510 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 113.4px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.1</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0469494/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
A story of family, religion, hatred, oil and madness, focusing on a turn-of-the-century prospector in the early days of the business.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Paul Thomas Anderson  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Daniel Day-Lewis, 
Paul Dano, 
Ciarán Hinds</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0093058">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0093058">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0093058/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Full Metal Jacket" title="Full Metal Jacket"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNzc2ZThkOGItZGY5YS00MDYwLTkyOTAtNDRmZWIwMGRhYTc0L2ltYWdlXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0093058" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0093058/?ref_=tt_rec_tt"
><b>Full Metal Jacket</b></a>
            <span class="nobr">(1987)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Drama          
 <span class="ghost">|</span> 
                     War          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0093058|imdb|8.3|8.3|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.3/10 (531,159 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 116.2px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.3</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0093058/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
A pragmatic U.S. Marine observes the dehumanizing effects the Vietnam War has on his fellow recruits from their brutal boot camp training to the bloody street fighting in Hue.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Stanley Kubrick  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Matthew Modine, 
R. Lee Ermey, 
Vincent D'Onofrio</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0066921">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0066921">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0066921/?ref_=tt_rec_tti"
><img height="190" width="128" alt="A Clockwork Orange" title="A Clockwork Orange"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTY3MjM1Mzc4N15BMl5BanBnXkFtZTgwODM0NzAxMDE@._V1_UY190_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0066921" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0066921/?ref_=tt_rec_tt"
><b>A Clockwork Orange</b></a>
            <span class="nobr">(1971)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 14

                     Crime          
 <span class="ghost">|</span> 
                     Drama          
 <span class="ghost">|</span> 
                     Sci-Fi          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0066921|imdb|8.3|8.3|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.3/10 (608,184 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 116.2px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.3</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0066921/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
In future Britain, Alex DeLarge, a charismatic and psychopath delinquent, who likes to practice crimes and ultra-violence with his gang, is jailed and volunteers for an experimental aversion therapy developed by the government in an effort to solve society's crime problem - but not all goes according to plan.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Stanley Kubrick  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Malcolm McDowell, 
Patrick Magee, 
Michael Bates</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0110912">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0110912">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0110912/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Pulp Fiction" title="Pulp Fiction"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTkxMTA5OTAzMl5BMl5BanBnXkFtZTgwNjA5MDc3NjE@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0110912" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0110912/?ref_=tt_rec_tt"
><b>Pulp Fiction</b></a>
            <span class="nobr">(1994)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Crime          
 <span class="ghost">|</span> 
                     Drama          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0110912|imdb|8.9|8.9|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.9/10 (1,440,391 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 124.6px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.9</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0110912/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
The lives of two mob hit men, a boxer, a gangster's wife, and a pair of diner bandits intertwine in four tales of violence and redemption.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Quentin Tarantino  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
John Travolta, 
Uma Thurman, 
Samuel L. Jackson</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0434409">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0434409">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0434409/?ref_=tt_rec_tti"
><img height="190" width="128" alt="V for Vendetta" title="V for Vendetta"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BYzllMjJkODAtYjMwMi00YmNhLWFhYzAtZjZjODg5YzEwOGUwXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_UY190_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0434409" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0434409/?ref_=tt_rec_tt"
><b>V for Vendetta</b></a>
            <span class="nobr">(2005)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Action          
 <span class="ghost">|</span> 
                     Drama          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0434409|imdb|8.2|8.2|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.2/10 (858,394 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 114.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.2</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0434409/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
In a future British tyranny, a shadowy freedom fighter, known only by the alias of "V", plots to overthrow it with the help of a young woman.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
James McTeigue  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Hugo Weaving, 
Natalie Portman, 
Rupert Graves</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0114814">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0118715" data-tconst="tt0114814">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0114814/?ref_=tt_rec_tti"
><img height="190" width="128" alt="The Usual Suspects" title="The Usual Suspects"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BYTViNjMyNmUtNDFkNC00ZDRlLThmMDUtZDU2YWE4NGI2ZjVmXkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0114814" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0114814/?ref_=tt_rec_tt"
><b>The Usual Suspects</b></a>
            <span class="nobr">(1995)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    Certificate: 16

                     Crime          
 <span class="ghost">|</span> 
                     Drama          
 <span class="ghost">|</span> 
                     Mystery          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0114814|imdb|8.6|8.6|p13nsims-title|tt0118715|title|main" data-ga-identifier=""
title="Users rated this 8.6/10 (805,452 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 120.4px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">8.6</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0114814/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
A sole survivor tells of the twisty events leading up to a horrific gun battle on a boat, which began when five criminals met at a seemingly random police lineup.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Bryan Singer  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Kevin Spacey, 
Gabriel Byrne, 
Chazz Palminteri</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
    
   </div>
   
                
            </div>
        </div>  
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleRecsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleRecsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleRecsWidget", {wb: 1});
    }
</script>


<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleCastWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleCastWidget_started');
    }
  </script>
    <div class="article" id="titleCast">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_cl"
rel="login">Edit</a>
    </span>
        <h2>Cast</h2>
        
        <table class="cast_list">    
  <tr><td colspan="4" class="castlist_label">Cast overview, first billed only:</td></tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0000313/?ref_=tt_cl_i1"
><img height="44" width="32" alt="Jeff Bridges" title="Jeff Bridges"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNTU1NjM4MDYzMl5BMl5BanBnXkFtZTcwMjIwMjMyMw@@._V1_UY44_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000313/?ref_=tt_cl_t1"
itemprop='url'> <span class="itemprop" itemprop="name">Jeff Bridges</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003518/?ref_=tt_cl_t1" >The Dude</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0000422/?ref_=tt_cl_i2"
><img height="44" width="32" alt="John Goodman" title="John Goodman"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjI2MTIzODQ1M15BMl5BanBnXkFtZTcwNjI4Mzc1OA@@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000422/?ref_=tt_cl_t2"
itemprop='url'> <span class="itemprop" itemprop="name">John Goodman</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003521/?ref_=tt_cl_t2" >Walter Sobchak</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0000194/?ref_=tt_cl_i3"
><img height="44" width="32" alt="Julianne Moore" title="Julianne Moore"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTM5NDI1MjE2Ml5BMl5BanBnXkFtZTgwNDE0Nzk0MDE@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000194/?ref_=tt_cl_t3"
itemprop='url'> <span class="itemprop" itemprop="name">Julianne Moore</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003519/?ref_=tt_cl_t3" >Maude Lebowski</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0000114/?ref_=tt_cl_i4"
><img height="44" width="32" alt="Steve Buscemi" title="Steve Buscemi"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BODc0NTU3NDA4M15BMl5BanBnXkFtZTcwNDkxNzQxNA@@._V1_UY44_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000114/?ref_=tt_cl_t4"
itemprop='url'> <span class="itemprop" itemprop="name">Steve Buscemi</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003517/?ref_=tt_cl_t4" >Theodore Donald 'Donny' Kerabatsos</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0399663/?ref_=tt_cl_i5"
><img height="44" width="32" alt="David Huddleston" title="David Huddleston"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTk4NDMwOTUxMF5BMl5BanBnXkFtZTcwMjEzMzYwOA@@._V1_UY44_CR2,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0399663/?ref_=tt_cl_t5"
itemprop='url'> <span class="itemprop" itemprop="name">David Huddleston</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003528/?ref_=tt_cl_t5" >The Big Lebowski</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0000450/?ref_=tt_cl_i6"
><img height="44" width="32" alt="Philip Seymour Hoffman" title="Philip Seymour Hoffman"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQ0NTA1NTg3Ml5BMl5BanBnXkFtZTcwNzkxNzgxNw@@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000450/?ref_=tt_cl_t6"
itemprop='url'> <span class="itemprop" itemprop="name">Philip Seymour Hoffman</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003523/?ref_=tt_cl_t6" >Brandt</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0005346/?ref_=tt_cl_i7"
><img height="44" width="32" alt="Tara Reid" title="Tara Reid"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNjkwNDgyMzMxNl5BMl5BanBnXkFtZTcwMDYyMjc0OQ@@._V1_UY44_CR4,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0005346/?ref_=tt_cl_t7"
itemprop='url'> <span class="itemprop" itemprop="name">Tara Reid</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003520/?ref_=tt_cl_t7" >Bunny Lebowski</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0600657/?ref_=tt_cl_i8"
><img height="44" width="32" alt="Philip Moon" title="Philip Moon"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOTMwNTk0MjI3MF5BMl5BanBnXkFtZTcwNDA0MDQ1NQ@@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0600657/?ref_=tt_cl_t8"
itemprop='url'> <span class="itemprop" itemprop="name">Philip Moon</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Woo, Treehorn Thug 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0671032/?ref_=tt_cl_i9"
><img height="44" width="32" alt="Mark Pellegrino" title="Mark Pellegrino"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTY5MDc0Mjg4N15BMl5BanBnXkFtZTcwOTMyNTUyMQ@@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0671032/?ref_=tt_cl_t9"
itemprop='url'> <span class="itemprop" itemprop="name">Mark Pellegrino</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0028831/?ref_=tt_cl_t9" >Blond Treehorn Thug</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0001780/?ref_=tt_cl_i10"
><img height="44" width="32" alt="Peter Stormare" title="Peter Stormare"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOTUyMDQ0MTEyNF5BMl5BanBnXkFtZTYwNDYxMDkz._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0001780/?ref_=tt_cl_t10"
itemprop='url'> <span class="itemprop" itemprop="name">Peter Stormare</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Nihilist #1, Uli Kunkel /  
            <a href="/character/ch0161425/?ref_=tt_cl_t10" >'Karl Hungus'</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0281359/?ref_=tt_cl_i11"
><img height="44" width="32" alt="Flea" title="Flea"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjEzMDU5NjAzM15BMl5BanBnXkFtZTcwOTk2ODMwMg@@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0281359/?ref_=tt_cl_t11"
itemprop='url'> <span class="itemprop" itemprop="name">Flea</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Nihilist #2, Kieffer 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0901024/?ref_=tt_cl_i12"
><img height="44" width="32" alt="Torsten Voges" title="Torsten Voges"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjAxNDEwODc4OV5BMl5BanBnXkFtZTcwMDY0OTg5OA@@._V1_UY44_CR6,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0901024/?ref_=tt_cl_t12"
itemprop='url'> <span class="itemprop" itemprop="name">Torsten Voges</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Nihilist #3, Franz 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0319541/?ref_=tt_cl_i13"
><img height="44" width="32" alt="Jimmie Dale Gilmore" title="Jimmie Dale Gilmore"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png" class="" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0319541/?ref_=tt_cl_t13"
itemprop='url'> <span class="itemprop" itemprop="name">Jimmie Dale Gilmore</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003529/?ref_=tt_cl_t13" >Smokey</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0444940/?ref_=tt_cl_i14"
><img height="44" width="32" alt="Jack Kehler" title="Jack Kehler"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTM1Mzg4OTk2MV5BMl5BanBnXkFtZTYwMDI0NjEz._V1_UY44_CR14,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0444940/?ref_=tt_cl_t14"
itemprop='url'> <span class="itemprop" itemprop="name">Jack Kehler</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Marty 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0001806/?ref_=tt_cl_i15"
><img height="44" width="32" alt="John Turturro" title="John Turturro"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNzYwNjgwMjMxMF5BMl5BanBnXkFtZTcwNjUwOTc3NQ@@._V1_UY44_CR2,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0001806/?ref_=tt_cl_t15"
itemprop='url'> <span class="itemprop" itemprop="name">John Turturro</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0003522/?ref_=tt_cl_t15" >Jesus Quintana</a> 
                  
              </div>
          </td>
      </tr>
        </table>
        <div class="see-more">
            <a href="fullcredits?ref_=tt_cl_sm#cast"
>See full cast</a>&nbsp;&raquo;
        </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleCastWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleCastWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleCastWidget", {wb: 1});
    }
</script>



    
    
    

	
	<!-- no content received for slot: maindetails_center_ad -->
	


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleStorylineWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleStorylineWidget_started');
    }
  </script>
    <div class = "article" id="titleStoryLine">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_stry"
rel="login">Edit</a>
    </span>
    
        <h2>Storyline</h2>
        
        <div class="inline canwrap" itemprop="description">
            <p>
When "The Dude" Lebowski is mistaken for a millionaire Lebowski, two thugs urinate on his rug to coerce him into paying a debt he knows nothing about. While attempting to gain recompense for the ruined rug from his wealthy counterpart, he accepts a one-time job with high pay-off. He enlists the help of his bowling buddy, Walter, a gun-toting Jewish-convert with anger issues. Deception leads to more trouble, and it soon seems that everyone from porn empire tycoons to nihilists want something from The Dude.                <em class="nobr">Written by
<a href="/search/title?plot_author=J.%20Lake&view=simple&sort=alpha&ref_=tt_stry_pl"
>J. Lake</a></em>            </p>
        </div>
        
        <span class="see-more inline"> 
                <a href="/title/tt0118715/plotsummary?ref_=tt_stry_pl"
>Plot Summary</a>
    <span>|</span>
        <a href="/title/tt0118715/synopsis?ref_=tt_stry_pl"
>Plot Synopsis</a>
    </span>
        <hr />
        <div class="see-more inline canwrap" itemprop="keywords">
            <h4 class="inline">Plot Keywords:</h4>
<a href="/keyword/rug?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">rug</span></a>
                        <span>|</span>
<a href="/keyword/nihilism?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">nihilism</span></a>
                        <span>|</span>
<a href="/keyword/white-russian?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">white russian</span></a>
                        <span>|</span>
<a href="/keyword/death?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">death</span></a>
                        <span>|</span>
<a href="/keyword/drug?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">drug</span></a>
            <span>|</span>&nbsp;<nobr><a href="/title/tt0118715/keywords?ref_=tt_stry_kw"
>See All (313)</a>&nbsp;&raquo;</nobr>

        </div>      
        <hr />
        <div class="txt-block">
            <h4 class="inline">Taglines:</h4>
Her life was in their hands. Now her toe is in the mail.                <span class="see-more inline">
<a href="/title/tt0118715/taglines?ref_=tt_stry_tg"
> See more</a>&nbsp;&raquo;
                </span>
        </div>
        <hr />
        <div class="see-more inline canwrap" itemprop="genre">
            <h4 class="inline">Genres:</h4>
<a href="/genre/Comedy?ref_=tt_stry_gnr"
> Comedy</a>&nbsp;<span>|</span>
<a href="/genre/Crime?ref_=tt_stry_gnr"
> Crime</a>
        </div>      
        
             <hr/>
    
    <div class="txt-block">
            <h4 class="inline">Certificate:</h4>
            <span itemprop="contentRating">12</span>
<span class="ghost">|</span>            <span class="see-more inline">
<a href="/title/tt0118715/parentalguide?ref_=tt_stry_pg#certification"
> See all certifications</a>&nbsp;&raquo;
            </span>
    </div>
    <div class="txt-block">
        <h4 class="inline">Parents Guide:</h4>
        <span class="see-more inline" itemprop="audience" itemscope itemtype="http://schema.org/Audience">
<a href="/title/tt0118715/parentalguide?ref_=tt_stry_pg"
itemprop='url'> View content advisory</a>&nbsp;&raquo;
        </span>
    </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleStorylineWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleStorylineWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleStorylineWidget", {wb: 1});
    }
</script>


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleDetailsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDetailsWidget_started');
    }
  </script>
    
    <div class = "article" id="titleDetails">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_dt_dt"
rel="login">Edit</a>
    </span>
        <h2>Details</h2>
  
    <div class="txt-block">
    <h4 class="inline">Country:</h4>
        <a href="/search/title?country_of_origin=us&ref_=tt_dt_dt"
itemprop='url'>USA</a>
              <span class="ghost">|</span>
        <a href="/search/title?country_of_origin=gb&ref_=tt_dt_dt"
itemprop='url'>UK</a>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Language:</h4>
        <a href="/search/title?title_type=feature&primary_language=en&sort=moviemeter,asc&ref_=tt_dt_dt"
itemprop='url'>English</a>
            <span class="ghost">|</span>
        <a href="/search/title?title_type=feature&primary_language=de&sort=moviemeter,asc&ref_=tt_dt_dt"
itemprop='url'>German</a>
            <span class="ghost">|</span>
        <a href="/search/title?title_type=feature&primary_language=he&sort=moviemeter,asc&ref_=tt_dt_dt"
itemprop='url'>Hebrew</a>
            <span class="ghost">|</span>
        <a href="/search/title?title_type=feature&primary_language=es&sort=moviemeter,asc&ref_=tt_dt_dt"
itemprop='url'>Spanish</a>
    </div>
  
    
    <div class="txt-block">
    <h4 class="inline">Release Date:</h4> 14 May 1998 (Netherlands)
    <span class="see-more inline">
      <a href="releaseinfo?ref_=tt_dt_dt"
itemprop='url'>See more</a>&nbsp;&raquo;
    </span>
    </div>
  
      <div class="txt-block">
      <h4 class="inline">Also Known As:</h4> Big Lebowski
      <span class="see-more inline">
        <a href="releaseinfo?ref_=tt_dt_dt#akas"
itemprop='url'>See more</a>&nbsp;&raquo;
      </span>
      </div>
  
    <div class="txt-block">
    <h4 class="inline">Filming Locations:</h4> 
    <a href="/search/title?locations=10231%20Charing%20Cross%20Road,%20Beverly%20Hills,%20California,%20USA&ref_=tt_dt_dt"
itemprop='url'>10231 Charing Cross Road, Beverly Hills, California, USA</a>
      <span class="see-more inline">
        <a href="locations?ref_=tt_dt_dt"
itemprop='url'>See more</a>&nbsp;&raquo;
      </span>
    </div>
  
    <hr /> 
    <h3 class="subheading">Box Office</h3>
  
      <div class="txt-block">
      <h4 class="inline">Budget:</h4>        $15,000,000        

      <span class="attribute">(estimated)</span>
      </div>
  
    <div class="txt-block">
    <h4 class="inline">Opening Weekend:</h4>         $5,533,844        

      (USA)
      <span class="attribute">(6 March 1998)</span>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Gross:</h4>        $17,439,163        

      <span class="attribute">(USA)</span>
      <span class="attribute">(29 May 1998)</span>
    </div>
  
  <span class="see-more inline">
    <a href="business?ref_=tt_dt_bus"
itemprop='url'>See more</a>&nbsp;&raquo;
  </span>  
  <hr /> 
  <h3 class="subheading">Company Credits</h3>
    <div class="txt-block">
    <h4 class="inline">Production Co:</h4>
        <span itemprop="creator" itemscope itemtype="http://schema.org/Organization">
<a href="/company/co0030612?ref_=tt_dt_co"
itemprop='url'><span class="itemprop" itemprop="name">Polygram Filmed Entertainment</span></a></span>,        <span itemprop="creator" itemscope itemtype="http://schema.org/Organization">
<a href="/company/co0057311?ref_=tt_dt_co"
itemprop='url'><span class="itemprop" itemprop="name">Working Title Films</span></a></span>      <span class="see-more inline">
        <a href="companycredits?ref_=tt_dt_co"
itemprop='url'>See more</a>&nbsp;&raquo;
      </span>
    </div>
  <div class="txt-block"> 
  Show detailed
<a href="http://pro.imdb.com/title/tt0118715/companycredits?rf=cons_tt_cocred_tt&ref_=cons_tt_cocred_tt"
itemprop='url'>company contact information</a>
  on 
  <a href="http://pro.imdb.com/signup/index.html?rf=cons_tt_cocred_spl&ref_=cons_tt_cocred_spl"
itemprop='url'>IMDbPro</a>&nbsp;&raquo;
  </div>
  

  <hr />
  <h3 class="subheading">Technical Specs</h3>
  
    <div class="txt-block">
      <h4 class="inline">Runtime:</h4> 
        <time itemprop="duration" datetime="PT117M">117 min</time>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Sound Mix:</h4>
        <a href="/search/title?sound_mixes=dts&ref_=tt_dt_spec"
itemprop='url'>DTS</a>
<span class="ghost">|</span>        <a href="/search/title?sound_mixes=dolby_digital&ref_=tt_dt_spec"
itemprop='url'>Dolby Digital</a>
<span class="ghost">|</span>        <a href="/search/title?sound_mixes=sdds&ref_=tt_dt_spec"
itemprop='url'>SDDS</a>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Color:</h4>
        <a href="/search/title?colors=color&ref_=tt_dt_spec"
itemprop='url'>Color</a>
(Technicolor)    </div>
  
    <div class="txt-block">
    <h4 class="inline">Aspect Ratio:</h4> 1.85 : 1
    </div>
  
  See <a href="technical?ref_=tt_dt_spec"
itemprop='url'>full technical specs</a>&nbsp;&raquo;
    </div>

  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDetailsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleDetailsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleDetailsWidget", {wb: 1});
    }
</script>


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleDidYouKnowWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDidYouKnowWidget_started');
    }
  </script>
    <div id="titleDidYouKnow" class="article">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_trv_trv"
rel="login">Edit</a>
    </span>
        <h2>Did You Know?</h2>
    <div id="trivia" class="txt-block">
        <h4>Trivia</h4>
After having been cast in the film, <a href="/name/nm0000313?ref_=tt_trv_trv">Jeff Bridges</a>, no stranger to working on films that would have constant script rewrites, called <a href="/name/nm0000422?ref_=tt_trv_trv">John Goodman</a> to ask when they'd get the rewrites. Goodman, a longtime collaborator of the Coens, told Bridges that this film was Coen territory and they didn't rewrite their own material.        <a href="trivia?ref_=tt_trv_trv"
class="nobr" >See more</a>  &raquo;
    </div>
                <hr />
     <div id="goofs"  class="txt-block">
        <h4>Goofs</h4>
When Walter is smashing the red car with the crowbar, the other man runs out shouting at him, but his lips don&#39;t actually move.        <a href="trivia?tab=gf&ref_=tt_trv_gf"
class="nobr" >See more</a>  &raquo;
    </div>   
                <hr />
    <div id="quotes" class="text-block">
        <h4>Quotes</h4>
[<span class="fine">first lines</span>]
<br /><a href="/name/nm0000385/?ref_=tt_trv_qu"
><span class="character">The Stranger</span></a>:
[<span class="fine">voiceover</span>]
Way out west there was this fella... fella I wanna tell ya about. Fella by the name of Jeff Lebowski. At least that was the handle his loving parents gave him, but he never had much use for it himself. Mr. Lebowski, he called himself "The Dude". Now, "Dude" - that's a name no one would self-apply where I come from. But then there was a lot about the Dude that didn't make a whole lot of sense. And a lot about where he lived, likewise. But then again, maybe that's why I ...
<br />                
        <a href="trivia?tab=qt&ref_=tt_trv_qu"
class="nobr" >See more</a> &raquo;
    </div>
                <hr />
     <div id="crazyCredits"  class="txt-block">
        <h4>Crazy Credits</h4>
Big Associate Editor.... Big Dave Diliberto        <a href="trivia?tab=cz&ref_=tt_trv_cc"
class="nobr" >See more</a>  &raquo;
    </div>   
                <hr />
    <div id="connections" class="text-block">
        <h4>Connections</h4>
        Referenced in <a href="/title/tt0366635?ref_=tt_trv_cnn">Jedna ruka netlesk&aacute;</a>&nbsp;(2003)


        <a href="trivia?tab=mc&ref_=tt_trv_cnn"
class="nobr" >See more</a> &raquo;
    </div>
                <hr />
    <div id="soundtracks" class="text-block">
        <h4>Soundtracks</h4>
Standing on the Corner <br />
Written by <a href="/name/nm0004230/">Frank Loesser</a> <br />
Performed by <a href="/name/nm0001509/">Dean Martin</a> <br />
Published by Frank Music Corp. (ASCAP) <br />
Courtesy of Capitol Records <br />
Under license from EMI-Capitol Music Special Markets <br />        <a href="soundtrack?ref_=tt_trv_snd"
class="nobr" >See more</a> &raquo;
    </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDidYouKnowWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleDidYouKnowWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleDidYouKnowWidget", {wb: 1});
    }
</script>


    
    
    


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleFAQWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleFAQWidget_started');
    }
  </script>
    
    <div class="article" id="titleFAQ">
        <h2>Frequently Asked Questions</h2>
        
            <div class="faq" >
                    <div class="odd">
                    <b>Q:</b>
<a href="/title/tt0118715/faq?ref_=tt_faq_1#.2.1.28"
> Is "The Big Lebowski" based on a book?</a>
                    </div>
                    <div class="even">
                    <b>Q:</b>
<a href="/title/tt0118715/faq?ref_=tt_faq_2#.2.1.32"
> To whom was the line "Life does not stop and start at your convenience..." directed?</a>
                    </div>
                    <div class="odd">
                    <b>Q:</b>
<a href="/title/tt0118715/faq?ref_=tt_faq_3#.2.1.31"
> What's that song that is heard throughout the movie?</a>
                    </div>
            </div>
        
            <span class="see-more inline" >        
                <a href="/title/tt0118715/faq?ref_=tt_faq_sm"
class="nobr" >See more</a>
                <span class="spoilers">(Spoiler Alert!)</span></span>&nbsp;&raquo;
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleFAQWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleFAQWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleFAQWidget", {wb: 1});
    }
</script>


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleUserReviewsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleUserReviewsWidget_started');
    }
  </script>
    <div class="article" id="titleUserReviewsTeaser">
        <h2>User Reviews</h2>
        <div class="user-comments">
                <span itemprop="review" itemscope itemtype="http://schema.org/Review">  
                    <strong itemprop="name">That Rug Really Tied the Room Together</strong>
                    <span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                        <meta itemprop="worstRating" content = "1" />
                        <meta itemprop="ratingValue" content="0" />
                        <meta itemprop="bestRating" content="10" />
                    </span>
                    <div class="comment-meta">
                        13 December 2004 | by <a href="/user/ur4391982/?ref_=tt_urv"
><span itemprop="author">arron panigall</span></a>
                        <meta itemprop="datePublished" content="2004-12-13" />
                              (pittsburgh, pennsylvania)
                        &ndash; <a href="/user/ur4391982/comments?ref_=tt_urv"
>See all my reviews</a>
                    </div>
                    <div>
                        <p itemprop="reviewBody">Acting is one of the most key elements to success or failure of a film. Some film types can survive without superb acting. These motion pictures can entertain the viewer with special effects or intense action scenes. A film based on heavy dialog and back-story can not survive with out excellent actors. One such movie that meets the dialog-based criterion is The Big Lebowski. The film follows Jeff 'The Dude' Lebowski (Jeff Bridges) and his two close friends through a not so normal chain of events. The story is augmented by the supporting characters Walter (John Goodman) and Donny (Steve Buscemi). Written by Joel and Ethan Coen, the creative forces behind Fargo, the intriguing story succeeds because of the actors' impeccable skill. <br /><br />As with many other films by the Coen brothers The Big Lebowski is an odd array of out of the ordinary characters slapped right in the middle of an improbable situation. The Dude is an unlikely hero living in the city of Los Angeles who becomes embroiled in a botched kidnapping. This is not the average kidnapper comedy that has been seen a thousand times before. The Coen brothers take a fresh look at an old tired subject. The story they have created is intriguing and entertaining, but the true entertainment comes from the unique characters. Walter, played by John Goodman, is a Vietnam veteran who seems to have some parts of post traumatic stress syndrome. Donny, another one of The Dude's close friends, is a quiet unassuming character who often interjects into conversation, but no one pays close attention to what he says.<br /><br />As well as these characters are written, they would not be as effective had they been played by other actors. This effectiveness of acting can be seen in the opening scene at the bowling alley where the supporting characters are first introduced. This scene is comprised of Donny, Walter, and The Dude sitting at their lane in the bowling alley discussing the attack on The Dude by some hired thugs (7min 25 sec). The Dude is approaching the situation in his usual lackadaisical way. Jeff Bridges conveys The Dude's overall demeanor in his laid back, sauntering, walk. Although being laid back, Bridges is direct in his speaking showing that The Dude is not the average confused old stoner. Bridges facial expressions during this scene show The Dude is distressed about the loss of his rug which 'tied the room together.'<br /><br />Donny seems to be an outside observer in this scene and throughout much of the film. Buscemi conveys his character's attention during discussion by following the flow of the conversation with his head. He looks from The Dude to Walter and from Walter to The Dude depending on who is talking. He may seem to be paying attention, but his asking of simple questions dispels this assumption. Another technique Buscemi uses is while he is observing the conversation he furrows his brow as if in deep thought and contemplation. This look of concentration is juxtaposed with the look of confused happiness, an empty smile, Buscemi uses when Donny makes a point in the conversation. These techniques which are introduced by Bridges and Buscemi early in the film are used throughout the entire picture. <br /><br />Although Bridges and Buscemi do an excellent job of introducing their characters traits to the viewer, Goodman superbly shows his character's inner traits. Throughout the conversation it is apparent due to dialog that Walter is becoming upset. Goodman conveys this anger with facial expressions and body movement. In the early part of the conversation Goodman puts on a stone face to show that Walter is firmly set in his position. The Dude begins to agitate Walter as the conversation continues. Goodman shows this agitation by furrowing his brow, leaning forward while talking, and turning progressively redder. As Goodman continues, his speaking becomes more staccato and flustered. When The Dude refers to one of the attackers as 'the china man,' Walter continues on his tirade momentarily then quietly addresses the non politically correct nature of The Dude's comment. Changing from this aggravated manner of speaking to a more politically correct and lower tone shows that Walter has some sudden mood swings and a short fuse, as he returns to his tirade quickly. <br /><br />This scene exemplifies the acting skills of John Goodman, Jeff Bridges, and Steve Buscemi. The characters in this story have been given interesting and entertaining dialog by the writers, but it is up to the actors to make the characters exude a certain feeling or trait. In each of their roles the three main actors add a level of feeling to the characters that is lacking from many of the offerings of the dark comedy genre. Goodman's portrayal of Walter as the 'know it all' with a short fuse is downright hilarious. Jeff Bridges steps out of his usually serious persona to portray a character as laid back as they come, 'quite possibly the laziest in Los Angeles county.' Steve Buscemi is as entertaining as ever. His depiction of Donny, the character to rarely speak, adds depth to an otherwise bland side character. After viewing this film one can see why actors who can actually practice their craft are worth their weight in gold.</p>
                    </div>
                </span>
                <hr />
                <div class="yn" id="ynd_977423">
                    171 of 315 people found this review helpful.&nbsp;
                    Was this review helpful to you?
                    <button class="btn small" value="Yes" name="ynb_977423_yes" onclick="CS.TMD.user_review_vote(977423, 'tt0118715', 'yes');" >Yes</button>
                    <button class="btn small" value="No" name="ynb_977423_no" onclick="CS.TMD.user_review_vote(977423, 'tt0118715', 'no');" >No</button>
                </div>
            <div class="see-more">
                
                <a href="/title/tt0118715/reviews-enter?ref_=tt_urv"
rel="login">Review this title</a>
                <span>|</span>
                    <a href="/title/tt0118715/reviews?ref_=tt_urv"
>See all 1,060 user reviews</a>&nbsp;&raquo;
            </div>
        </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleUserReviewsWidget_finished');
    }
  </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleUserReviewsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleUserReviewsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleUserReviewsWidget", {wb: 1});
    }
</script>


    
    
    


    
    
    

  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleContributeWidget_started');
    }
  </script>
    <div class="article contribute">
        <div class="rightcornerlink">
<a href="/help/?adding/&ref_=tt_cn_hlp"
>Getting Started</a>
            <span>|</span>
<a href="/czone/?ref_=tt_cn_cz"
>Contributor Zone</a>&nbsp;&raquo;</div>
        <h2>Contribute to This Page</h2>

                <div class="button-box">
                    <form method="get" action="https://contribute.imdb.com/updates">
                        <input type="hidden" name="ref_" value="tt_cn_edt" />
                        <input type="hidden" name="edit" value="legacy/title/tt0118715/" />
                            <button class="btn primary large" rel="login" type="submit">Edit page</button>
                    </form>
                </div>
        

    

        <div class="button-box">
<a href="/title/tt0118715/reviews-enter?ref_=tt_cn_urv"
class="btn large" rel="login">Write review</a>          
        </div>
    
    
        <div class="form-box">
            <form method="post" action="/character/create?ref_=tt_cn_ch" accept-charset="ISO-8859-1">
                <input type="hidden" value="tt0118715" name="title">
                <div class="form-txt">Create a character page for:</div>
                <select id="character_select" name="name" data-tconst="tt0118715">
                        <option value="Woo, Treehorn Thug">Woo, Treehorn Thug</option>
                        <option value="Nihilist #1, Uli Kunkel">Nihilist #1, Uli Kunkel</option>
                        <option value="Nihilist #2, Kieffer">Nihilist #2, Kieffer</option>
                        <option value="Nihilist #3, Franz">Nihilist #3, Franz</option>
                        <option value="Marty">Marty</option>
                     <option disabled="disabled">-----------</option>
                     <option value="...">more...</option>
                </select>
                <button class="btn small">Create &raquo;</button>
                <a href="/help/show_leaf?createchar&ref_=tt_cn_chhlp"
class="btn small" >?</a>
            </form>
        </div>
    </div>

  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleContributeWidget_finished');
    }
  </script>


    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    </div>
    <br class="clear"/>
</div> 


    
    
    

    
    
    

                   <br class="clear" />
                </div>






    <div id="footer" class="ft">

            <div id="rvi-div">
                <div class="recently-viewed">&nbsp;</div>
                <br class="clear">
            </div>

	
	<!-- no content received for slot: bottom_ad -->
	

        <div class="container footer-grid-wrapper">
            <div class="row footer-row">
                <div class="col outside">
    <h3>IMDb Everywhere</h3>
    <div class="app-links">
    <a href="/offsite/?page-action=ft_app_apple&token=BCYtzH0jc_rpiVijse_NboMUC42i8tV-A7x-YyZP_st7vkUnLYdW4wKXiMcIj19JrTzR0feAhRXw%0D%0Ab5ja8f6njm7jj9U-exme52uMgQh8-Kjpp29Q88kMCF-Lt3FIehzHPKUO9gx5sUo3uNK8Lq5jRv1k%0D%0AKVfI9JiE1mWKJwRL1xSlYbP6AQ-NidTfVyF60BfCybWZ0ptTxr9DJUMmhEFsGt28a7StkUuCWAMu%0D%0Ax3uVxskw8ug%0D%0A&ref_=ft_app_apple"
title="Get the IMDb App on the Apple App Store" target="_blank" itemprop='url'> <span class="desktop-sprite appstore-apple" ></span>
</a>
    <a href="/offsite/?page-action=ft_app_google&token=BCYrKI-uhoWRamA9Pa1RO3gUKfL52pyW0pM171jeb_2ZKm6aHNshTOWAzA4xtUl7DV7ChxfEee0p%0D%0AT31-SH5xFi3X6N50PUkhAjO9QRR4u5yHVToC5lpAj04LEYh1AZ5vPo6IUE6rBsMQ2cVRlFqKiBD6%0D%0Akj0vT_brX02e3a_hAWx7sfr7HQoMRWYUOPObLYNMpuytDiJIm2dSDrrthrzoegivMFmI30OYJeNa%0D%0A86hC2Ck6fwI%0D%0A&ref_=ft_app_google"
title="Get the IMDb app on Google Play" target="_blank" itemprop='url'> <span class="desktop-sprite appstore-google" ></span>
</a>
    <a href="/offsite/?page-action=ft_app_amazon&token=BCYqoEVlF0MKgl-KgsJvajo3vRRWqRxR8diFYwZMHmfOtOaFMfwUUFIy6cqLBY-xk9q-g-kSUrA1%0D%0AjbVKNwQ6xWL3ue5TrEE2U6QXC9GUxZemTwnusz2WSq4yoOKWe1xdpiAIsVUSmtYA9tvnfTsbR8Vd%0D%0A0nosBNHthjIyjqrlTIxKz9uhFyiu10lwyz7L2rT0RCLwI4PgstOU_fJjLlQkFbpEhu8QwUJtyW6e%0D%0AhcOnR2o40NFUmTRMuUZ4vvbPuZyC9WJsHCu_atdkEaDCXfVczhUXN-UJbHaMG0mVj9f0juZV0wd3%0D%0AUzQWye2S5KHOVVXYNQLb4c6PS9l5cvIzx4P2sTjoetf2hZJqgC2aXGBgp8rntd3w7TthbDNTY6Yz%0D%0AF_8nYakYO9wzNhH-avn_WogpF7WoM1_UkisgYSlKIcle4FTuSkA%0D%0A&ref_=ft_app_amazon"
title="Get the IMDb app on Amazon Appstore for Android" target="_blank" itemprop='url'> <span class="desktop-sprite appstore-amazon" ></span>
</a>
    </div>

    <p>Find showtimes, watch trailers, browse photos, track your Watchlist and rate your favorite movies and TV shows on your phone or tablet!</p>

    <a href="http://m.imdb.com?ref_=ft_mdot"
class="touchlink" >IMDb Mobile site</a>
                </div>
                <div class="col center">
  <div class="link-bar icon-link-bar">
    <h3>
      Follow IMDb on
      <div>

    <a href="/offsite/?page-action=fol_fb&token=BCYlb-XermHL9JQYkjnprQsyCCn-d0QhyLfZmc889Pot6ImX28N9HOmdMCMuwpn8Q7i-aJsWUC_V%0D%0A98JOQacGxHU0LLTDyr7tm02uCSkI1FxyY0hBg0PnSyzCpgUg1Wy9PMwEoiMRpqh1R0ZmdmRk5nij%0D%0AiCl46XWUln1BxIDiPM3Gxzk3SA6-py-IXgm_60hRckJWzcEYGDEimwlaFAbIPhuGMQ%0D%0A&ref_=tt_ft_fol_fb"
title="Follow IMDb on Facebook" target="_blank" itemprop='url'> <span class="desktop-sprite follow-facebook" ></span>
</a>
    <a href="/offsite/?page-action=fol_tw&token=BCYgH3Z3LNZVFpYyafMTVP7NOC7tQVav1zRagUAYq4xiqmtFrnSunp5pr4d4S4NbxZond8BoWIb2%0D%0Akmf2Qc9OwhlPRjo7Q7egVDleAv7paimIgj4GmAZ8Tc1ybyzqJ1_owpYSWPcdvPjKLof2xJiX1moQ%0D%0ARUqoaVhCuN3ohdBUZNZq8V1ArtZh3CcRLDYi6104SX28Nh3VaFQImmhXZMQIJUmILw%0D%0A&ref_=tt_ft_fol_tw"
title="Follow IMDb on Twitter" target="_blank" itemprop='url'> <span class="desktop-sprite follow-twitter" ></span>
</a>
    <a href="/offsite/?page-action=fol_inst&token=BCYr448BbAF9UbIvh-8h4_V30kBEY_b7N0v4nHPhjUVdR8UStBBxEy25QNurCxJDBWZz0W1JKYi5%0D%0AiNGhK86936CI_IABleXTjJCqK5QI6EbezMA60LgeSjHPoVCC9wxBOakoPCCTNMs-kOptn7R4xpLq%0D%0AaGcyZIgwazYb6nfLygBuz8-Mr3DggnRJrEXy7vas9C5wlexkp-L6ps-M2-iVFiyg6A%0D%0A&ref_=tt_ft_fol_inst"
title="Follow IMDb on Instagram" target="_blank" itemprop='url'> <span class="desktop-sprite follow-instagram" ></span>
</a>
      </div>
    </h3>
  </div>
                </div>
                <div class="col outside">
    <div class="row">
        <div class="col col-4">
            <ul class="unstyled">
                <li><a href="/?ref_=ft_hm"
>Home</a></li>
                <li><a href="/chart/top?ref_=ft_250"
>Top Rated Movies</a></li>
                <li><a href="/chart/?ref_=ft_cht"
>Box Office</a></li>
                <li><a href="/sections/tv/?ref_=ft_tv"
>TV</a></li>
                <li><a href="/movies-coming-soon/?ref_=ft_cs"
>Coming Soon</a></li>
                <li><a href="/a2z?ref_=ft_si"
>Site Index</a></li>
                <li><a href="/search?ref_=ft_sr"
>Search</a></li>
                <li><a href="/movies-in-theaters/?ref_=ft_inth"
>In Theaters</a></li>
            </ul>
        </div>
        <div class="col col-4">
            <ul class="unstyled">
                <li><a href="/helpdesk/contact?ref_=ft_con"
>Contact Us</a></li>
                <li>        <a href="https://secure.imdb.com/register-imdb/form-v2?ref_=ft_reg"
>Register</a>
</li>
                <li><a href="/news/?ref_=ft_nw"
>News</a></li>
                <li class="spacer"></li>
                <li><a href="/pressroom/?ref_=ft_pr"
>Press Room</a></li>
                <li><a href="/advertising/?ref_=ft_ad"
>Advertising</a></li>
                <li><a href="/jobs?ref_=ft_jb"
>Jobs</a></li>
            </ul>
        </div>
        <div class="col col-4">
            <ul class="unstyled">
                <li><a href="http://pro.imdb.com/signup/index.html?rf=cons_ft_hm&ref_=cons_ft_hm"
>IMDbPro</a></li>
                <li>    <a href="/offsite/?page-action=ft-mojo&token=BCYkDnaqk_Jwz8CLOkEdbB58nRsk7Mc4nPkScU8Cyirnm7fF1BPVLfudTLgbCsBY6ld4w4qoYj6k%0D%0AQFC6EG-baNZLNEEyBeYjh88pvSB1tUWWzKVK4iTI4Vjmnlu5kh5mcjnffyLLNUBXyC0mKJNbi65M%0D%0A_vKbcY8YKRNUcw7zQTS2aa4po35-qxCpxzznUigsRN497Yjo4Q105p3QeDhj9jgnJw%0D%0A&ref_=ft_bom"
itemprop='url'>Box Office Mojo</a>
</li>
                <li>    <a href="/offsite/?page-action=ft-wab&token=BCYm6agNmyEVetSR6BkiUzaijsLOiyMSy4uvoK3jb5yJZlQ0B7UbkzINFSEfZPrJ6K7Cfhp6D0gu%0D%0ACxI1evDqZvFWt8jF7G2wry-0rsmkkE9ZGMIwaejMhYx9dX5r6QamElWn2wIyT3t_wziznyJEqKwr%0D%0APrDM9hfGkeAA2wHXR8rIU_lT505q3HIY3mjfbPH4gMDz5b0L-FUMV2p-5B-wKe3Mrg%0D%0A&ref_=ft_wab"
itemprop='url'>Withoutabox</a>
</li>
                <li class="spacer"></li>
                <li><a href="/help/show_article?conditions&ref_=ft_cou"
>Conditions of Use</a></li>
                <li><a href="/privacy?ref_=ft_pvc"
>Privacy Policy</a></li>
                <li>    <a href="/offsite/?page-action=ft-iba&token=BCYveZTUAB-WGYfHVKcoIkqJPBol_E3IJuhmLZOi4MNEpvA_z7AlnDQTuJKEqqG1ytPkavWTcwO_%0D%0A0R3YK6PVlPTVuo3aURVP8lKPRUTl83jYNlIXsqQOcBjm8MYhozJhLILE05YPv1hZdal37XlysJYj%0D%0AYMJseuyc0m_ckwHgtKnyJMeY1A-Ogvyo4BxbdAiLbB28ZIOEKLlfaDng67hQ1u3QLK06l0BWiZoS%0D%0ALe7JfggQHJK8mvLzhM5dqPrYscEPvseD%0D%0A&ref_=ft_iba"
itemprop='url'>Interest-Based Ads</a>
</li>
                <li class="spacer"></li>
            </ul>
        </div>
    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="ft-copy float-right">
                <a
href="/help/show_article?conditions"
>Copyright &copy;</a> 1990-2017
                <a
href="/help/"
>IMDb.com, Inc.</a>
            </div>
            <div>
                An <span id="amazon_logo" class="footer_logo" align="middle">Amazon.com</span> company.
            </div>
        </div>



    <table class="footer" id="amazon-affiliates">
        <tr>
            <td colspan="8">
                Amazon Affiliates
            </td>
        </tr>
        <tr>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-aiv&token=BCYgeuair8QaqOulSDTzf9Y91MYUPQr9SQfZB7hTUvF8s8yyoUZxKM7-Po-woag4Ws5ddug28nfD%0D%0AC7SgHBtfZ8bH5UOWGvAEjoAnGZUhO2Dhr6FomACnb8qrZjb33vB6--AKhz5eDS71c9CKWvXv2WkY%0D%0AEIv6Tg3UdFzodQOa5phLlzQ95VOiSZ5QNLYikzFDQkA6oLeUmyjpgqhVkYoGo49Vd7hswzvXSAUO%0D%0AUxwBI81sUmE%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon Video</span><br>
                <span class="amazon-affiliate-site-desc">Watch Movies &<br>TV Online</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-piv&token=BCYkqWyMT69HpdMeFqgCgO9pA8J-splPK3ZlLmfxB-MoNPCM_Mts2bFbVMbGCSpTfDULseU-BKmh%0D%0AWObLGzKwY-3LIvbSjB2cLDYhYv6dG2WXie9FNgBNLWxeIz3D55RjAY5fKUKv5h5dHohHJ_BF66tT%0D%0AtaytKUCN0O45-ku5f3R91_222f3UDAkJ3T8tzJmSl_Kl-win8Apaoaz-kfP3Sl74NXa5YFNoPNNI%0D%0AL_jBC2zsHFA%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Prime Video</span><br>
                <span class="amazon-affiliate-site-desc">Unlimited Streaming<br>of Movies & TV</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-de&token=BCYtRvO6fHCcLwh4lbmNVJ83MQlgl_r5CTy9kAWkXOOgnFt2AqLE9eo8b-LIJpoFRbvmtlVycheK%0D%0AI1e9GUVZo36mP8gw0kP3JSVCiDgTU46qS3XtLssTp7X1yrRVQPNTQlnjtyR1PI5C_PExquHAZs0X%0D%0Af1vKc_LeBrvH_SN_Y5lsHxIoMH4GEBJkDFfiwAqLSDDKkrwIqSS-_k9hfVT0EJukdJ3pbzhugDOJ%0D%0AD16ZeHaj6D0%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon Germany</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movies on<br>DVD & Blu-ray</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-it&token=BCYqL52WaEVqqsMt7kozvcyFKQf419aADw0ZfLndM6iQZ7Hx95k1auSue7uZfqmQ4iACBbgTgRV0%0D%0A4mUgOYPtZZo-t1N4tsfxBIls0DRiuUa436etkAGDyOt5xRdXQxa6cmFAmrdCZuVwx3AbKXBmTzla%0D%0AiJtHcFAtwUC70tFba70mYFamnAzNoqlsjND9CNP77EB-7O9XCSJbSphQER9H0CjWCFoKlUD0aXlW%0D%0AD_D-BZ0Vuek%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon Italy</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movies on<br>DVD & Blu-ray</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-fr&token=BCYnNMRdSPZWFzBVN4MQr7GXfwUQZyB63K1WK5J4oFgPA-QO58rcp0RkxZLqYefNMzdm_q9TDz6i%0D%0AhgGcolDH4VYQ6D1Yhtv7Xop_apreQgtxP0DQ1x9XkGzDAyHg9BUbIuNJoE9-d0oipGB44shwyVIc%0D%0AV-tmGXF8Vsesn3xlnYZMmMknr49uZcoTSFtVuVAhgEnH6Y3h5FCoZmyyHSf9Udx0wtNI8SgCIGv0%0D%0A-ZFwCo2heQA%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon France</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movies on<br>DVD & Blu-ray</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-in&token=BCYlPVDMdWdpflSCEdYbJ2Rwfi9gecP97-nUjPzvx_EIikST7jHEj2NE1eIoxEogQ-S6sN8QlPfP%0D%0AvAdzboWioL-xtOi3I_dD9BBYsVV8zY3kE42kP4W58J824x9jaxGul40BBIyh-cdZkw36vqKAZCfb%0D%0A9Jz2kOjb52le0FEf0xYJyaqRhGSP5vRhRRSzarJ-jOYcFzqUDMullz7m-VD_tUddK-qlAlM7oqbp%0D%0ASyQ9EZp046TrMg14JqHDP9t0N58CssWU%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon India</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movie and<br>TV Show DVDs</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-dpr&token=BCYuGrKM5TsvEgFRHv98QOHR7eCy7I9St9v2JpijJm6KhQseZEeJ_vnzuuIl-eFXEQ7BaiRMZje_%0D%0AhWew4jjisSi4X2xekXLfq573tjHpfVJhfa9lUf3b0JRfLmJuSuPkCW2XTqxS5NlNyRM08XVjGcig%0D%0ANgMRCz8VX6y00mCQT7TDcQ8%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">DPReview</span><br>
                <span class="amazon-affiliate-site-desc">Digital<br>Photography</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-aud&token=BCYrRyn6XNP53qWNnIVA7mR09ZjugjFtaKdEi8tS3DkqFbmzJOzMhddXl4bbtfSCrgEPtvSmMfgn%0D%0A6Ff0nDG6teHhm9nw5vy7zGaaxRkBZ419Bi0bBu5Yeew2Npk_uDc2OLH7K8a1ZfR9gDSpHFyHxfLR%0D%0A5IAwcWEKfNzFvI2QkoIMJFo%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Audible</span><br>
                <span class="amazon-affiliate-site-desc">Download<br>Audio Books</span>
            </a>
        </div>
    </td>
        </tr>
    </table>
      </div>
            </div>
        </div>



<script type="text/javascript" src="http://ia.media-imdb.com/images/G/01/imdb/js/collections/common-2411119445._CB508084084_.js"></script>
<script type="text/javascript" src="http://ia.media-imdb.com/images/G/01/imdb/js/collections/title-1235417354._CB519274346_.js"></script>

<script type="text/javascript" id="login">
(function(){
    var readyTimeout = setInterval(function() {
        if (window.jQuery && window.imdb && window.imdb.login_lightbox) {
            clearTimeout(readyTimeout);
            window.imdb.login_lightbox();
        }
    }, 100);
})();
</script>

        <script type="text/javascript">
        function jQueryOnReady(remaining_count) {
            if (window.jQuery && typeof $.fn.watchlistRibbon !== 'undefined') {
                jQuery(
                             function() {
           var isAdvertisingThemed = !!(window.custom && window.custom.full_page && window.custom.full_page.theme),
               url = "http://www.facebook.com/widgets/like.php?width=280&show_faces=1&layout=standard&href=http%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0118715%2F&colorscheme=light",
               like = document.getElementById('iframe_like');

           if (!isAdvertisingThemed && like) {
              like.src = url;
              like.onload = function () { 
                  if (uex) { uex('ld', 'facebook_like_iframe', {wb: 1}); }
              };
           } else if (isAdvertisingThemed) {
              $('.social_networking_like').closest('.aux-content-widget-2').hide();
           }
        }

                );
                jQuery(
                             function() {
            var facebookTheme = (window.custom && window.custom.full_page &&
                    window.custom.full_page.theme) ?
                window.custom.full_page.theme : "light",
            url = "//www.facebook.com/plugins/likebox.php?href=facebook.com%2Fimdb&width=300&height=190&connections=4&header=false&stream=false&colorscheme=" + facebookTheme,
            like = document.getElementById('facebookIframe'),
            twitterIframe = document.getElementById('twitterIframe');
            if (like) {
                like.src = url;
            }
            if (twitterIframe) {
                twitterIframe.src = "http://i.media-imdb.com/images/social/twitter.html?10#imdb";
            }
         }

                );
            } else if (remaining_count > 0) {
                setTimeout(function() { jQueryOnReady(remaining_count-1) }, 100);
            }
        }
        jQueryOnReady(50);
        </script>


<div id="servertime" time="224"/>



<script>
    if (typeof uet == 'function') {
      uet("be");
    }
</script>

    </body>
</html>


    http_version: 
  recorded_at: Sun, 06 Aug 2017 18:20:45 GMT
recorded_with: VCR 3.0.3
