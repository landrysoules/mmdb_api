---
http_interactions:
- request:
    method: get
    uri: http://www.imdb.com/title/tt0462499/?ref_=nv_sr_1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 03 Sep 2017 16:27:31 GMT
      Server:
      - Server
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self' imdb.com *.imdb.com *.media-imdb.com withoutabox.com
        *.withoutabox.com amazon.com *.amazon.com amazon.co.uk *.amazon.co.uk amazon.de
        *.amazon.de translate.google.com images.google.com www.google.com www.google.co.uk
        search.aol.com bing.com www.bing.com
      Content-Type:
      - text/html;charset=UTF-8
      Content-Language:
      - en-US
      Vary:
      - Accept-Encoding,User-Agent
      Set-Cookie:
      - session-id-time=2135176051; Domain=.imdb.com; Expires=Fri, 21-Sep-2085 19:41:39
        GMT; Path=/
      - session-id=000-0000000-0000000; Domain=.imdb.com; Expires=Fri, 21-Sep-2085
        19:41:39 GMT; Path=/
      - uu=BCYkJVwWKQ_2W43fE-dlNXVlV9tsWNtZ-fD1HlCmJTFkX7Vox90E7MZE-4kV5LnmyMUEcWQi3R8A%0D%0AmwCeIPCrm1lyTYbvRqcuiofe9Euu0Bb0CjGtdl0sK41RRi6svz9IDx-42pEfTz5PSOHvn11Ks-qj%0D%0Af4swl4N_spN9t7tTIwyhYVbWdtYex0mpjwz3I3H-BnG6cDGuhiQ_EmPiD0BpinacE95YDCRQVolF%0D%0AvA9kA9y6HEMGxM31EbWX5sVJPbCjmJnEmEeYBG6g8FDCxsLKaam_Rg%0D%0A;
        Domain=.imdb.com; Expires=Fri, 21-Sep-2085 19:41:39 GMT; Path=/
      P3p:
      - policyref="http://i.imdb.com/images/p3p.xml",CP="CAO DSP LAW CUR ADM IVAo
        IVDo CONo OTPo OUR DELi PUBi OTRi BUS PHY ONL UNI PUR FIN COM NAV INT DEM
        CNT STA HEA PRE LOC GOV OTC "
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        








<!DOCTYPE html>
<html
xmlns:og="http://ogp.me/ns#"
xmlns:fb="http://www.facebook.com/2008/fbml">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="apple-itunes-app" content="app-id=342792525, app-argument=imdb:///title/tt0462499?src=mdot">
            <script type="text/javascript">var ue_t0=window.ue_t0||+new Date();</script>
            <script type="text/javascript">
                var ue_mid = "A1EVAM02EL8SFB"; 
                var ue_sn = "www.imdb.com";  
                var ue_furl = "fls-na.amazon.com";
                var ue_sid = "000-0000000-0000000";
                var ue_id = "1ATJB87EE7Q0GE3PBM4A";
                (function(e){var c=e;var a=c.ue||{};a.main_scope="mainscopecsm";a.q=[];a.t0=c.ue_t0||+new Date();a.d=g;function g(h){return +new Date()-(h?0:a.t0)}function d(h){return function(){a.q.push({n:h,a:arguments,t:a.d()})}}function b(m,l,h,j,i){var k={m:m,f:l,l:h,c:""+j,err:i,fromOnError:1,args:arguments};c.ueLogError(k);return false}b.skipTrace=1;e.onerror=b;function f(){c.uex("ld")}if(e.addEventListener){e.addEventListener("load",f,false)}else{if(e.attachEvent){e.attachEvent("onload",f)}}a.tag=d("tag");a.log=d("log");a.reset=d("rst");c.ue_csm=c;c.ue=a;c.ueLogError=d("err");c.ues=d("ues");c.uet=d("uet");c.uex=d("uex");c.uet("ue")})(window);(function(e,d){var a=e.ue||{};function c(g){if(!g){return}var f=d.head||d.getElementsByTagName("head")[0]||d.documentElement,h=d.createElement("script");h.async="async";h.src=g;f.insertBefore(h,f.firstChild)}function b(){var k=e.ue_cdn||"z-ecx.images-amazon.com",g=e.ue_cdns||"images-na.ssl-images-amazon.com",j="/images/G/01/csminstrumentation/",h=e.ue_file||"ue-full-11e51f253e8ad9d145f4ed644b40f692._V1_.js",f,i;if(h.indexOf("NSTRUMENTATION_FIL")>=0){return}if("ue_https" in e){f=e.ue_https}else{f=e.location&&e.location.protocol=="https:"?1:0}i=f?"https://":"http://";i+=f?g:k;i+=j;i+=h;c(i)}if(!e.ue_inline){if(a.loadUEFull){a.loadUEFull()}else{b()}}a.uels=c;e.ue=a})(window,document);
                if (!('CS' in window)) { window.CS = {}; }
                    window.CS.loginLocation = "https://www.imdb.com/registration/signin?u=%2Ftitle%2Ftt0462499%2F%3Fref_%3Dnv_sr_1";
            </script>
 

        
        <script type="text/javascript">var IMDbTimer={starttime: new Date().getTime(),pt:'java'};</script>

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadTitle", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_title"] = new Date().getTime(); })(IMDbTimer);</script>
        <title>Rambo (2008) - IMDb</title>
  <script>(function(t){ (t.events = t.events || {})["csm_head_post_title"] = new Date().getTime(); })(IMDbTimer);</script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadTitle", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadTitle", {wb: 1});
    }
</script>
        
            <link rel="canonical" href="http://www.imdb.com/title/tt0462499/" />
            <meta property="og:url" content="http://www.imdb.com/title/tt0462499/" />

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadIcons", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_icon"] = new Date().getTime(); })(IMDbTimer);</script>
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/safari-favicon-517611381._CB522736552_.svg" mask rel="icon" sizes="any">
        <link rel="icon" type="image/ico" href="http://ia.media-imdb.com/images/G/01/imdb/images/favicon-2165806970._CB522736556_.ico" />
        <meta name="theme-color" content="#000000" />
        <link rel="shortcut icon" type="image/x-icon" href="http://ia.media-imdb.com/images/G/01/imdb/images/desktop-favicon-2165806970._CB522736561_.ico" />
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-4151659188._CB522736129_.png" rel="apple-touch-icon"> 
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-76x76-53536248._CB522736233_.png" rel="apple-touch-icon" sizes="76x76"> 
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-120x120-2442878471._CB522736253_.png" rel="apple-touch-icon" sizes="120x120"> 
        <link href="http://ia.media-imdb.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-152x152-1475823641._CB522736557_.png" rel="apple-touch-icon" sizes="152x152">            
        <link rel="search" type="application/opensearchdescription+xml" href="http://ia.media-imdb.com/images/G/01/imdb/images/imdbsearch-3349468880._CB522736605_.xml" title="IMDb" />
  <script>(function(t){ (t.events = t.events || {})["csm_head_post_icon"] = new Date().getTime(); })(IMDbTimer);</script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadIcons", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadIcons", {wb: 1});
    }
</script>
        
        <meta property="pageId" content="tt0462499" />
        <meta property="pageType" content="title" />
        <meta property="subpageType" content="main" />


        <link rel='image_src' href="https://images-na.ssl-images-amazon.com/images/M/MV5BMTI5Mjg1MzM4NF5BMl5BanBnXkFtZTcwNTAyNzUzMw@@._V1_UY1200_CR90,0,630,1200_AL_.jpg">
        <meta property='og:image' content="https://images-na.ssl-images-amazon.com/images/M/MV5BMTI5Mjg1MzM4NF5BMl5BanBnXkFtZTcwNTAyNzUzMw@@._V1_UY1200_CR90,0,630,1200_AL_.jpg" />

        <meta property='og:type' content="video.movie" />
    <meta property='fb:app_id' content='115109575169727' />

    <meta property='og:title' content="Rambo (2008)" />
    <meta property='og:site_name' content='IMDb' />
    <meta name="title" content="Rambo (2008) - IMDb" />
        <meta name="description" content="Directed by Sylvester Stallone.  With Sylvester Stallone, Julie Benz, Matthew Marsden, Graham McTavish. In Thailand, John Rambo joins a group of mercenaries to venture into war-torn Burma, and rescue a group of Christian aid workers who were kidnapped by the ruthless local infantry unit." />
        <meta property="og:description" content="Directed by Sylvester Stallone.  With Sylvester Stallone, Julie Benz, Matthew Marsden, Graham McTavish. In Thailand, John Rambo joins a group of mercenaries to venture into war-torn Burma, and rescue a group of Christian aid workers who were kidnapped by the ruthless local infantry unit." />
        <meta name="keywords" content="Reviews, Showtimes, DVDs, Photos, Message Boards, User Ratings, Synopsis, Trailers, Credits" />
        <meta name="request_id" content="1ATJB87EE7Q0GE3PBM4A" />

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadCSS", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_css"] = new Date().getTime(); })(IMDbTimer);</script>
<!-- h=ics-c42xl-1e-1f373b12.us-east-1 -->

            <link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/collections/title-flat-v2-3883865263._CB517252283_.css" />
        <noscript>
            <link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/wheel/nojs-2827156349._CB522739048_.css">
        </noscript>
  <script>(function(t){ (t.events = t.events || {})["csm_head_post_css"] = new Date().getTime(); })(IMDbTimer);</script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadCSS", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadCSS", {wb: 1});
    }
</script>

<script>
    if (typeof uet == 'function') {
      uet("bb", "LoadJS", {wb: 1});
    }
</script>
  <script>(function(t){ (t.events = t.events || {})["csm_head_pre_ads"] = new Date().getTime(); })(IMDbTimer);</script>
        
        <script  type="text/javascript">
            // ensures js doesn't die if ads service fails.  
            // Note that we need to define the js here, since ad js is being rendered inline after this.
            (function(f) {
                // Fallback javascript, when the ad Service call fails.  
                
                if((window.csm == null || window.generic == null || window.consoleLog == null)) {
                    if (window.console && console.log) {
                        console.log("one or more of window.csm, window.generic or window.consoleLog has been stubbed...");
                    }
                }
                
                window.csm = window.csm || { measure:f, record:f, duration:f, listen:f, metrics:{} };
                window.generic = window.generic || { monitoring: { start_timing: f, stop_timing: f } };
                window.consoleLog = window.consoleLog || f;
            })(function() {});
        </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_head_delivery_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "LoadJS", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "LoadJS", {wb: 1});
    }
</script>
        </head>
    <body id="styleguide-v2" class="fixed">
<script>
    if (typeof uet == 'function') {
      uet("bb");
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_body_delivery_started');
    }
  </script>
        <div id="wrapper">
            <div id="root" class="redesign">
<script>
    if (typeof uet == 'function') {
      uet("ns");
    }
</script>
<div id="nb20" class="navbarSprite">
<div id="supertab">	
	<!-- no content received for slot: top_ad -->
	
</div>
  <div id="navbar" class="navbarSprite">
<noscript>
  <link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/site/consumer-navbar-no-js-3652782989._CB522736526_.css" />
</noscript>
<!--[if IE]><link rel="stylesheet" type="text/css" href="http://ia.media-imdb.com/images/G/01/imdb/css/site/consumer-navbar-ie-2133976414._CB522736582_.css"><![endif]-->
<span id="home_img_holder">
<a href="/?ref_=nv_home"
title="Home" class="navbarSprite" id="home_img" ></a>  <span class="alt_logo">
    <a href="/?ref_=nv_home"
title="Home" >IMDb</a>
  </span>
</span>
<form
 method="get"
 action="/find"
 class="nav-searchbar-inner"
 id="navbar-form"

>
  <div id="nb_search">
    <noscript><div id="more_if_no_javascript"><a href="/search/">More</a></div></noscript>
    <button id="navbar-submit-button" class="primary btn" type="submit"><div class="magnifyingglass navbarSprite"></div></button>
    <input type="hidden" name="ref_" value="nv_sr_fn" />
    <input type="text" autocomplete="off" value="" name="q" id="navbar-query" placeholder="Find Movies, TV shows, Celebrities and more...">
    <div class="quicksearch_dropdown_wrapper">
      <select name="s" id="quicksearch" class="quicksearch_dropdown navbarSprite"
              onchange="jumpMenu(this); suggestionsearch_dropdown_choice(this);">
        <option value="all" >All</option>
        <option value="tt" >Titles</option>
        <option value="ep" >TV Episodes</option>
        <option value="nm" >Names</option>
        <option value="co" >Companies</option>
        <option value="kw" >Keywords</option>
        <option value="ch" >Characters</option>
        <option value="qu" >Quotes</option>
        <option value="bi" >Bios</option>
        <option value="pl" >Plots</option>
      </select>
    </div>
    <div id="navbar-suggestionsearch"></div>
  </div>
</form>
<div id="megaMenu">
    <ul id="consumer_main_nav" class="main_nav">
        <li class="spacer"></li>
        <li class="css_nav_item" id="navTitleMenu">
            <p class="navCategory">
                <a href="/movies-in-theaters/?ref_=nv_tp_inth_1"
>Movies</a>,
                <a href="/chart/toptv/?ref_=nv_tp_tv250_2"
>TV</a><br />
                & <a href="/showtimes/?ref_=nv_tp_sh_3"
>Showtimes</a></p>
            <span class="downArrow"></span>
            <div id="navMenu1" class="sub_nav">
                <div id="titleAd"></div>
                <div class="subNavListContainer">
                    <h5>MOVIES</h5>
                    <ul>
                        <li><a href="/movies-in-theaters/?ref_=nv_mv_inth_1"
>In Theaters</a></li>
                        <li><a href="/showtimes/?ref_=nv_mv_sh_2"
>Showtimes & Tickets</a></li>
                        <li><a href="/trailers/?ref_=nv_mv_tr_3"
>Latest Trailers</a></li>
                        <li><a href="/movies-coming-soon/?ref_=nv_mv_cs_4"
>Coming Soon</a></li>
                        <li><a href="/calendar/?ref_=nv_mv_cal_5"
>Release Calendar</a></li>
                        <li><a href="/chart/top?ref_=nv_mv_250_6"
>Top Rated Movies</a></li>
                        <li><a href="/india/top-rated-indian-movies?ref_=nv_mv_250_in_7"
>Top Rated Indian Movies</a></li>
                        <li><a href="/chart/moviemeter?ref_=nv_mv_mpm_8"
>Most Popular Movies</a></li>
                    </ul>
                    <h5>CHARTS & TRENDS</h5>
                    <ul>
                        <li><a href="/chart/?ref_=nv_ch_cht_1"
>Box Office</a></li>
                        <li><a href="/search/title?count=100&groups=oscar_best_picture_winners&sort=year,desc&ref_=nv_ch_osc_2"
>Oscar Winners</a></li>
                        <li><a href="/genre/?ref_=nv_ch_gr_3"
>Most Popular by Genre</a></li>
                    </ul>
                </div>
                <div class="subNavListContainer">
                    <h5>TV & VIDEO</h5>
                    <ul>
                        <li><a href="/tv/?ref_=nv_tvv_tv_1"
>IMDb TV</a></li>
                        <li><a href="/tvgrid/?ref_=nv_tvv_ls_2"
>On Tonight</a></li>
                        <li><a href="/chart/toptv/?ref_=nv_tvv_250_3"
>Top Rated TV Shows</a></li>
                        <li><a href="/chart/tvmeter?ref_=nv_tvv_mptv_4"
>Most Popular TV Shows</a></li>
                        <li><a href="/sections/dvd/?ref_=nv_tvv_dvd_5"
>DVD & Blu-Ray</a></li>
                    </ul>
                    <h5>SPECIAL FEATURES</h5>
                    <ul>
                        <li><a href="/amazon-originals/?ref_=nv_sf_ams_1"
>Amazon Originals</a></li>
                        <li><a href="/streaming/?ref_=nv_sf_st_2"
>Streaming</a></li>
                        <li><a href="/scary-good/?ref_=nv_sf_scg_3"
>Scary Good</a></li>
                        <li><a href="/imdbpicks/?ref_=nv_sf_picks_4"
>IMDb Picks</a></li>
                        <li><a href="/superheroes/?ref_=nv_sf_supr_5"
>Superheroes</a></li>
                    </ul>
                </div>
            </div>
        </li>
        <li class="spacer"></li>
        <li class="css_nav_item" id="navNameMenu">
            <p class="navCategory">
                <a href="/search/name?gender=male,female&ref_=nv_tp_cel_1"
>Celebs</a>,
                <a href="/awards-central/?ref_=nv_tp_awrd_2"
>Events</a><br />
                & <a href="/gallery/rg784964352?ref_=nv_tp_ph_3"
>Photos</a></p>
            <span class="downArrow"></span>
            <div id="navMenu2" class="sub_nav">
                <div id="nameAd"></div>
                <div class="subNavListContainer">
                    <h5>CELEBS</h5>
                    <ul>
                            <li><a href="/search/name?birth_monthday=09-03&refine=birth_monthday&ref_=nv_cel_brn_1"
>Born Today</a></li>
                        <li><a href="/news/celebrity?ref_=nv_cel_nw_2"
>Celebrity News</a></li>
                        <li><a href="/search/name?gender=male,female&ref_=nv_cel_m_3"
>Most Popular Celebs</a></li>
                    </ul>
                    <h5>PHOTOS</h5>
                    <ul>
                        <li><a href="/gallery/rg1859820288?ref_=nv_ph_ls_1"
>Latest Stills</a></li>
                        <li><a href="/gallery/rg1624939264?ref_=nv_ph_lp_2"
>Latest Posters</a></li>
                        <li><a href="/gallery/rg1641716480?ref_=nv_ph_lv_3"
>Photos We Love</a></li>
                    </ul>
                </div>
                <div class="subNavListContainer">
                    <h5>EVENTS</h5>
                    <ul>
                        <li><a href="/awards-central/?ref_=nv_ev_awrd_1"
>Awards Central</a></li>
                        <li><a href="/festival-central/?ref_=nv_ev_fc_2"
>Festival Central</a></li>
                        <li><a href="/oscars/?ref_=nv_ev_acd_3"
>Oscars</a></li>
                        <li><a href="/golden-globes/?ref_=nv_ev_gg_4"
>Golden Globes</a></li>
                        <li><a href="/sundance/?ref_=nv_ev_sun_5"
>Sundance</a></li>
                        <li><a href="/cannes/?ref_=nv_ev_can_6"
>Cannes</a></li>
                        <li><a href="/comic-con/?ref_=nv_ev_comic_7"
>Comic-Con</a></li>
                        <li><a href="/emmys/?ref_=nv_ev_rte_8"
>Emmy Awards</a></li>
                        <li><a href="/venice/?ref_=nv_ev_venice_9"
>Venice Film Festival</a></li>
                        <li><a href="/toronto/?ref_=nv_ev_tor_10"
>Toronto Film Festival</a></li>
                        <li><a href="/festival-central/tribeca?ref_=nv_ev_trb_11"
>Tribeca</a></li>
                        <li><a href="/event/all/?ref_=nv_ev_all_12"
>All Events</a></li>
                    </ul>
                </div>
            </div>
        </li>
        <li class="spacer"></li>
        <li class="css_nav_item" id="navNewsMenu">
            <p class="navCategory">
                <a href="/news/top?ref_=nv_tp_nw_1"
>News</a> &<br />
                <a href="/czone/?ref_=nv_cm_cz_2"
>Community</a>
            </p>
            <span class="downArrow"></span>
            <div id="navMenu3" class="sub_nav">
                <div id="latestHeadlines">
                    <div class="subNavListContainer">
                        <h5>LATEST HEADLINES</h5>
    <ul>
                <li itemprop="headline">
<a href="/news/ni61471529/?ref_=nv_nw_tn_1"
> Walter Becker, Steely Dan Guitarist, Dies at 67
</a><br />
                        <span class="time">2 hours ago</span>
                </li>
                <li itemprop="headline">
<a href="/news/ni61471075/?ref_=nv_nw_tn_2"
> Claire Foy Crowned Britannia Artist of the Year
</a><br />
                        <span class="time">8 hours ago</span>
                </li>
                <li itemprop="headline">
<a href="/news/ni61470787/?ref_=nv_nw_tn_3"
> From ‘Lady Bird’ to ‘Battle of the Sexes,’ Best Actress Race Takes Shape in Telluride
</a><br />
                        <span class="time">12 hours ago</span>
                </li>
    </ul>
                    </div>
                </div>
                <div class="subNavListContainer">
                    <h5>NEWS</h5>
                    <ul>
                        <li><a href="/news/top?ref_=nv_nw_tp_1"
>Top News</a></li>
                        <li><a href="/news/movie?ref_=nv_nw_mv_2"
>Movie News</a></li>
                        <li><a href="/news/tv?ref_=nv_nw_tv_3"
>TV News</a></li>
                        <li><a href="/news/celebrity?ref_=nv_nw_cel_4"
>Celebrity News</a></li>
                        <li><a href="/news/indie?ref_=nv_nw_ind_5"
>Indie News</a></li>
                    </ul>
                    <h5>COMMUNITY</h5>
                    <ul>
                        <li><a href="/czone/?ref_=nv_cm_cz_2"
>Contributor Zone</a></li>
                        <li><a href="/poll/?ref_=nv_cm_pl_3"
>Polls</a></li>
                    </ul>
                </div>
            </div>
        </li>
        <li class="spacer"></li>
        <li class="css_nav_item" id="navWatchlistMenu">
<p class="navCategory singleLine watchlist">
    <a href="/list/watchlist?ref_=nv_wl_all_0"
>Watchlist</a>
</p>
<span class="downArrow"></span>
<div id="navMenu4" class="sub_nav">
    <h5>
            YOUR WATCHLIST
    </h5>
    <ul id="navWatchlist">
    </ul>
    <script>
    if (!('imdb' in window)) { window.imdb = {}; }
    window.imdb.watchlistTeaserData = [
                {
                        href : "/list/watchlist",
                src : "http://ia.media-imdb.com/images/G/01/imdb/images/navbar/watchlist_slot1_logged_out-1670046337._CB522736556_.jpg"
                },
                {
                    href : "/search/title?count=100&title_type=feature,tv_series",
                src : "http://ia.media-imdb.com/images/G/01/imdb/images/navbar/watchlist_slot2_popular-4090757197._CB522736562_.jpg"
                },
                {
                    href : "/chart/top",
                src : "http://ia.media-imdb.com/images/G/01/imdb/images/navbar/watchlist_slot3_top250-575799966._CB522736596_.jpg"
                }
    ];
    </script>
</div>
        </li>
        <li class="spacer"></li>
    </ul>
<script>
if (!('imdb' in window)) { window.imdb = {}; }
window.imdb.navbarAdSlots = {
    titleAd : {
    },
    nameAd : {
    }
}
</script>
</div>
<div id="nb_extra">
    <ul id="nb_extra_nav" class="main_nav">
        <li class="css_nav_item" id="navProMenu">
            <p class="navCategory">
<a href="http://pro.imdb.com/signup/index.html?rf=cons_nb_hm&ref_=cons_nb_hm"
> <img alt="IMDbPro Menu" src="http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_logo_nb-3000473826._CB530713470_.png" />
</a>            </p>
            <span class="downArrow"></span>
            <div id="navMenuPro" class="imdb-pro-ad sub_nav">
<a href="http://pro.imdb.com/signup/index.html?rf=cons_nb_hm&ref_=cons_nb_hm"
class="imdp-pro-ad__link" > <div id="proAd" class="imdb-pro-ad__image">
<img alt="Go to IMDbPro" height="180" width="174"
src="http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_menu_user-4091932618._CB530713443_.png"
srcset="http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_menu_user-4091932618._CB530713443_.png 1x,
http://ia.media-imdb.com/images/G/01/imdb/images/navbar/imdbpro_menu_user_2x-2074318947._CB530713441_.png 2x" />
</div>
<section class="imdb-pro-ad__content">
<h1 class="imdb-pro-ad__title">The leading information resource for the entertainment industry</h1>
<p class="imdb-pro-ad__line">Find industry contacts &amp; talent representation</p>
<p class="imdb-pro-ad__line">Manage your photos, credits, &amp; more</p>
<p class="imdb-pro-ad__line">Showcase yourself on IMDb &amp; Amazon</p>
<span role="button" class="imdb-pro-ad__button">Go to IMDbPro</a>
</section>
</a>            </div>
        </li>
        <li class="spacer"><span class="ghost">|</span></li>
        <li>
            <a href="/help/?ref_=nb_hlp"
>Help</a>
        </li>
        <li class="social">

    <a href="/offsite/?page-action=fol_fb&token=BCYrdgobMNxkkwnaaq-Ower1j3OdzHgDnjUEHXyPSAVaE3CfPJ3GZ-EBpbRxWE-cpenJmbF_nHqN%0D%0AZ2Iqzst9QcqwWFewOewHvnUap-D1s_OnZskIS8LuGdv_eHw6arom453ToOBhkbeibdsQ9MltQyxk%0D%0AxJgdnUaEb5LORQUm3tH_2jCITZv4_86t7j9ctj71RcRatyl2t18jp6ygRvDxrDHZNg%0D%0A&ref_=tt_nv_fol_fb"
title="Follow IMDb on Facebook" target="_blank" itemprop='url'> <span class="desktop-sprite follow-facebook" ></span>
</a>
    <a href="/offsite/?page-action=fol_tw&token=BCYh4UZd629P1HVN5KHRgKx5p0TE0Cw5cZ1_x8LEvPXi2Q8h2QQCJ_CDkT1f_Em_Khc-EWJ7V44n%0D%0Am6pAx4bTY95K8iJtCODt0s2eTbdTC-667zOV2Hu6_5ky90cuGO_Tsb99bqi-bklplUCCeGTP_2X-%0D%0AbFG4tDk8t0wRomxr64k5RCQ6vLLi5coLmYZ86j3Lxy9nKOjgzSHUAxLQObRCmQeuOg%0D%0A&ref_=tt_nv_fol_tw"
title="Follow IMDb on Twitter" target="_blank" itemprop='url'> <span class="desktop-sprite follow-twitter" ></span>
</a>
    <a href="/offsite/?page-action=fol_inst&token=BCYrwlinHnWnEUHY0vzNJt8CqojUnlAN0KBEH1XMUptYjm8gjNvqUgyM87NHpd8LUsgsjwM6_AFR%0D%0AWdZ7LcQNlpph915vZPw49_Ed7O0lTIKU6IxI60iFcfqlLh69mgWEgmPHn3_aQBC8H3ObA3KoudIo%0D%0AGe5D6lqSuI9mw3N5WmLrsR_sMtvLufNY39Zc9I5htVeNMr1S10thZhBGU88fL_c5ew%0D%0A&ref_=tt_nv_fol_inst"
title="Follow IMDb on Instagram" target="_blank" itemprop='url'> <span class="desktop-sprite follow-instagram" ></span>
</a>
        </li>
    </ul>
</div>
<div id="nb_personal">
    <ul id="consumer_user_nav" class="main_nav">

            <li class="css_nav_menu no_arrow" id="navUserMenu">
            <p class="navCategory singleLine">
                <a id="facebook-signin-link" href="https://graph.facebook.com/v2.8/oauth/authorize?client_id=127059960673829&scope=email%2Cuser_about_me%2Cuser_birthday&state=eyI0OWU2YyI6ImRhMjkiLCJ1IjoiaHR0cHM6Ly93d3cuaW1kYi5jb20vP3JlZl89bnZfZmJfbGdpbiIsIm1hbnVhbExpbmsiOiJmYWxzZSJ9&redirect_uri=https%3A%2F%2Fwww.imdb.com%2Fregistration%2Ffacebookhandler%2F" class="signin-button">
                <span class="facebook-logo"></span>
                <span class="signin-facebook-text">Sign in with Facebook</span></a>
                <a href="https://www.imdb.com/registration/signin?u=/title/tt0462499/%3Fref_%3Dnv_sr_1&ref_=nv_usr_lgin_1"
rel="login" class="signin-other-options-text" id="nblogin" >Other Sign in options</a>
                </p>
        </li>
    </ul>
</div>
  </div>
</div>
	
	<!-- no content received for slot: navstrip -->
	
	
	<!-- no content received for slot: injected_navstrip -->
	
<script>
    if (typeof uet == 'function') {
      uet("ne");
    }
</script>
              

                    <div id="pagecontent" class="pagecontent" itemscope itemtype="http://schema.org/Movie">
	
	<!-- no content received for slot: injected_billboard -->
	


    
    
    

    
    
    

    
    
    

	
	<!-- no content received for slot: navboard -->
	


    
    
    

    
    
    

<div id="content-2-wide" class="flatland">
    <div id="main_top" class="main">

    
    
    

    
    
    


    
    
    

            <div class="title-overview">


  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleOverviewWidget_started');
    }
  </script>
        <div id="title-overview-widget" class="heroic-overview">
            <div class="message_box">
                <div id="star-ratings-widget-error" class="hidden error">
                    <h2>There was an error trying to load your rating for this title.</h2>
                    <p>Some parts of this page won't work property. Please reload or try later.</p>
                </div>
            </div>
            <div class="vital">                
      <div id="quicklinksBar" class="subnav">
  <div id="quicklinksMainSection">
         <a href="/title/tt0462499/fullcredits?ref_=tt_ql_1"
class="quicklink" >FULL CAST AND CREW</a> <span class="ghost">|</span>
         <a href="/title/tt0462499/trivia?ref_=tt_ql_2"
class="quicklink" >TRIVIA</a> <span class="ghost">|</span>
         <a href="/title/tt0462499/reviews?ref_=tt_ql_3"
class="quicklink" >USER REVIEWS</a> <span class="ghost">|</span>
      <a href="http://pro.imdb.com/title/tt0462499?rf=cons_tt_contact&ref_=cons_tt_contact"
class="quicklink" >IMDbPro</a>
        <span class="ghost">|</span>
        <span class="show_more quicklink">
            MORE<span class="titleOverviewSprite quicklinksArrowUp"></span>
        </span>
        <span class="show_less quicklink" style="display:none">
           LESS<span class="titleOverviewSprite quicklinksArrowDown"></span>
        </span>
  </div>

    <span class="titleOverviewShareButton launch-share-popover quicklink">SHARE</span>
    <div id="share-popover">
        <a class="close-popover" href="#">X</a>
        <h4>Share</h4>
        
    
    
    <a onclick="window.open(&quot;http://www.facebook.com/sharer.php?u=http%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0462499%2F%3Fref_%3Dext_shr_fb_tt&quot;, 'newWindow', 'width=626,height=436'); return false;"
       href="http://www.facebook.com/sharer.php?u=http%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0462499%2F%3Fref_%3Dext_shr_fb_tt"
       title="Share on Facebook"
       class="facebook"
       target="_blank"><div class="option facebook">
                            <span class="titlePageSprite share_facebook"></span>
                            <div>Facebook</div>
                        </div></a>
    
    
    <a onclick="window.open(&quot;http://twitter.com/intent/tweet?text=Rambo%20(6%20February%202008%20(Belgium))%20-%20imdb.com%2Ftitle%2Ftt0462499%2F%3Fref_%3Dext_shr_tw_tt&quot;, 'newWindow', 'width=815,height=436'); return false;"
       href="http://twitter.com/intent/tweet?text=Rambo%20(6%20February%202008%20(Belgium))%20-%20imdb.com%2Ftitle%2Ftt0462499%2F%3Fref_%3Dext_shr_tw_tt"
       title="Share on Twitter"
       class="twitter"
       target="_blank"><div class="option twitter">
                            <span class="titlePageSprite share_twitter"></span>
                            <div>Twitter</div>
                        </div></a>
    <a href="mailto:?subject=IMDb%3A%20Rambo%20(6%20February%202008%20(Belgium))&body=IMDb%3A%20Rambo%20(6%20February%202008%20(Belgium))%0AIn%20Thailand%2C%20John%20Rambo%20joins%20a%20group%20of%20mercenaries%20to%20venture%20into%20war-torn%20Burma%2C%20and%20rescue%20a%20group%20of%20Christian%20aid%20workers%20who%20were%20kidnapped%20by%20the%20ruthless%20local%20infantry%20unit.%0Ahttp%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0462499%2F%3Fref_%3Dext_shr_eml_tt" 
       title="Share by e-mail"
       class=""><div class='option email'>
                    <span class='titlePageSprite share_email'></span>
                    <div>E-mail</div>
                    </div></a>
     <a href="#" class="open-checkin-popover">
        <div class="option checkin">
            <span class="titlePageSprite share_checkin"></span>
            <div>Check in</div>
        </div>
     </a>     
            
    </div>
    
        <div id="share-checkin">
<div class="add_to_checkins" data-const="tt0462499" data-lcn="title-maindetails">
<span class="btn2_wrapper"><a onclick='' class="btn2 large btn2_text_on disabled checkins_action_btn"><span class="btn2_glyph">0</span><span class="btn2_text">Check in</span></a></span>    <div class="popup checkin-dialog">
        <a class="small disabled close btn">X</a>
        <span class="beta">Beta</span>
        <span class="title">I'm Watching This!</span>
        <div class="body">
            <div class="info">Keep track of everything you watch; tell your friends.
            </div>
            <div class="small message_box">
                <div class="hidden error"><h2>Error</h2> Please try again!</div>
                <div class="hidden success"><h2>Added to Your Check-Ins.</h2> <a href="/list/checkins">View</a></div>
            </div>
            <textarea data-msg="Enter a comment..."></textarea>
            <div class="share">
                <button class="large primary btn"><span>Check in</span></button>
<!--
                    Check-ins are more fun when<br>
                    you <a href="/register/sharing">enable Facebook sharing</a>!
-->
            </div>
        </div>
    </div>
    <input type="hidden" name="49e6c" value="da29">
</div>
        </div>

   <div class="quicklinkSection" id="full_subnav" style="display:none">           
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">DETAILS</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/fullcredits?ref_=tt_ql_dt_1"
class="quicklink" >Full Cast and Crew</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/releaseinfo?ref_=tt_ql_dt_2"
class="quicklink" >Release Dates</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/officialsites?ref_=tt_ql_dt_3"
class="quicklink" >Official Sites</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/business?ref_=tt_ql_dt_4"
class="quicklink" >Box Office/Business</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/companycredits?ref_=tt_ql_dt_5"
class="quicklink" >Company Credits</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/locations?ref_=tt_ql_dt_6"
class="quicklink" >Filming Locations</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/technical?ref_=tt_ql_dt_7"
class="quicklink" >Technical Specs</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/literature?ref_=tt_ql_dt_8"
class="quicklink" >Literature</a>                </div>
    </div>
               </div>
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">STORYLINE</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/taglines?ref_=tt_ql_stry_1"
class="quicklink" >Taglines</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/plotsummary?ref_=tt_ql_stry_2"
class="quicklink" >Plot Summary</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/synopsis?ref_=tt_ql_stry_3"
class="quicklink" >Synopsis</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/keywords?ref_=tt_ql_stry_4"
class="quicklink" >Plot Keywords</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/parentalguide?ref_=tt_ql_stry_5"
class="quicklink" >Parents Guide</a>                </div>
    </div>
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">RELATED ITEMS</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/news?ref_=tt_ql_rel_1"
class="quicklink" >NewsDesk</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/externalsites?ref_=tt_ql_rel_2"
class="quicklink" >External Sites</a>                </div>
    </div>
               </div>
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">OPINION</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/awards?ref_=tt_ql_op_1"
class="quicklink" >Awards</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/faq?ref_=tt_ql_op_2"
class="quicklink" >FAQ</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/reviews?ref_=tt_ql_op_3"
class="quicklink" >User Reviews</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/ratings?ref_=tt_ql_op_4"
class="quicklink" >User Ratings</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/externalreviews?ref_=tt_ql_op_5"
class="quicklink" >External Reviews</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/criticreviews?ref_=tt_ql_op_6"
class="quicklink" >Metacritic Reviews</a>                </div>
    </div>
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">PHOTO & VIDEO</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/mediaindex?ref_=tt_ql_pv_1"
class="quicklink" >Photo Gallery</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/videogallery?ref_=tt_ql_pv_2"
class="quicklink" >Trailers and Videos</a>                </div>
    </div>
               </div>
               <div class="quicklinkSectionColumn">
    <div class="quicklinkGroup">
        <div class="quicklinkSectionHeader">DID YOU KNOW?</div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/trivia?ref_=tt_ql_trv_1"
class="quicklink" >Trivia</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/goofs?ref_=tt_ql_trv_2"
class="quicklink" >Goofs</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/crazycredits?ref_=tt_ql_trv_3"
class="quicklink" >Crazy Credits</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/quotes?ref_=tt_ql_trv_4"
class="quicklink" >Quotes</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/alternateversions?ref_=tt_ql_trv_5"
class="quicklink" >Alternate Versions</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/movieconnections?ref_=tt_ql_trv_6"
class="quicklink" >Connections</a>                </div>
                <div class="quicklinkSectionItem">
<a href="/title/tt0462499/soundtrack?ref_=tt_ql_trv_7"
class="quicklink" >Soundtracks</a>                </div>
    </div>
               </div>
   </div>
      </div>  
         
                <div class="title_block">
                    <div class="title_bar_wrapper">

    <div class="ratings_wrapper">
        <div class="imdbRating" itemtype="http://schema.org/AggregateRating" itemscope="" itemprop="aggregateRating">
                <div class="ratingValue">
<strong title="7.0 based on 189,353 user ratings"><span itemprop="ratingValue">7.0</span></strong><span class="grey">/</span><span class="grey" itemprop="bestRating">10</span>                </div>
                <a href="/title/tt0462499/ratings?ref_=tt_ov_rt"
><span class="small" itemprop="ratingCount">189,353</span></a>
                    <div class="hiddenImportant">
                            <span itemprop="reviewCount">720 user</span>
                            <span itemprop="reviewCount">276 critic</span>
                    </div>
        </div>

  <div id="star-rating-widget" class="star-rating-widget" data-tconst="tt0462499" data-rating="0" data-user=""
  data-auth="" data-tracking-tag="title-maindetails" data-rating-share-enabled="false" data-title="Rambo"
  data-rating-next-share-time="2000-01-01T00:00:00.000Z" data-rating-share-treatment="C">
    <div class="star-rating-button">
      <button>
        <span class="star-rating-star no-rating"></span>
            <span class="star-rating-text">Rate This</span>
      </button>
    </div>
  </div>
    </div>
    <div class="titleBar">
        <div class="primary_ribbon">
            <div class="ribbonize" data-tconst="tt0462499" data-caller-name="title"></div>
            <div class="wlb_dropdown_btn" data-tconst="tt0462499" data-size="large" data-caller-name="title" data-type="primary"></div>
            <div class="wlb_dropdown_list" style="display:none"></div>
        </div>

        <div class="title_wrapper">
<h1 itemprop="name" class="">Rambo&nbsp;<span id="titleYear">(<a href="/year/2008/?ref_=tt_ov_inf"
>2008</a>)</span>            </h1>
            <div class="subtext">
                    <meta itemprop="contentRating" content="R">R
<span class="ghost">|</span>                    <time itemprop="duration" datetime="PT92M">
                        1h 32min
                    </time>
<span class="ghost">|</span>
<a href="/genre/Action?ref_=tt_ov_inf"
><span class="itemprop" itemprop="genre">Action</span></a>, 
<a href="/genre/Thriller?ref_=tt_ov_inf"
><span class="itemprop" itemprop="genre">Thriller</span></a>, 
<a href="/genre/War?ref_=tt_ov_inf"
><span class="itemprop" itemprop="genre">War</span></a>
<span class="ghost">|</span>
<a href="/title/tt0462499/releaseinfo?ref_=tt_ov_inf"
title="See more release dates" >6 February 2008 (Belgium)
<meta itemprop="datePublished" content="2008-02-06" />
</a>            </div>
        </div>
    </div>
                    </div>
                </div>



                
            </div>
                <div class="minPosterWithPlotSummaryHeight">
    <div class="poster">
<a href="/title/tt0462499/mediaviewer/rm1973718272?ref_=tt_ov_i"
> <img alt="Rambo Poster" title="Rambo Poster"
src="https://images-na.ssl-images-amazon.com/images/M/MV5BMTI5Mjg1MzM4NF5BMl5BanBnXkFtZTcwNTAyNzUzMw@@._V1_UX182_CR0,0,182,268_AL_.jpg"
itemprop="image" />
</a>    </div>
    <div class="plot_summary_wrapper">
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitlePlotAndCreditSummaryWidget_started');
    }
  </script>
    <div class="plot_summary minPlotHeightWithPoster">
            <div class="summary_text" itemprop="description">
                    In Thailand, John Rambo joins a group of mercenaries to venture into war-torn Burma, and rescue a group of Christian aid workers who were kidnapped by the ruthless local infantry unit.
            </div>
        
    <div class="credit_summary_item">
        <h4 class="inline">Director:</h4>
            <span itemprop="director" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000230?ref_=tt_ov_dr"
itemprop='url'><span class="itemprop" itemprop="name">Sylvester Stallone</span></a>            </span>
    </div>
    <div class="credit_summary_item">
        <h4 class="inline">Writers:</h4>
            <span itemprop="creator" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0599393?ref_=tt_ov_wr"
itemprop='url'><span class="itemprop" itemprop="name">Art Monterastelli</span></a>,             </span>
            <span itemprop="creator" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000230?ref_=tt_ov_wr"
itemprop='url'><span class="itemprop" itemprop="name">Sylvester Stallone</span></a>            </span>
            <span class="ghost">|</span>
<a href="fullcredits?ref_=tt_ov_wr#writers"
>1 more credit</a>&nbsp;&raquo;
    </div>
    <div class="credit_summary_item">
        <h4 class="inline">Stars:</h4>
            <span itemprop="actors" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000230?ref_=tt_ov_st_sm"
itemprop='url'><span class="itemprop" itemprop="name">Sylvester Stallone</span></a>,             </span>
            <span itemprop="actors" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0004748?ref_=tt_ov_st_sm"
itemprop='url'><span class="itemprop" itemprop="name">Julie Benz</span></a>,             </span>
            <span itemprop="actors" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0550452?ref_=tt_ov_st_sm"
itemprop='url'><span class="itemprop" itemprop="name">Matthew Marsden</span></a>            </span>
            <span class="ghost">|</span>
<a href="fullcredits?ref_=tt_ov_st_sm"
>See full cast & crew</a>&nbsp;&raquo;
    </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitlePlotAndCreditSummaryWidget_finished');
    }
  </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleReviewsAndPopularityWidget_started');
    }
  </script>
      <div class="titleReviewBar ">           
    <div class="titleReviewBarItem">
<a href="criticreviews?ref_=tt_ov_rt"
> <div class="metacriticScore score_mixed titleReviewBarSubItem">
<span>46</span>
</div></a>        <div class="titleReviewBarSubItem">
            <div><a href="criticreviews?ref_=tt_ov_rt"
>
Metascore
</a>            </div>
            <div><span class="subText"> 
               From <a href="http://www.metacritic.com"
target='_blank'>metacritic.com</a> 
               </span>
            </div>
        </div>
    </div>
                   <div class="divider"></div>
           
    <div class="titleReviewBarItem titleReviewbarItemBorder">
        <div>
        Reviews
        </div>
        <div>
            <span class="subText">
                   <a href="reviews?ref_=tt_ov_rt"
>720 user</a>                   
                       <span class="ghostText">|</span>
                   <a href="externalreviews?ref_=tt_ov_rt"
>276 critic</a>
             </span>
        </div>
    </div>
                   <div class="divider"></div>

    <div class="titleReviewBarItem">
  <div class="titleOverviewSprite popularityTrendUp"></div>
        <div class="titleReviewBarSubItem">
            <div>
            Popularity
            </div>
            <div>
                <span class="subText">
                    1,639
      (<span class="titleOverviewSprite popularityImageUp"></span> <span class="popularityUpOrFlat">416</span>)
                </span>
            </div>
        </div>                                   
    </div>
      </div>              
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleReviewsAndPopularityWidget_finished');
    }
  </script>
    </div>
                </div>

    
    
    
        </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleOverviewWidget_finished');
    }
  </script>
            </div> 

<script>
    if (typeof uet == 'function') {
      uet("af");
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_atf_main');
    }
  </script>

    </div> 

<script>
    if (typeof uet == 'function') {
      uet("cf");
    }
</script>


    <div id="sidebar">

	
	<!-- no content received for slot: top_rhs -->
	
  <script>
    if ('csm' in window) {
      csm.measure('csm_atf_sidebar');
    }
  </script>


    
    
    

    
    
    




    
    
        <a name="slot_right-3"></a>
        <div class="mini-article">
        
    
        
                                

    
            <script type="text/javascript">if(typeof uet === 'function'){uet('bb','NinjaWidget',{wb:1});}</script>
                                

                    
    
        <span class="ab_widget">
        
    

    <div class="ab_ninja">
<span class="widget_header"> <span class="oneline"> <a href="/imdbpicks/?pf_rd_m=A2FGELUUNOQJNL&pf_rd_p=3227086502&pf_rd_r=1ATJB87EE7Q0GE3PBM4A&pf_rd_s=right-3&pf_rd_t=15021&pf_rd_i=tt0462499&ref_=tt_pks_sept17_rhs_hd" > <h3>IMDb Picks: September</h3> </a> </span> </span> <div class="widget_content no_inline_blurb"> <div class="widget_nested"> <div class="ninja_image_pack"> <div class="ninja_center"> <div class="ninja_image first_image last_image" style="width:307px;height:auto;" > <div style="width:307px;height:auto;margin:0 auto;"> <div class="widget_image"> <div class="image"> <a href="/imdbpicks/?pf_rd_m=A2FGELUUNOQJNL&pf_rd_p=3227086502&pf_rd_r=1ATJB87EE7Q0GE3PBM4A&pf_rd_s=right-3&pf_rd_t=15021&pf_rd_i=tt0462499&ref_=tt_pks_sept17_rhs_i_1" > <img itemprop="image" class="pri_image" src="https://images-na.ssl-images-amazon.com/images/M/MV5BMzkwNDk5ODI0MV5BMl5BanBnXkFtZTgwMTE5NTkxMzI@._CR543,169,903,677_UX614_UY460._SY230_SX307_AL_.jpg" /> </a> </div> </div> </div> </div> </div> </div> </div> </div> <p class="blurb">We're both excited and terrified for the return of Pennywise in Stephen King's <i><a href="/title/tt1396484/?pf_rd_m=A2FGELUUNOQJNL&pf_rd_p=3227086502&pf_rd_r=1ATJB87EE7Q0GE3PBM4A&pf_rd_s=right-3&pf_rd_t=15021&pf_rd_i=tt0462499&ref_=tt_pks_sept17_rhs_lk1">It</a></i>. See which other movies and TV shows we're excited about this month.</p> <p class="seemore"><a href="/imdbpicks/?pf_rd_m=A2FGELUUNOQJNL&pf_rd_p=3227086502&pf_rd_r=1ATJB87EE7Q0GE3PBM4A&pf_rd_s=right-3&pf_rd_t=15021&pf_rd_i=tt0462499&ref_=tt_pks_sept17_rhs_sm" class="position_bottom supplemental" >Visit IMDb Picks</a></p>    </div>
    

                        
        </span>



            <script type="text/javascript">
                if(typeof uex === 'function'){uex('ld','NinjaWidget',{wb:1});}
            </script>
        




        </div>
    

  <div class="aux-content-widget-2"> 
    <div class="social">     
  <script type="text/javascript">if (uet) { uet('bb', 'facebook_like_iframe', {wb: 1}); }</script>
  <div class="social_networking_like">
    <iframe
      id="iframe_like"
      name="fbLikeIFrame_0"
      class="social-iframe"
      scrolling="no"
      frameborder="0"
      allowTransparency="allowTransparency"
      ref="http://www.imdb.com/title/tt0462499/"
      width=280
      height=65></iframe>
  </div>
    </div>
  </div>


    
    
    

    
    
    

    
    
    

	
	<!-- no content received for slot: rhs_cornerstone -->
	


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "RelatedNewsWidgetRHS", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_RelatedNewsWidgetRHS_started');
    }
  </script>

      <div class="mini-article" >
        <h3>Related News</h3>

        
                
                    
                    
                    <div class="news_item odd" >
                        <span itemprop="headline" >
                            <a href="/title/tt0462499/news?ref_=tt_nwr_1#ni61444264"
>10 Boxing Movies to Get You Hyped for Mayweather-McGregor</a>
                        </span>
                        
                        <br /><small>
                                <span itemprop="datePublished">
                                  25 August 2017 5:31 PM, +01:00
                                </span>
                            
                                <span class="ghost">|</span><span itemprop="provider" >
                                        <a href="/news/ns0000254?ref_=tt_nwr_1"
>MovieWeb</a>
                                </span>
                        </small>
                    </div>
                
                    
                    
                    <div class="news_item even" >
                        <span itemprop="headline" >
                            <a href="/title/tt0462499/news?ref_=tt_nwr_2#ni61435918"
>8 Movies You (Probably) Didn't Know Were Based on Books</a>
                        </span>
                        
                        <br /><small>
                                <span itemprop="datePublished">
                                  23 August 2017 2:28 PM, +01:00
                                </span>
                            
                                <span class="ghost">|</span><span itemprop="provider" >
                                        <a href="/news/ns0006063?ref_=tt_nwr_2"
>Cinelinx</a>
                                </span>
                        </small>
                    </div>
                
                    
                    
                    <div class="news_item odd" >
                        <span itemprop="headline" >
                            <a href="/title/tt0462499/news?ref_=tt_nwr_3#ni61393972"
>Chris Pratt talks Making Guardians of the Galaxy Vol. 2</a>
                        </span>
                        
                        <br /><small>
                                <span itemprop="datePublished">
                                  10 August 2017 6:37 PM, +01:00
                                </span>
                            
                                <span class="ghost">|</span><span itemprop="provider" >
                                        <a href="/news/ns0000099?ref_=tt_nwr_3"
>Comicmix.com</a>
                                </span>
                        </small>
                    </div>
       
            <div class="see-more">
                <a href="/title/tt0462499/news?ref_=tt_nwr_sm"
>See all 762 related articles</a>&nbsp;&raquo;
            </div>

      </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_RelatedNewsWidgetRHS_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "RelatedNewsWidgetRHS", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "RelatedNewsWidgetRHS", {wb: 1});
    }
</script>


    
    
    

	
	<!-- no content received for slot: middle_rhs -->
	


    
    
    


    
    
        <a name="slot_right-7"></a>
        <div class="mini-article">
        
    
        
                                

    
            <script type="text/javascript">if(typeof uet === 'function'){uet('bb','ZergnetWidget',{wb:1});}</script>
                                

                    
    
        <span class="ab_widget">
            <div class="ab_zergnet">
<span class="widget_header"> <span class="oneline"> <h3>Around The Web</h3> <span>&nbsp;|&nbsp;</span> <h4>Powered by ZergNet</h4> </span> </span> <div class="widget_content no_inline_blurb"> <div class="widget_nested"> <iframe class="zergnet-frame__sidebar" scrolling="no" seamless src="http://ia.media-imdb.com/images/G/01/imdb/html/zergnet-2975767399._CB522861833_.html?widgetId=47009"></iframe> </div> </div>    </div>

                        
        </span>



            <script type="text/javascript">
                if(typeof uex === 'function'){uex('ld','ZergnetWidget',{wb:1});}
            </script>
        




        </div>
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "RelatedListsWidget", {wb: 1});
    }
</script>
        <div class="mini-article">
            <div id="relatedListsWidget">
                <div class="rightcornerlink">
                    <a href="/list/create?ref_=tt_rls"
>Create a list</a>&nbsp;&raquo;
                </div>
                <h3>User Lists</h3>
                <p>Related lists from IMDb users</p>

    <div class="list-preview even">
        <div class="list-preview-item-narrow">
<a href="/list/ls000932052?ref_=tt_rls_1"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNTM5NWJjNWEtODgwNC00ODM1LWE4NzctMWNlNGNkNjg3NjE0XkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls000932052?ref_=tt_rls_1"
>
Fourquels i've seen
</a></strong>
        </div>
        <div class="list_meta">
            a list of 22 titles
            <br />created 24&nbsp;Jun&nbsp;2011
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview odd">
        <div class="list-preview-item-narrow">
<a href="/list/ls071416645?ref_=tt_rls_2"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTY5MDMzODUyOF5BMl5BanBnXkFtZTcwMTQ3NTMyNA@@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls071416645?ref_=tt_rls_2"
>
Sylvester Stallone Movies Ranked
</a></strong>
        </div>
        <div class="list_meta">
            a list of 25 titles
            <br />created 07&nbsp;Nov&nbsp;2014
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview even">
        <div class="list-preview-item-narrow">
<a href="/list/ls076085073?ref_=tt_rls_3"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BODBmOWU2YWMtZGUzZi00YzRhLWJjNDAtYTUwNWVkNDcyZmU5XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls076085073?ref_=tt_rls_3"
>
My favorite Sylvester Stallone movies!
</a></strong>
        </div>
        <div class="list_meta">
            a list of 21 titles
            <br />created 08&nbsp;Feb&nbsp;2015
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview odd">
        <div class="list-preview-item-narrow">
<a href="/list/ls069202067?ref_=tt_rls_4"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls069202067?ref_=tt_rls_4"
>
2008
</a></strong>
        </div>
        <div class="list_meta">
            a list of 45 titles
            <br />created 3&nbsp;months&nbsp;ago
        </div>
        <div class="clear">&nbsp;</div>
    </div>
    <div class="list-preview even">
        <div class="list-preview-item-narrow">
<a href="/list/ls068862018?ref_=tt_rls_5"
><img height="86" width="86" alt="list image" title="list image"src="/images/nopicture/medium/film.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTU2NjA1ODgzMF5BMl5BanBnXkFtZTgwMTM2MTI4MjE@._V1_UX86_CR0,0,86,86_AL_.jpg" /></a>        </div>
        <div class="list_name">
            <strong><a href="/list/ls068862018?ref_=tt_rls_5"
>
Give 'Em A Gun
</a></strong>
        </div>
        <div class="list_meta">
            a list of 33 titles
            <br />created 1&nbsp;month&nbsp;ago
        </div>
        <div class="clear">&nbsp;</div>
    </div>
                <div class="see-more">
                    <a href="/lists/tt0462499?ref_=tt_rls_sm"
>See all related lists</a>&nbsp;&raquo;
                </div>
            </div>
        </div>
<script>
    if (typeof uet == 'function') {
      uet("be", "RelatedListsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "RelatedListsWidget", {wb: 1});
    }
</script>
        


    
    
    

	
	<!-- no content received for slot: btf_rhs1 -->
	


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "ConnectWidget", {wb: 1});
    }
</script>
    <div class="mini-article">
        <h3>Connect with IMDb</h3>
        <div id="facebookWrapper">
            <iframe
                scrolling="no"
                frameborder="0"
                id="facebookIframe"
                allowTransparency="true"></iframe>
        </div>
        <hr>
        <iframe allowtransparency="true"
            frameborder="0"
            role="presentation"
            scrolling="no"
            id="twitterIframe"></iframe>
    </div>
<script>
    if (typeof uet == 'function') {
      uet("be", "ConnectWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "ConnectWidget", {wb: 1});
    }
</script>


    
    
    


  
      
    <div class="mini-article">
        <div id="ratingWidget">
            <h3>Share this Rating</h3>
            <p>
                Title:
                <strong>Rambo</strong>
                (2008)
            </p>
            <span class="imdbRatingPlugin imdbRatingStyle1" data-user="" data-title="tt0462499" data-style="t1">
<a href="/title/tt0462499/?ref_=tt_plg_rt"
> <img alt="Rambo (2008) on IMDb"
src="http://ia.media-imdb.com/images/G/01/imdb/images/plugins/imdb_46x22-2264473254._CB522736238_.png">
</a>                <span class="rating">7<span class="ofTen">/10</span></span>                
<img src="http://ia.media-imdb.com/images/G/01/imdb/images/plugins/imdb_star_22x21-2889147855._CB522736550_.png" class="star">
            </span>
            <p>Want to share IMDb's rating on your own site? Use the HTML below.</p>
            <div id="ratingPluginHTML" class="hidden">
                <div class="message_box small">
                    <div class="error">
                        <p>
                        You must be a registered user to use the IMDb rating plugin.
                        </p>
                        <a href="/register/login?ref_=tt_plg_rt"
class="cboxElement" rel='login'>Login</a>
                    </div>
                </div>
            </div>
            <div id="ratingWidgetLinks">
                <span class="titlePageSprite arrows show"></span>
                <a href="/plugins?titleId=tt0462499&ref_=tt_plg_rt"
id="toggleRatingPluginHTML" itemprop='url' >Show HTML</a>
                <a href="/plugins?titleId=tt0462499&ref_=tt_plg_rt"
itemprop='url'>View more styles</a>
            </div>
        </div>
    </div>


    
    
    


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleMainDetailsRelatedPolls", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMainDetailsRelatedPolls_started');
    }
  </script>
<div class="mini-article poll-widget-rhs ">
    <style>
        .mini-article.poll-widget-rhs ul li { margin-bottom: 0.5em; clear: left; font-weight: bold;}
        .mini-article.poll-widget-rhs span { margin-bottom: 0.5em; clear: left;}
        .mini-article.poll-widget-rhs img { float: left; padding: 0 5px 5px 0; height: 86px; width: 86px;}
    </style>
    <h3>User Polls</h3>
    <ul>
        <li>
<a href="/poll/R3ek_uij9Kc/?ref_=tt_po_i1"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMzkwNjc2YmMtM2ZiZC00M2RiLTgwMTUtMWViOGE3OGI1OGRmL2ltYWdlL2ltYWdlXkEyXkFqcGdeQXVyNjc1NTYyMjg@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/R3ek_uij9Kc/?ref_=tt_po_q1"
>Least Deserving Golden Rasberry Nominee for Worst Picture</a>
        <li>
<a href="/poll/tt0z6g3LC10/?ref_=tt_po_i2"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMzA5NTcwNjUxNl5BMl5BanBnXkFtZTcwMDc2ODEyMw@@._V1_SY86_CR21,0,86,86_.jpg" /></a>        <a href="/poll/tt0z6g3LC10/?ref_=tt_po_q2"
>Knife-Happy Folks</a>
        <li>
<a href="/poll/MMiqKixD2KA/?ref_=tt_po_i3"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BYWY1ZWQ5YjMtMDE0MS00NWIzLWE1M2YtODYzYTk2OTNlYWZmXkEyXkFqcGdeQXVyNDUyOTg3Njg@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/MMiqKixD2KA/?ref_=tt_po_q3"
>Can YOU survive these movies?</a>
        <li>
<a href="/poll/rDxMzSqXnzM/?ref_=tt_po_i4"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTk2NDkxMTY1Nl5BMl5BanBnXkFtZTgwNDI1NDU5MTE@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/rDxMzSqXnzM/?ref_=tt_po_q4"
>Record Holders for Most Expensive Film Ever</a>
        <li>
<a href="/poll/jt_Lr1WBAPU/?ref_=tt_po_i5"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjMzNzkxMzk5MF5BMl5BanBnXkFtZTgwMjU1MDAwMjE@._V1_SY86_CR21,0,86,86_.jpg" /></a>        <a href="/poll/jt_Lr1WBAPU/?ref_=tt_po_q5"
>Friday Face-Off: John Rambo vs. John McClane</a>
        <li>
<a href="/poll/Y0rJCTVmnkI/?ref_=tt_po_i6"
><img height="86" width="86" alt="poll image" title="poll image"src="http://i.imdb.com/images/nopicture/140x209/unknown.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTM3ODAzNjcwMV5BMl5BanBnXkFtZTcwMTUzMjc4OA@@._V1_SX86_CR0,0,86,86_.jpg" /></a>        <a href="/poll/Y0rJCTVmnkI/?ref_=tt_po_q6"
>Favorito Filmo ...</a>
    </ul>
    <div class="see-more"><a href="/poll/?ref_=tt_po_sm"
>See more polls &raquo;</a></div>
</div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMainDetailsRelatedPolls_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleMainDetailsRelatedPolls", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleMainDetailsRelatedPolls", {wb: 1});
    }
</script>


    
    
    

	
	<!-- no content received for slot: bottom_rhs -->
	


    
    
    
        
	
	<!-- no content received for slot: btf_rhs2 -->
	


    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    </div> 

    <div id="main_bottom" class="main">

    
    
    



    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleAwardsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsWidget_started');
    }
  </script>
      <div class="article highlighted" id="titleAwardsRanks">

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleAwardsSummaryWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsSummaryWidget_started');
    }
  </script>
    <span itemprop="awards">
      1 win &amp; 1 nomination.
    </span>
    <span class="see-more inline">
<a href="/title/tt0462499/awards?ref_=tt_awd"
class="btn-full" >See more awards</a>&nbsp;&raquo;    </span>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsSummaryWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleAwardsSummaryWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleAwardsSummaryWidget", {wb: 1});
    }
</script>
      </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleAwardsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleAwardsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleAwardsWidget", {wb: 1});
    }
</script>


    
    
    



    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleMediaStripWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_started');
    }
  </script>


  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_started');
    }
  </script>

      <div class = "article" id="titleMediaStrip">
        <div class="mediastrip_container combined">
                <div id="combined-videos">
                    <h2>Videos</h2>
    <div class="mediastrip_big">
                <span class="video_slate_last" itemscope itemtype="http://schema.org/videoObject">
                <meta itemprop="duration" content="T58S" />

<a href="/title/tt0462499/videoplayer/vi649199897?ref_=tt_pv_vi_aiv_1"
title="Rambo -- Rambo Trailer" alt="Rambo -- Rambo Trailer" class="video-modal" data-video="vi649199897" data-context="imdb" data-rid="1ATJB87EE7Q0GE3PBM4A" widget-context="titleMaindetails" itemprop="url" ><img height="105" width="139" alt="Rambo -- Rambo Trailer" title="Rambo -- Rambo Trailer"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/no-video-slate-856072904._CB522736558_.png"class="loadlate hidden video" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNTAyNzQ0ODcyMF5BMl5BanBnXkFtZTYwODIwNDY4._V1_SP229,229,0,C,0,0,0_CR45,62,139,105_PIimdb-blackband-204-14,TopLeft,0,0_PIimdb-blackband-204-28,BottomLeft,0,1_CR0,0,139,105_PIimdb-bluebutton-big,BottomRight,-1,-1_ZATrailer,2,76,16,137,verdenab,8,255,255,255,1_ZAon%2520IMDb,2,1,14,137,verdenab,7,255,255,255,1_ZA00%253A58,103,1,14,36,verdenab,7,255,255,255,1_.jpg" itemprop='image' viconst="vi649199897" /></a>            </span>
    </div>
                </div>
                <div id="combined-photos">
                    <h2>Photos</h2>
    <div class="mediastrip">        	
                
<a href="/title/tt0462499/mediaviewer/rm2007272704?context=default&ref_=tt_pv_md_1"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Sylvester Stallone in Rambo (2008)" title="Sylvester Stallone in Rambo (2008)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMjAyOTU2NTI1Ml5BMl5BanBnXkFtZTcwMzAyNzUzMw@@._V1_UY105_CR26,0,105,105_AL_.jpg" itemprop='image' /></a>                
<a href="/title/tt0462499/mediaviewer/rm3294403072?context=default&ref_=tt_pv_md_2"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Julie Benz at an event for Rambo (2008)" title="Julie Benz at an event for Rambo (2008)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTY3MDc0NTgyMV5BMl5BanBnXkFtZTcwMDY2MTc1MQ@@._V1_UX105_CR0,0,105,105_AL_.jpg" itemprop='image' /></a>                
<a href="/title/tt0462499/mediaviewer/rm1839500544?context=default&ref_=tt_pv_md_3"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Sylvester Stallone in Rambo (2008)" title="Sylvester Stallone in Rambo (2008)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTcyMDcxMzY0OV5BMl5BanBnXkFtZTcwNzkxNzUzMw@@._V1_UX105_CR0,0,105,105_AL_.jpg" itemprop='image' /></a>                
<a href="/title/tt0462499/mediaviewer/rm3244071424?context=default&ref_=tt_pv_md_4"
itemprop='thumbnailUrl'><img height="105" width="105" alt="Julie Benz and Jenny Mollen at an event for Rambo (2008)" title="Julie Benz and Jenny Mollen at an event for Rambo (2008)"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/unknown-1394846836._CB522736550_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQzNTU4NzU3MV5BMl5BanBnXkFtZTcwMzY2MTc1MQ@@._V1_UY105_CR26,0,105,105_AL_.jpg" itemprop='image' /></a>    </div>
                </div>
            <div class="combined-see-more see-more">
<a href="/title/tt0462499/mediaindex?ref_=tt_pv_mi_sm"
><span class="titlePageSprite showAllVidsAndPics"></span></a>
<a href="/title/tt0462499/mediaindex?ref_=tt_pv_mi_sm"
>43 photos</a>
<span class="ghost">|</span>
<a href="/title/tt0462499/videogallery?ref_=tt_pv_vi_sm"
>1 video</a>
<span class="ghost">|</span>
<a href="/title/tt0462499/news?ref_=tt_pv_nw_sm"
>762 news articles</a> &raquo;            </div>
        </div>
      </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_finished');
    }
  </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleMediaStripWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleMediaStripWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleMediaStripWidget", {wb: 1});
    }
</script>



<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleRecsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleRecsWidget_started');
    }
  </script>
    
        <div class="article" id="titleRecs">
            <span class="rightcornerlink">
            <a href="/help/show_leaf?personalrecommendations&ref_=tt_rec_lm"
>Learn more</a>
            </span>
            
            <h2 class="rec_heading_wrapper">  
                <span class="rec_heading" data-spec="p13nsims:tt0462499">People who liked this also liked...&nbsp;</span>
            </h2>

            <div class="rec_wrapper" id="title_recs"
                data-items-per-request="24"
                data-items-per-page="6"
                data-specs="p13nsims:tt0462499"
                data-caller-name="p13nsims-title">      
                
    <div class="rec_const_picker">
        <div class="rec_view">
            <div class="rec_grave" style="display:none"></div>
            <div class="rec_slide">
                        <div class="rec_page">         
    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0089880">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0089880/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Rambo: First Blood Part II" title="Rambo: First Blood Part II"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BZWFkY2I1ZDAtNmZhNS00NjVlLWJiMGQtMGQ1ZmM0ZDA5ODg5XkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0095956">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0095956/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Rambo III" title="Rambo III"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOTIwNWJhZDItZmNmOC00M2NkLWIwNDktMTYwZWFlZDVkMmVkL2ltYWdlXkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0083944">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0083944/?ref_=tt_rec_tti"
><img height="113" width="76" alt="First Blood" title="First Blood"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BODBmOWU2YWMtZGUzZi00YzRhLWJjNDAtYTUwNWVkNDcyZmU5XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0479143">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0479143/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Rocky Balboa" title="Rocky Balboa"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNWIyNmQyNjctYmVmMS00MGI4LWIxMmUtNjA0ODYzOTA0Yjk0L2ltYWdlXkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_UY113_CR3,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0106582">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0106582/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Cliffhanger" title="Cliffhanger"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNjU5YmFjMjctYThkOS00MTQyLThjZmMtOWIyYzk2ZjU0ODkxXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0089927">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0089927/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Rocky IV" title="Rocky IV"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTg3ODk5ODE0NV5BMl5BanBnXkFtZTcwNDkzODM1NA@@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

                        </div>
                        <div class="rec_page">         
    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0079817">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0079817/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Rocky II" title="Rocky II"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOTZmYzA4N2YtMzA1NS00OTU0LWJiNWItNDUxOWRiMGVjZjJkL2ltYWdlXkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0084602">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0084602/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Rocky III" title="Rocky III"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTMyOTYzMDMzMF5BMl5BanBnXkFtZTcwMTkzODM1NA@@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt1320253">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt1320253/?ref_=tt_rec_tti"
><img height="113" width="76" alt="The Expendables" title="The Expendables"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNTUwODQyNjM0NF5BMl5BanBnXkFtZTcwNDMwMTU1Mw@@._V1_UY113_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0106697">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0106697/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Demolition Man" title="Demolition Man"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMDBmNDhjOTYtZWVlMC00YzUwLWIyZjEtYzFjMWM5OTdiZDJkXkEyXkFqcGdeQXVyNjUwNzk3NDc@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0100507">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0100507/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Rocky V" title="Rocky V"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTM2Mzc4MTYxM15BMl5BanBnXkFtZTcwODY5NTk1NA@@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

    
    
    <div class="rec_item" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0090859">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0090859/?ref_=tt_rec_tti"
><img height="113" width="76" alt="Cobra" title="Cobra"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/small/film-293970583._CB522736596_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOWZhOWVmMzctY2RjMi00YzkxLTkwOGQtODA2MDk1MDg1ZWVlXkEyXkFqcGdeQXVyMDEwMjgxNg@@._V1_UX76_CR0,0,76,113_AL_.jpg" /> <br/>
</a>    </div>

                        </div>
            </div>
            <div class="rec_nav">
                <div class="rec_nav_page_num"></div>
                <a class="rec_nav_left">&#9668; Prev 6</a>
                <a class="rec_nav_right">Next 6 &#9658;</a>
            </div>
        </div>
    </div>
    
   <div class="rec_overviews">

         
      <div class="rec_overview" data-tconst="tt0089880">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0089880">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0089880/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Rambo: First Blood Part II" title="Rambo: First Blood Part II"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BZWFkY2I1ZDAtNmZhNS00NjVlLWJiMGQtMGQ1ZmM0ZDA5ODg5XkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0089880" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0089880/?ref_=tt_rec_tt"
><b>Rambo: First Blood Part II</b></a>
            <span class="nobr">(1985)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Action          
 <span class="ghost">|</span> 
                     Adventure          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0089880|imdb|6.4|6.4|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 6.4/10 (125,976 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 89.6px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">6.4</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0089880/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
John Rambo is released from prison by the government for a top-secret covert mission to the last place on Earth he'd want to return - the jungles of Vietnam.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
George P. Cosmatos  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Richard Crenna, 
Charles Napier</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0095956">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0095956">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0095956/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Rambo III" title="Rambo III"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOTIwNWJhZDItZmNmOC00M2NkLWIwNDktMTYwZWFlZDVkMmVkL2ltYWdlXkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0095956" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0095956/?ref_=tt_rec_tt"
><b>Rambo III</b></a>
            <span class="nobr">(1988)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Action          
 <span class="ghost">|</span> 
                     Adventure          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0095956|imdb|5.7|5.7|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 5.7/10 (99,099 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 79.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">5.7</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0095956/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Colonel Trautman is captured by Soviets during a mission in Afghanistan so Rambo sets out to rescue him while taking on the invading Russian forces.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Peter MacDonald  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Richard Crenna, 
Marc de Jonge</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0083944">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0083944">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0083944/?ref_=tt_rec_tti"
><img height="190" width="128" alt="First Blood" title="First Blood"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BODBmOWU2YWMtZGUzZi00YzRhLWJjNDAtYTUwNWVkNDcyZmU5XkEyXkFqcGdeQXVyNDk3NzU2MTQ@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0083944" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0083944/?ref_=tt_rec_tt"
><b>First Blood</b></a>
            <span class="nobr">(1982)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Action          
 <span class="ghost">|</span> 
                     Adventure          
 <span class="ghost">|</span> 
                     Drama          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0083944|imdb|7.7|7.7|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 7.7/10 (184,576 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 107.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">7.7</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0083944/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Former Green Beret John Rambo is pursued into the mountains surrounding a small town by a tyrannical sheriff and his deputies, forcing him to survive using his combat skills.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Ted Kotcheff  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Brian Dennehy, 
Richard Crenna</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0479143">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0479143">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0479143/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Rocky Balboa" title="Rocky Balboa"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNWIyNmQyNjctYmVmMS00MGI4LWIxMmUtNjA0ODYzOTA0Yjk0L2ltYWdlXkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_UY190_CR4,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0479143" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0479143/?ref_=tt_rec_tt"
><b>Rocky Balboa</b></a>
            <span class="nobr">(2006)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    <span title="Ratings certificate for Rocky Balboa (2006)"
                          class="us_pg titlePageSprite absmiddle"></span>

                     Drama          
 <span class="ghost">|</span> 
                     Sport          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0479143|imdb|7.2|7.2|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 7.2/10 (173,917 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 100.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">7.2</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0479143/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Thirty years after the ring of the first bell, Rocky Balboa comes out of retirement and dons his gloves for his final fight; against the reigning heavyweight champ Mason 'The Line' Dixon.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Sylvester Stallone  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Antonio Tarver, 
Milo Ventimiglia</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0106582">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0106582">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0106582/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Cliffhanger" title="Cliffhanger"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNjU5YmFjMjctYThkOS00MTQyLThjZmMtOWIyYzk2ZjU0ODkxXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0106582" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0106582/?ref_=tt_rec_tt"
><b>Cliffhanger</b></a>
            <span class="nobr">(1993)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    <span title="Ratings certificate for Cliffhanger (1993)"
                          class="us_r titlePageSprite absmiddle"></span>

                     Action          
 <span class="ghost">|</span> 
                     Adventure          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0106582|imdb|6.4|6.4|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 6.4/10 (102,444 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 89.6px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">6.4</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0106582/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
A botched mid-air heist results in suitcases full of cash being searched for by various groups throughout the Rocky Mountains.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Renny Harlin  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
John Lithgow, 
Michael Rooker</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0089927">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0089927">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0089927/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Rocky IV" title="Rocky IV"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTg3ODk5ODE0NV5BMl5BanBnXkFtZTcwNDkzODM1NA@@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0089927" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0089927/?ref_=tt_rec_tt"
><b>Rocky IV</b></a>
            <span class="nobr">(1985)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Drama          
 <span class="ghost">|</span> 
                     Sport          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0089927|imdb|6.8|6.8|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 6.8/10 (148,231 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 95.2px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">6.8</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0089927/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
After iron man Drago, a highly intimidating 6-foot-5, 261-pound Soviet athlete, kills Apollo Creed in an exhibition match, Rocky comes to the heart of Russia for 15 pile-driving boxing rounds of revenge.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Sylvester Stallone  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Talia Shire, 
Burt Young</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0079817">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0079817">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0079817/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Rocky II" title="Rocky II"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOTZmYzA4N2YtMzA1NS00OTU0LWJiNWItNDUxOWRiMGVjZjJkL2ltYWdlXkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0079817" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0079817/?ref_=tt_rec_tt"
><b>Rocky II</b></a>
            <span class="nobr">(1979)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Drama          
 <span class="ghost">|</span> 
                     Sport          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0079817|imdb|7.2|7.2|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 7.2/10 (151,643 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 100.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">7.2</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0079817/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Rocky struggles in family life after his bout with Apollo Creed, while the embarrassed champ insistently goads him to accept a challenge for a rematch.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Sylvester Stallone  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Talia Shire, 
Burt Young</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0084602">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0084602">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0084602/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Rocky III" title="Rocky III"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTMyOTYzMDMzMF5BMl5BanBnXkFtZTcwMTkzODM1NA@@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0084602" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0084602/?ref_=tt_rec_tt"
><b>Rocky III</b></a>
            <span class="nobr">(1982)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Drama          
 <span class="ghost">|</span> 
                     Sport          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0084602|imdb|6.8|6.8|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 6.8/10 (136,592 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 95.2px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">6.8</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0084602/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
After winning the ultimate title and being the world champion, Rocky falls into a hole and finds himself picked up by a former enemy.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Sylvester Stallone  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Talia Shire, 
Burt Young</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt1320253">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt1320253">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt1320253/?ref_=tt_rec_tti"
><img height="190" width="128" alt="The Expendables" title="The Expendables"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNTUwODQyNjM0NF5BMl5BanBnXkFtZTcwNDMwMTU1Mw@@._V1_UY190_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt1320253" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt1320253/?ref_=tt_rec_tt"
><b>The Expendables</b></a>
            <span class="nobr">(2010)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    <span title="Ratings certificate for The Expendables (2010)"
                          class="us_r titlePageSprite absmiddle"></span>

                     Action          
 <span class="ghost">|</span> 
                     Adventure          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt1320253|imdb|6.5|6.5|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 6.5/10 (287,309 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 91px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">6.5</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt1320253/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
A CIA operative hires a team of mercenaries to eliminate a Latin dictator and a renegade CIA agent.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Sylvester Stallone  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Jason Statham, 
Jet Li</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0106697">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0106697">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0106697/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Demolition Man" title="Demolition Man"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMDBmNDhjOTYtZWVlMC00YzUwLWIyZjEtYzFjMWM5OTdiZDJkXkEyXkFqcGdeQXVyNjUwNzk3NDc@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0106697" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0106697/?ref_=tt_rec_tt"
><b>Demolition Man</b></a>
            <span class="nobr">(1993)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            
            
                
                    <span title="Ratings certificate for Demolition Man (1993)"
                          class="us_r titlePageSprite absmiddle"></span>

                     Action          
 <span class="ghost">|</span> 
                     Crime          
 <span class="ghost">|</span> 
                     Sci-Fi          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0106697|imdb|6.6|6.6|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 6.6/10 (133,089 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 92.4px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">6.6</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0106697/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
A police officer is brought out of suspended animation in prison to pursue an old ultra-violent nemesis who is loose in a non-violent future society.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
Marco Brambilla  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Wesley Snipes, 
Sandra Bullock</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0100507">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0100507">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0100507/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Rocky V" title="Rocky V"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTM2Mzc4MTYxM15BMl5BanBnXkFtZTcwODY5NTk1NA@@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0100507" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0100507/?ref_=tt_rec_tt"
><b>Rocky V</b></a>
            <span class="nobr">(1990)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Drama          
 <span class="ghost">|</span> 
                     Sport          


        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0100507|imdb|5.2|5.2|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 5.2/10 (101,792 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 72.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">5.2</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0100507/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
Reluctantly retired from boxing, and back from riches to rags, Rocky takes on a new protege who betrays him, as the champ's son must adjust to his family's new life after bankruptcy.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
John G. Avildsen  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Talia Shire, 
Burt Young</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
         
      <div class="rec_overview" data-tconst="tt0090859">
    
    
    
    <div class="rec_poster" data-info="" data-spec="p13nsims:tt0462499" data-tconst="tt0090859">
        <div class="rec_overlay">
            <div class="rec_filter"></div>
            <div class="glyph rec_watchlist_glyph"></div>
            <div class="glyph rec_blocked_glyph"></div>
            <div class="glyph rec_rating_glyph"></div>
            <div class="glyph rec_pending_glyph"></div>                        
        </div>            
<a href="/title/tt0090859/?ref_=tt_rec_tti"
><img height="190" width="128" alt="Cobra" title="Cobra"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/large/film-184890147._CB522736516_.png"class="loadlate hidden rec_poster_img" loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOWZhOWVmMzctY2RjMi00YzkxLTkwOGQtODA2MDk1MDg1ZWVlXkEyXkFqcGdeQXVyMDEwMjgxNg@@._V1_UX128_CR0,0,128,190_AL_.jpg" /> <br/>
</a>    </div>

    
       <div class="rec_actions">
     
         <div class="rec_action_divider">
           <div class="wlb_classic_wrapper">
             <span class="wlb_wrapper">
               <a class="rec_wlb_watchlist_btn" data-tconst="tt0090859" data-size="medium" data-caller-name="p13nsims-title" data-type="primary"></a>
             </span>
           </div>  
         </div> 
       
         <div class="rec_action_divider">
           <span class="btn2_wrapper">
             <a class="rec_next rec_half_button btn2 medium btn2_text_on" title="Show me the next title" onclick="">
               <span class="btn2_glyph">0</span>
               <span class="btn2_text">Next &raquo;</span>
             </a>
           </span>
         </div>    
         
             <input type="hidden" name="49e6c" value="da29">
       </div>
       
       <div class="rec_details">
         <div class="rec-info">
         
           <div class="rec-jaw-upper">  

     <div class="rec-title">
       <a href="/title/tt0090859/?ref_=tt_rec_tt"
><b>Cobra</b></a>
            <span class="nobr">(1986)</span>
   </div>  
             


    <div class="rec-cert-genre rec-elipsis">
        

            

                     Action          
 <span class="ghost">|</span> 
                     Crime          
 <span class="ghost">|</span> 
                     Thriller          

        
    </div>
             
             <div class="rec-rating">
               

  

  
<div class="rating rating-list" data-starbar-class="rating-list" data-auth="" data-user="" id="tt0090859|imdb|5.7|5.7|p13nsims-title|tt0462499|title|main" data-ga-identifier=""
title="Users rated this 5.7/10 (54,548 votes) - click stars to rate" >
<span class="rating-bg">&nbsp;</span>
<span class="rating-imdb " style="width: 79.8px">&nbsp;</span>
<span class="rating-stars">
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>1</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>2</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>3</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>4</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>5</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>6</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>7</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>8</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>9</span></a>
      <a href="/register/login?why=vote&ref_=tt_ov_rt"
rel="nofollow" title="Register or login to rate this title" ><span>10</span></a>
</span>
<span class="rating-rating "><span class="value">5.7</span><span class="grey">/</span><span class="grey">10</span></span>
<span class="rating-cancel "><a href="/title/tt0090859/vote?v=X;k=" title="Delete" rel="nofollow"><span>X</span></a></span>
&nbsp;</div>

               <div class="rec-outline">
    <p>
A tough-on-crime street cop must protect the only surviving witness to a strange murderous cult with far reaching plans.    </p>
               </div>
               
             </div>  
             
           </div>
           
           <div class="rec-jaw-lower">
             <div class="rec-jaw-teeth"></div>                       
 <div class="rec-director rec-ellipsis">
      <b>Director:</b>
George P. Cosmatos  </div>
<div class="rec-actor rec-ellipsis"> <span>
    <b>Stars:</b> 
Sylvester Stallone, 
Brigitte Nielsen, 
Reni Santoni</span></div> 
           </div>
           
         </div>
       </div>
 
      </div>
     
    
   </div>
   
                
            </div>
        </div>  
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleRecsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleRecsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleRecsWidget", {wb: 1});
    }
</script>


<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleCastWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleCastWidget_started');
    }
  </script>
    <div class="article" id="titleCast">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_cl"
rel="login">Edit</a>
    </span>
        <h2>Cast</h2>
        
        <table class="cast_list">    
  <tr><td colspan="4" class="castlist_label">Cast overview, first billed only:</td></tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0000230/?ref_=tt_cl_i1"
><img height="44" width="32" alt="Sylvester Stallone" title="Sylvester Stallone"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQwMTk3NDU2OV5BMl5BanBnXkFtZTcwNTA3MTI0Mw@@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0000230/?ref_=tt_cl_t1"
itemprop='url'> <span class="itemprop" itemprop="name">Sylvester Stallone</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0005265/?ref_=tt_cl_t1" >John Rambo</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0004748/?ref_=tt_cl_i2"
><img height="44" width="32" alt="Julie Benz" title="Julie Benz"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BNjYyNzIyNDYyN15BMl5BanBnXkFtZTgwOTAxMTUyOTE@._V1_UY44_CR6,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0004748/?ref_=tt_cl_t2"
itemprop='url'> <span class="itemprop" itemprop="name">Julie Benz</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0050768/?ref_=tt_cl_t2" >Sarah</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0550452/?ref_=tt_cl_i3"
><img height="44" width="32" alt="Matthew Marsden" title="Matthew Marsden"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BYzIwOGNiODMtODNlMy00MGNhLTkzZWMtNWM5MWU1MzFjYjQwXkEyXkFqcGdeQXVyNjYxMTkxNTE@._V1_UY44_CR4,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0550452/?ref_=tt_cl_t3"
itemprop='url'> <span class="itemprop" itemprop="name">Matthew Marsden</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0056266/?ref_=tt_cl_t3" >School Boy</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0574615/?ref_=tt_cl_i4"
><img height="44" width="32" alt="Graham McTavish" title="Graham McTavish"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTg0NDUwNTgyOV5BMl5BanBnXkFtZTgwNzk0MzU3MjE@._V1_UY44_CR6,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0574615/?ref_=tt_cl_t4"
itemprop='url'> <span class="itemprop" itemprop="name">Graham McTavish</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0056272/?ref_=tt_cl_t4" >Lewis</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm1274545/?ref_=tt_cl_i5"
><img height="44" width="32" alt="Reynaldo Gallegos" title="Reynaldo Gallegos"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BOTEzZjZmMGQtNDg0ZS00ZjBjLTgzZGMtOTExNGYxYzVjZDAwXkEyXkFqcGdeQXVyMjQwMDg0Ng@@._V1_UX32_CR0,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm1274545/?ref_=tt_cl_t5"
itemprop='url'> <span class="itemprop" itemprop="name">Reynaldo Gallegos</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0056273/?ref_=tt_cl_t5" >Diaz</a> 
  
  
  (as Rey Gallegos)
  
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0478403/?ref_=tt_cl_i6"
><img height="44" width="32" alt="Jake La Botz" title="Jake La Botz"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BY2ZiYjBlYjMtNDZkMi00OTNjLTlkMDgtYTJiMWUyNWI2OWEzL2ltYWdlXkEyXkFqcGdeQXVyNDA4ODg2NA@@._V1_UY44_CR1,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0478403/?ref_=tt_cl_t6"
itemprop='url'> <span class="itemprop" itemprop="name">Jake La Botz</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0056274/?ref_=tt_cl_t6" >Reese</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm1085727/?ref_=tt_cl_i7"
><img height="44" width="32" alt="Tim Kang" title="Tim Kang"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTQ3MzEwODc1MV5BMl5BanBnXkFtZTcwMzQxNDk3Mw@@._V1_UY44_CR1,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm1085727/?ref_=tt_cl_t7"
itemprop='url'> <span class="itemprop" itemprop="name">Tim Kang</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0056275/?ref_=tt_cl_t7" >En-Joo</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm2678196/?ref_=tt_cl_i8"
><img height="44" width="32" alt="Maung Maung Khin" title="Maung Maung Khin"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png" class="" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm2678196/?ref_=tt_cl_t8"
itemprop='url'> <span class="itemprop" itemprop="name">Maung Maung Khin</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0056277/?ref_=tt_cl_t8" >Tint</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0776584/?ref_=tt_cl_i9"
><img height="44" width="32" alt="Paul Schulze" title="Paul Schulze"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMTAyODc4MDMyMjVeQTJeQWpwZ15BbWU3MDQ4MDE4MjE@._V1_UY44_CR1,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0776584/?ref_=tt_cl_t9"
itemprop='url'> <span class="itemprop" itemprop="name">Paul Schulze</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0005271/?ref_=tt_cl_t9" >Michael Burnett</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm0669212/?ref_=tt_cl_i10"
><img height="44" width="32" alt="Cameron Pearson" title="Cameron Pearson"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BMzg1MDY1MjE0NF5BMl5BanBnXkFtZTYwNDgwODYy._V1_UY44_CR17,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0669212/?ref_=tt_cl_t10"
itemprop='url'> <span class="itemprop" itemprop="name">Cameron Pearson</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Missionary #4 (Jeff) 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm2880249/?ref_=tt_cl_i11"
><img height="44" width="32" alt="Thomas Peterson" title="Thomas Peterson"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png" class="" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm2880249/?ref_=tt_cl_t11"
itemprop='url'> <span class="itemprop" itemprop="name">Thomas Peterson</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Missionary #2 (Dentist) 
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm2879107/?ref_=tt_cl_i12"
><img height="44" width="32" alt="Tony Skarberg" title="Tony Skarberg"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png" class="" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm2879107/?ref_=tt_cl_t12"
itemprop='url'> <span class="itemprop" itemprop="name">Tony Skarberg</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Missionary #3 (Videographer) 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm0999139/?ref_=tt_cl_i13"
><img height="44" width="32" alt="James With" title="James With"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png"class="loadlate hidden " loadlate="https://images-na.ssl-images-amazon.com/images/M/MV5BYmY2NTg4ZmEtOGQwNC00NjA0LTk0YmEtNGIzMGE5NDJjMmQ4L2ltYWdlXkEyXkFqcGdeQXVyNzY0MjUwMA@@._V1_UY44_CR13,0,32,44_AL_.jpg" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm0999139/?ref_=tt_cl_t13"
itemprop='url'> <span class="itemprop" itemprop="name">James With</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            Missionary #5 (Preacher) 
  
  
  (as James Wearing Smith)
  
                  
              </div>
          </td>
      </tr>
      <tr class="even">
          <td class="primary_photo">
<a href="/name/nm2878863/?ref_=tt_cl_i14"
><img height="44" width="32" alt="Kasikorn Niyompattana" title="Kasikorn Niyompattana"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png" class="" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm2878863/?ref_=tt_cl_t14"
itemprop='url'> <span class="itemprop" itemprop="name">Kasikorn Niyompattana</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0136736/?ref_=tt_cl_t14" >Snake Hunter #2</a> 
                  
              </div>
          </td>
      </tr>
      <tr class="odd">
          <td class="primary_photo">
<a href="/name/nm2879982/?ref_=tt_cl_i15"
><img height="44" width="32" alt="Shaliew 'Lek' Bamrungbun" title="Shaliew 'Lek' Bamrungbun"src="http://ia.media-imdb.com/images/G/01/imdb/images/nopicture/32x44/name-2138558783._CB522736171_.png" class="" /></a>          </td>
          <td class="itemprop" itemprop="actor" itemscope itemtype="http://schema.org/Person">
<a href="/name/nm2879982/?ref_=tt_cl_t15"
itemprop='url'> <span class="itemprop" itemprop="name">Shaliew 'Lek' Bamrungbun</span>
</a>          </td>
          <td class="ellipsis">
              ...
          </td>
          <td class="character">
              <div>
            <a href="/character/ch0136736/?ref_=tt_cl_t15" >Snake Hunter #1</a> 
                  
              </div>
          </td>
      </tr>
        </table>
        <div class="see-more">
            <a href="fullcredits?ref_=tt_cl_sm#cast"
>See full cast</a>&nbsp;&raquo;
        </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleCastWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleCastWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleCastWidget", {wb: 1});
    }
</script>



    
    
    

	
	<!-- no content received for slot: maindetails_center_ad -->
	


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleStorylineWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleStorylineWidget_started');
    }
  </script>
    <div class = "article" id="titleStoryLine">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_stry"
rel="login">Edit</a>
    </span>
    
        <h2>Storyline</h2>
        
        <div class="inline canwrap" itemprop="description">
            <p>
Vietnam veteran John Rambo has survived many harrowing ordeals in his lifetime and has since withdrawn into a simple and secluded existence in Thailand, where he spends his time capturing snakes for local entertainers, and chauffeuring locals in his old PT boat. Even though he is looking to avoid trouble, trouble has a way of finding him: a group of Christian human rights missionaries, led by Michael Burnett and Sarah Miller, approach Rambo with the desire to rent his boat to travel up the river to Burma. For over fifty years, Burma has been a war zone. The Karen people of the region, who consist of peasants and farmers, have endured brutally oppressive rule from the murderous Burmese military and have been struggling for survival every single day. After some inner contemplation, Rambo accepts the offer and takes Michael, Sarah, and the rest of the missionaries up the river. When the missionaries finally arrive at the Karen village, they find themselves part of a raid by the sadistic ...                <em class="nobr">Written by
<a href="/search/title?plot_author=stallonezone.com%20/%20Drew%20Lahat&view=simple&sort=alpha&ref_=tt_stry_pl"
>stallonezone.com / Drew Lahat</a></em>            </p>
        </div>
        
        <span class="see-more inline"> 
                <a href="/title/tt0462499/plotsummary?ref_=tt_stry_pl"
>Plot Summary</a>
    <span>|</span>
        <a href="/title/tt0462499/synopsis?ref_=tt_stry_pl"
>Plot Synopsis</a>
    </span>
        <hr />
        <div class="see-more inline canwrap" itemprop="keywords">
            <h4 class="inline">Plot Keywords:</h4>
<a href="/keyword/rambo?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">rambo</span></a>
                        <span>|</span>
<a href="/keyword/missionary?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">missionary</span></a>
                        <span>|</span>
<a href="/keyword/burma?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">burma</span></a>
                        <span>|</span>
<a href="/keyword/mercenary?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">mercenary</span></a>
                        <span>|</span>
<a href="/keyword/thailand?ref_=tt_stry_kw"
> <span class="itemprop" itemprop="keywords">thailand</span></a>
            <span>|</span>&nbsp;<nobr><a href="/title/tt0462499/keywords?ref_=tt_stry_kw"
>See All (214)</a>&nbsp;&raquo;</nobr>

        </div>      
        <hr />
        <div class="txt-block">
            <h4 class="inline">Taglines:</h4>
Heroes never die.... They just reload.                <span class="see-more inline">
<a href="/title/tt0462499/taglines?ref_=tt_stry_tg"
> See more</a>&nbsp;&raquo;
                </span>
        </div>
        <hr />
        <div class="see-more inline canwrap" itemprop="genre">
            <h4 class="inline">Genres:</h4>
<a href="/genre/Action?ref_=tt_stry_gnr"
> Action</a>&nbsp;<span>|</span>
<a href="/genre/Thriller?ref_=tt_stry_gnr"
> Thriller</a>&nbsp;<span>|</span>
<a href="/genre/War?ref_=tt_stry_gnr"
> War</a>
        </div>      
        
             <hr/>
    
    <div class="txt-block">
                <h4>Motion Picture Rating
                    (<a href="/mpaa?ref_=tt_stry_pg"
>MPAA</a>)
                </h4>
            <span itemprop="contentRating">Rated R for strong graphic bloody violence, sexual assaults, grisly images and language</span>
<span class="ghost">|</span>            <span class="see-more inline">
<a href="/title/tt0462499/parentalguide?ref_=tt_stry_pg#certification"
> See all certifications</a>&nbsp;&raquo;
            </span>
    </div>
    <div class="txt-block">
        <h4 class="inline">Parents Guide:</h4>
        <span class="see-more inline" itemprop="audience" itemscope itemtype="http://schema.org/Audience">
<a href="/title/tt0462499/parentalguide?ref_=tt_stry_pg"
itemprop='url'> View content advisory</a>&nbsp;&raquo;
        </span>
    </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleStorylineWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleStorylineWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleStorylineWidget", {wb: 1});
    }
</script>


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleDetailsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDetailsWidget_started');
    }
  </script>
    
    <div class = "article" id="titleDetails">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_dt_dt"
rel="login">Edit</a>
    </span>
        <h2>Details</h2>
      <div class="txt-block">
      <h4 class="inline">Official Sites:</h4>
    <a href="/offsite/?page-action=offsite-facebook&token=BCYmFU9rKQhPxgFS6dgE_3T9n4enezHk9f-D8GsW6mHice1Xw-fi57MsGKum-GSIGwqtUEWAnGi6%0D%0ADImuP5dE_FrUO7IG7Ur4jXHatSHwcATGP-LQ2D84qIDDbPouPG1Z9qu5EbAyxzC2I5noyN3yoKpW%0D%0A8ABb0I_XJcpjQQe32pKJdZQWbWPXt_fOYmZz-4ZsT-T7mjp6MLewiC1xDkRfYfjklS-VKGPPs97J%0D%0AngvykRIt78I%0D%0A&ref_=tt_pdt_ofs_offsite_0"
rel="nofollow" itemprop='url'>Official Facebook</a>
          <span class="ghost">|</span>
        
    <a href="/offsite/?page-action=offsite-rambofilm&token=BCYqSQ6Z8mQS_W-M5NoFbcKiKI4CRiCxJYJdC_WbpUCzmWR2T4YZDd0SajOCnybN5u6S4zi67bc5%0D%0A-XDsXB0KYt_T1A0GuuDhQdHYgqo8ILqed-OArblbhbo3dO-U1Dec0DnY0uu3iXYj-gp8baEBXqW3%0D%0AHywifIIQnCeTgUr-nQFcVqhLDgxnj5szRpGL-6fFXO-04_D4rU5IN-aZCtSbUnjxLQ%0D%0A&ref_=tt_pdt_ofs_offsite_1"
rel="nofollow" itemprop='url'>Official site</a>
               <span class="see-more inline">
      </span>
      </div>
  
    <div class="txt-block">
    <h4 class="inline">Country:</h4>
        <a href="/search/title?country_of_origin=de&ref_=tt_dt_dt"
itemprop='url'>Germany</a>
              <span class="ghost">|</span>
        <a href="/search/title?country_of_origin=us&ref_=tt_dt_dt"
itemprop='url'>USA</a>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Language:</h4>
        <a href="/search/title?title_type=feature&primary_language=en&sort=moviemeter,asc&ref_=tt_dt_dt"
itemprop='url'>English</a>
            <span class="ghost">|</span>
        <a href="/search/title?title_type=feature&primary_language=my&sort=moviemeter,asc&ref_=tt_dt_dt"
itemprop='url'>Burmese</a>
            <span class="ghost">|</span>
        <a href="/search/title?title_type=feature&primary_language=th&sort=moviemeter,asc&ref_=tt_dt_dt"
itemprop='url'>Thai</a>
    </div>
  
    
    <div class="txt-block">
    <h4 class="inline">Release Date:</h4> 6 February 2008 (Belgium)
    <span class="see-more inline">
      <a href="releaseinfo?ref_=tt_dt_dt"
itemprop='url'>See more</a>&nbsp;&raquo;
    </span>
    </div>
  
      <div class="txt-block">
      <h4 class="inline">Also Known As:</h4> John Rambo
      <span class="see-more inline">
        <a href="releaseinfo?ref_=tt_dt_dt#akas"
itemprop='url'>See more</a>&nbsp;&raquo;
      </span>
      </div>
  
    <div class="txt-block">
    <h4 class="inline">Filming Locations:</h4> 
    <a href="/search/title?locations=Arizona,%20USA&ref_=tt_dt_dt"
itemprop='url'>Arizona, USA</a>
      <span class="see-more inline">
        <a href="locations?ref_=tt_dt_dt"
itemprop='url'>See more</a>&nbsp;&raquo;
      </span>
    </div>
  
    <hr /> 
    <h3 class="subheading">Box Office</h3>
  
      <div class="txt-block">
      <h4 class="inline">Budget:</h4>        $50,000,000        

      <span class="attribute">(estimated)</span>
      </div>
  
    <div class="txt-block">
    <h4 class="inline">Opening Weekend:</h4>         PHP&nbsp;6,309,454        

      (Philippines)
      <span class="attribute">(27 January 2008)</span>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Gross:</h4>        $42,754,105        

      <span class="attribute">(USA)</span>
      <span class="attribute">(27 March 2008)</span>
    </div>
  
  <span class="see-more inline">
    <a href="business?ref_=tt_dt_bus"
itemprop='url'>See more</a>&nbsp;&raquo;
  </span>  
  <hr /> 
  <h3 class="subheading">Company Credits</h3>
    <div class="txt-block">
    <h4 class="inline">Production Co:</h4>
        <span itemprop="creator" itemscope itemtype="http://schema.org/Organization">
<a href="/company/co0173285?ref_=tt_dt_co"
itemprop='url'><span class="itemprop" itemprop="name">Lionsgate</span></a></span>,        <span itemprop="creator" itemscope itemtype="http://schema.org/Organization">
<a href="/company/co0150452?ref_=tt_dt_co"
itemprop='url'><span class="itemprop" itemprop="name">The Weinstein Company</span></a></span>,        <span itemprop="creator" itemscope itemtype="http://schema.org/Organization">
<a href="/company/co0002572?ref_=tt_dt_co"
itemprop='url'><span class="itemprop" itemprop="name">Millennium Films</span></a></span>      <span class="see-more inline">
        <a href="companycredits?ref_=tt_dt_co"
itemprop='url'>See more</a>&nbsp;&raquo;
      </span>
    </div>
  <div class="txt-block"> 
  Show detailed
<a href="http://pro.imdb.com/title/tt0462499/companycredits?rf=cons_tt_cocred_tt&ref_=cons_tt_cocred_tt"
itemprop='url'>company contact information</a>
  on 
  <a href="http://pro.imdb.com/signup/index.html?rf=cons_tt_cocred_spl&ref_=cons_tt_cocred_spl"
itemprop='url'>IMDbPro</a>&nbsp;&raquo;
  </div>
  

  <hr />
  <h3 class="subheading">Technical Specs</h3>
  
    <div class="txt-block">
      <h4 class="inline">Runtime:</h4> 
        <time itemprop="duration" datetime="PT92M">92 min</time>
          <span class="ghost">|</span>
        <time itemprop="duration" datetime="PT99M">99 min</time>
            (extended)
          <span class="ghost">|</span>
        <time itemprop="duration" datetime="PT80M">80 min</time>
            (cut)
            (FSK 16 rated)
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Sound Mix:</h4>
        <a href="/search/title?sound_mixes=sdds&ref_=tt_dt_spec"
itemprop='url'>SDDS</a>
<span class="ghost">|</span>        <a href="/search/title?sound_mixes=dts&ref_=tt_dt_spec"
itemprop='url'>DTS</a>
<span class="ghost">|</span>        <a href="/search/title?sound_mixes=dolby_digital&ref_=tt_dt_spec"
itemprop='url'>Dolby Digital</a>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Color:</h4>
        <a href="/search/title?colors=color&ref_=tt_dt_spec"
itemprop='url'>Color</a>
    </div>
  
    <div class="txt-block">
    <h4 class="inline">Aspect Ratio:</h4> 2.35 : 1
    </div>
  
  See <a href="technical?ref_=tt_dt_spec"
itemprop='url'>full technical specs</a>&nbsp;&raquo;
    </div>

  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDetailsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleDetailsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleDetailsWidget", {wb: 1});
    }
</script>


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleDidYouKnowWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDidYouKnowWidget_started');
    }
  </script>
    <div id="titleDidYouKnow" class="article">
    <span class=rightcornerlink >
            <a href="/register/login?why=edit&ref_=tt_trv_trv"
rel="login">Edit</a>
    </span>
        <h2>Did You Know?</h2>
    <div id="trivia" class="txt-block">
        <h4>Trivia</h4>
In his commentary for <a href="/title/tt0083944?ref_=tt_trv_trv">First Blood</a> (1982), author <a href="/name/nm5825171?ref_=tt_trv_trv">David Morell</a> cites the inspiration for John Rambo as being World War II hero and later Hollywood actor <a href="/name/nm0001559?ref_=tt_trv_trv">Audie Murphy</a>. Rambo's last stand in the finale is very similar to the actions Murphy took that resulted in his being awarded the Medal of Honor--manning a 50.-cal. machine gun mounted on a vehicle (in that case, a tank) and singlehandedly holding off hundreds of enemy soldiers, killing dozens. However, in Murphy's case the tank he was firing from had been disabled and was on fire, and the cannon shells and ammunition it was carrying could have exploded at any moment.        <a href="trivia?ref_=tt_trv_trv"
class="nobr" >See more</a>  &raquo;
    </div>
                <hr />
     <div id="goofs"  class="txt-block">
        <h4>Goofs</h4>
The Claymore mine changes from a training Claymore (Blue in color) to an Airsoft Claymore (OD Green but with a pellet loading hole in the front cover). The tripwire firing mechanism also changes between shots, but was not present when Schoolboy tossed it to Rambo.        <a href="trivia?tab=gf&ref_=tt_trv_gf"
class="nobr" >See more</a>  &raquo;
    </div>   
                <hr />
    <div id="quotes" class="text-block">
        <h4>Quotes</h4>
<a href="/name/nm0574615/?ref_=tt_trv_qu"
><span class="character">Lewis</span></a>:
God didn't save your life! We did!
<br />        <a href="trivia?tab=qt&ref_=tt_trv_qu"
class="nobr" >See more</a> &raquo;
    </div>
                <hr />
     <div id="crazyCredits"  class="txt-block">
        <h4>Crazy Credits</h4>
Sandwich Makers - Permpoon Penjan and Parichat U-Tama        <a href="trivia?tab=cz&ref_=tt_trv_cc"
class="nobr" >See more</a>  &raquo;
    </div>   
                <hr />
    <div id="connections" class="text-block">
        <h4>Connections</h4>
        Features <a href="/title/tt0083944?ref_=tt_trv_cnn">First Blood</a>&nbsp;(1982)


        <a href="trivia?tab=mc&ref_=tt_trv_cnn"
class="nobr" >See more</a> &raquo;
    </div>
                <hr />
    <div id="soundtracks" class="text-block">
        <h4>Soundtracks</h4>
Long Mae Ping <br />
Written by <a href="/name/nm0429599/">Chuck Jonkey</a> (as Charles Jonkey) <br />
Performed by <a href="/name/nm0429599/">Chuck Jonkey</a> &amp; Lugsil <br />
Published by Jonkey Music (ASCAP) <br />
Courtesy of Jonkey Enterprises Sonic Safari Music <br />        <a href="soundtrack?ref_=tt_trv_snd"
class="nobr" >See more</a> &raquo;
    </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleDidYouKnowWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleDidYouKnowWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleDidYouKnowWidget", {wb: 1});
    }
</script>


    
    
    


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleFAQWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleFAQWidget_started');
    }
  </script>
    
    <div class="article" id="titleFAQ">
        <h2>Frequently Asked Questions</h2>
        
            <div class="faq" >
                    <div class="odd">
                    <b>Q:</b>
<a href="/title/tt0462499/faq?ref_=tt_faq_1#.2.1.4"
> Were Jerry Goldsmith's themes used in the film?</a>
                    </div>
                    <div class="even">
                    <b>Q:</b>
<a href="/title/tt0462499/faq?ref_=tt_faq_2#.2.1.26"
> What happened to the knife Rambo used and how did he carry his new knife without a sheath?</a>
                    </div>
                    <div class="odd">
                    <b>Q:</b>
<a href="/title/tt0462499/faq?ref_=tt_faq_3#.2.1.13"
> How could that mine create an explosion that large?</a>
                    </div>
            </div>
        
            <span class="see-more inline" >        
                <a href="/title/tt0462499/faq?ref_=tt_faq_sm"
class="nobr" >See more</a>
                <span class="spoilers">(Spoiler Alert!)</span></span>&nbsp;&raquo;
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleFAQWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleFAQWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleFAQWidget", {wb: 1});
    }
</script>


    
    
    

<script>
    if (typeof uet == 'function') {
      uet("bb", "TitleUserReviewsWidget", {wb: 1});
    }
</script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleUserReviewsWidget_started');
    }
  </script>
    <div class="article" id="titleUserReviewsTeaser">
        <h2>User Reviews</h2>
        <div class="user-comments">
                    <div class="tinystarbar" title="10/10">
                        <div style="width: 100px;">&nbsp;</div>
                    </div>
                <span itemprop="review" itemscope itemtype="http://schema.org/Review">  
                    <strong itemprop="name">Rambo is simply great!!!</strong>
                    <span itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                        <meta itemprop="worstRating" content = "1" />
                        <meta itemprop="ratingValue" content="10" />
                        <meta itemprop="bestRating" content="10" />
                    </span>
                    <div class="comment-meta">
                        25 January 2008 | by <a href="/user/ur8396973/?ref_=tt_urv"
><span itemprop="author">zdenkolino</span></a>
                        <meta itemprop="datePublished" content="2008-01-25" />
                              (Croatia)
                        &ndash; <a href="/user/ur8396973/comments?ref_=tt_urv"
>See all my reviews</a>
                    </div>
                    <div>
                        <p itemprop="reviewBody">Rambo is a great action movie and reminds me on how the action movies were made in 80&#39;s. The plot is developing very fast and the pacing is very good. Sly is doing all his stunts and doesn&#39;t speak much. Mercenaries were good in my opinion and without them the movie would be to unbelievable and unrealistic.<br /><br />Rambo displays the war like I&#39;ve never seen it before and believe me I&#39;ve watched many war movies. Camera is beautiful, music is perfect and fits to the action scenes. Bryan Tyler&#39;s take on Goldsmith &quot;Home coming&quot; theme is in the beginning and in the end of the movies (ending is great).<br /><br />I have 3 objections: 1. - the acting of Julie Benz was too unbelievable to me. 2. - maybe more drama and less action (not necessarily). 3. -camera work in some places is to &quot;shaky&quot; for my taste, but on the other hand it gives a lot of tension to the action.<br /><br />Everything else is great.<br /><br />My expectations were high and now I am pleasantly surprised. I had my doubts about the movie (especially after some negative critic reviews), but now all I have to say thank you Sly for giving us Rambo IV. <br /><br />I must say the movie may not be for everyone because of violence, but I think every Rambo fan and fans of the action movies of the 80&#39;s will be happy with this movie. My theater was filled .<br /><br />I hope it does well at the US box-office because Sly deserves it. I have no doubt that the movie will be success in other parts of the world also.<br /><br />Rambo is definitely back!!!</p>
                    </div>
                </span>
                <hr />
                <div class="yn" id="ynd_1807064">
                    315 of 446 people found this review helpful.&nbsp;
                    Was this review helpful to you?
                    <button class="btn small" value="Yes" name="ynb_1807064_yes" onclick="CS.TMD.user_review_vote(1807064, 'tt0462499', 'yes');" >Yes</button>
                    <button class="btn small" value="No" name="ynb_1807064_no" onclick="CS.TMD.user_review_vote(1807064, 'tt0462499', 'no');" >No</button>
                </div>
            <div class="see-more">
                
                <a href="/title/tt0462499/reviews-enter?ref_=tt_urv"
rel="login">Review this title</a>
                <span>|</span>
                    <a href="/title/tt0462499/reviews?ref_=tt_urv"
>See all 720 user reviews</a>&nbsp;&raquo;
            </div>
        </div>
    </div>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleUserReviewsWidget_finished');
    }
  </script>
  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleUserReviewsWidget_finished');
    }
  </script>
<script>
    if (typeof uet == 'function') {
      uet("be", "TitleUserReviewsWidget", {wb: 1});
    }
</script>
<script>
    if (typeof uex == 'function') {
      uex("ld", "TitleUserReviewsWidget", {wb: 1});
    }
</script>


    
    
    


    
    
    

  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleContributeWidget_started');
    }
  </script>
    <div class="article contribute">
        <div class="rightcornerlink">
<a href="/help/?adding/&ref_=tt_cn_hlp"
>Getting Started</a>
            <span>|</span>
<a href="/czone/?ref_=tt_cn_cz"
>Contributor Zone</a>&nbsp;&raquo;</div>
        <h2>Contribute to This Page</h2>

                <div class="button-box">
                    <form method="get" action="https://contribute.imdb.com/updates">
                        <input type="hidden" name="ref_" value="tt_cn_edt" />
                        <input type="hidden" name="edit" value="legacy/title/tt0462499/" />
                            <button class="btn primary large" rel="login" type="submit">Edit page</button>
                    </form>
                </div>
        

    

        <div class="button-box">
<a href="/title/tt0462499/reviews-enter?ref_=tt_cn_urv"
class="btn large" rel="login">Write review</a>          
        </div>
    
    
        <div class="form-box">
            <form method="post" action="/character/create?ref_=tt_cn_ch" accept-charset="ISO-8859-1">
                <input type="hidden" value="tt0462499" name="title">
                <div class="form-txt">Create a character page for:</div>
                <select id="character_select" name="name" data-tconst="tt0462499">
                        <option value="Missionary #4 (Jeff)">Missionary #4 (Jeff)</option>
                        <option value="Missionary #2 (Dentist)">Missionary #2 (Dentist)</option>
                        <option value="Missionary #3 (Videographer)">Missionary #3 (Videographer)</option>
                        <option value="Missionary #5 (Preacher)">Missionary #5 (Preacher)</option>
                     <option disabled="disabled">-----------</option>
                     <option value="...">more...</option>
                </select>
                <button class="btn small">Create &raquo;</button>
                <a href="/help/show_leaf?createchar&ref_=tt_cn_chhlp"
class="btn small" >?</a>
            </form>
        </div>
    </div>

  <script>
    if ('csm' in window) {
      csm.measure('csm_TitleContributeWidget_finished');
    }
  </script>


    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    </div>
    <br class="clear"/>
</div> 


    
    
    

    
    
    

                   <br class="clear" />
                </div>






    <div id="footer" class="ft">

            <div id="rvi-div">
                <div class="recently-viewed">&nbsp;</div>
                <br class="clear">
            </div>

	
	<!-- no content received for slot: bottom_ad -->
	

        <div class="container footer-grid-wrapper">
            <div class="row footer-row">
                <div class="col outside">
    <h3>IMDb Everywhere</h3>
    <div class="app-links">
    <a href="/offsite/?page-action=ft_app_apple&token=BCYsC_gcf5t1dwkvAYk57i3egtll7HoAbo1JfiYoRlWgJofx0Z-YYw5wk15buA-0OfMaMa5ST-aG%0D%0AKqxg3G6EM5o3_Rry2A48LeR2QRzGHL_q7cQx2n95qnfIsOpa-_XWSo3csxb9qf5Vrk0Tvdb8Pjhc%0D%0ARTWXdHLT9yUaDyz7_cLY7hNOdfxV27yMj-zBdd4WqBkbLi0qjsfsbd0Q_cQ4Wb6YofKmHnRZ_Xbm%0D%0Adhxp0nBqpxc%0D%0A&ref_=ft_app_apple"
title="Get the IMDb App on the Apple App Store" target="_blank" itemprop='url'> <span class="desktop-sprite appstore-apple" ></span>
</a>
    <a href="/offsite/?page-action=ft_app_google&token=BCYtPhdtmgBVulQrh_4cK-nQE2ONY_PBIJf19q0hk1HBi8KQVOiLD-DiLzee3GeavkKqudIX-QCa%0D%0AVOomY_tahLksFDMAxhwm5IklyMiUIC9ktkZ8NHJN4hIOZ7o6cr4y2Z3Abtxu4AzT86DGGTQyAMk0%0D%0AqI5ehTI8Nkgp8ykz9LahW9rgFkkZK75iKHas2Ly7bzGAKKKmQYNlf8P8I6NNZAezVhYYj6M7XoDA%0D%0Ab8RaOtw-QaI%0D%0A&ref_=ft_app_google"
title="Get the IMDb app on Google Play" target="_blank" itemprop='url'> <span class="desktop-sprite appstore-google" ></span>
</a>
    <a href="/offsite/?page-action=ft_app_amazon&token=BCYlH4vnf0_BNdYReoXDqpPfyCXYLdfkHYClh4VGkvIvRjqCI7rwct7WvhpJjw7txg6dAZ4IbWXl%0D%0AL1ow32-qJtF5e7GwAwTl5rPNfwey1E92Soc6fH9ofmR73vPYnXq8fWz4x113DmCK6V8zOeBkuTg9%0D%0ARq25hbx8RLjY5BrRt0bpP9yPtuqZ5U-J7zc222rzuxUzrVoTSXQ_sGUeVQBpzSG0OT9FeW1teexM%0D%0AG1pdqVEjc94v5hxIYyZRks8HKVmlz6nFx5fMXUyfET5FI8SE2AKyaYMFscovU5rf9N67gF6mwxsz%0D%0Ay8imDJ9AUEGzrgEYgShJ-EFqVH-LAiRJVc2-qc0TSsN76q29JCop3vO4uhHpkII-hYpRrDqsuhNt%0D%0AOfaoc0f2ZnXet-2_XUGyDzQ4r0W13BeP7JIzuwEaAlk8HfrlNbs%0D%0A&ref_=ft_app_amazon"
title="Get the IMDb app on Amazon Appstore for Android" target="_blank" itemprop='url'> <span class="desktop-sprite appstore-amazon" ></span>
</a>
    </div>

    <p>Find showtimes, watch trailers, browse photos, track your Watchlist and rate your favorite movies and TV shows on your phone or tablet!</p>

    <a href="http://m.imdb.com?ref_=ft_mdot"
class="touchlink" >IMDb Mobile site</a>
                </div>
                <div class="col center">
  <div class="link-bar icon-link-bar">
    <h3>
      Follow IMDb on
      <div>

    <a href="/offsite/?page-action=fol_fb&token=BCYlrtlcKZD-QA9ICT0loWA7eHLl_ex3R_BHx4qFzhqv3jkOXU4iuvXfWV9Rk2mWrDKzyqjd9bFF%0D%0AT_KZtvNYNeS6LqazmAkizx9eu4bx5vPtVEwVuEYqvt35pcwaHtKjGFNLMzwsNu0vnHPgHFJWYsP5%0D%0AKMC0hQMXoqxZeN8yo2kaVEhkmInrMGWFKiY5O_mh__b0rh94RK1uzMRTdi-15PGtRw%0D%0A&ref_=tt_ft_fol_fb"
title="Follow IMDb on Facebook" target="_blank" itemprop='url'> <span class="desktop-sprite follow-facebook" ></span>
</a>
    <a href="/offsite/?page-action=fol_tw&token=BCYrRbAc1qJ8YXTCNnFfZyPyjLtP0zWmVU4vc__8kxLR8SLuS0WFQfB8bYUyWAb8WOssPiwGRW0T%0D%0AcIbZcrULJu02QmRe9W9VjPobtmvhk-jwxpQETAWRl6Zd1_zcLkWMfJ78oVE_5bZKUQ9FCBdZ43UA%0D%0AFqpsxaHjuTw36YO_cw74knuQvyMijPEwZahY_Tx32uzcFTEp6tjxpSJdBGs_yvO86A%0D%0A&ref_=tt_ft_fol_tw"
title="Follow IMDb on Twitter" target="_blank" itemprop='url'> <span class="desktop-sprite follow-twitter" ></span>
</a>
    <a href="/offsite/?page-action=fol_inst&token=BCYtvKgxQvZHcP0aMdvBtxJ-tZWtqAvSKwz3B8ORqkwHaehehloGOpXp3_SeZt1AeZWNW_yYr0VE%0D%0Av054D7LI_AwFvIo7kvVXeUzmmnbMBdyTGIEKnoCedZcWyxOCc8AEcLAhUVLr11XSZiWPuSScRR79%0D%0ApnL-h4e9FpQCvRnIq4KMYuq4AKbgJF2tABbQgD8dvXhfXevGsn61xg7EzRl8_bMBhg%0D%0A&ref_=tt_ft_fol_inst"
title="Follow IMDb on Instagram" target="_blank" itemprop='url'> <span class="desktop-sprite follow-instagram" ></span>
</a>
      </div>
    </h3>
  </div>
                </div>
                <div class="col outside">
    <div class="row">
        <div class="col col-4">
            <ul class="unstyled">
                <li><a href="/?ref_=ft_hm"
>Home</a></li>
                <li><a href="/chart/top?ref_=ft_250"
>Top Rated Movies</a></li>
                <li><a href="/chart/?ref_=ft_cht"
>Box Office</a></li>
                <li><a href="/sections/tv/?ref_=ft_tv"
>TV</a></li>
                <li><a href="/movies-coming-soon/?ref_=ft_cs"
>Coming Soon</a></li>
                <li><a href="/a2z?ref_=ft_si"
>Site Index</a></li>
                <li><a href="/search?ref_=ft_sr"
>Search</a></li>
                <li><a href="/movies-in-theaters/?ref_=ft_inth"
>In Theaters</a></li>
            </ul>
        </div>
        <div class="col col-4">
            <ul class="unstyled">
                <li><a href="/helpdesk/contact?ref_=ft_con"
>Contact Us</a></li>
                <li>        <a href="https://secure.imdb.com/register-imdb/form-v2?ref_=ft_reg"
>Register</a>
</li>
                <li><a href="/news/?ref_=ft_nw"
>News</a></li>
                <li class="spacer"></li>
                <li><a href="/pressroom/?ref_=ft_pr"
>Press Room</a></li>
                <li><a href="/advertising/?ref_=ft_ad"
>Advertising</a></li>
                <li><a href="/jobs?ref_=ft_jb"
>Jobs</a></li>
            </ul>
        </div>
        <div class="col col-4">
            <ul class="unstyled">
                <li><a href="http://pro.imdb.com/signup/index.html?rf=cons_ft_hm&ref_=cons_ft_hm"
>IMDbPro</a></li>
                <li>    <a href="/offsite/?page-action=ft-mojo&token=BCYrMLOy7snQuMKuoWds37id-9UotYvuMI3P8ZIGYDJmLcHOXCzkLCHhyBkt29Zwi_MMFVv7HUAF%0D%0ALIQdlMaxpC23BWtDOAcU4r03D0C1myF6ZxzoKEUW3LjXZxX6-k2HGt5YcjMXDEIiOUcCpoOf8E-f%0D%0A14h4NTlyO74XkEQ6fjRv9hXbmutsabOSDIN-zcDG3gbTwSJJ-jrMSF6uJMRx7gX6lA%0D%0A&ref_=ft_bom"
itemprop='url'>Box Office Mojo</a>
</li>
                <li>    <a href="/offsite/?page-action=ft-wab&token=BCYmQrOAC_dd35eT-zoPZjExoeuBURr_ip168wTOnHfffDQ1rFQ7GsHFMIYGDMC8tgsxAChdHUb_%0D%0AnUnLHIzC_jTyO_WKq97q2suxJHIeBorU3pesfywktY_JCphgC4DtpzX02Tm_j-Vz5FitTygPA2fK%0D%0ANMClsxOdVqwn5dAif1IANltwTbEuBKiSnIM-Z9ROBcP6zHKmW2eCSLemCp2BaLdIsg%0D%0A&ref_=ft_wab"
itemprop='url'>Withoutabox</a>
</li>
                <li class="spacer"></li>
                <li><a href="/help/show_article?conditions&ref_=ft_cou"
>Conditions of Use</a></li>
                <li><a href="/privacy?ref_=ft_pvc"
>Privacy Policy</a></li>
                <li>    <a href="/offsite/?page-action=ft-iba&token=BCYvl56NiPJZrFmTM9diLPPKgCyxKU0JmLBPaEW-UJ8yFFb-MDiOsr72b5ietVIK2_d90rYCXz3S%0D%0ARmg2Kk5FoFUpKzybYlc1xxCig3ScPcpnxVYIT5dR8XKduS3ZDptKiQa951gEMUbn22DHnLSUOFfO%0D%0ANpHdQbBLyFjh8JtmEVg3HSI1JQWGlxCpvn6ZsSlUSB91EWb9okxIoKmnl3HDhsQf5ky7ihQaBDK5%0D%0ALP9v_esjHoZGVFCA_6RhO2A7l5fsSnQ1%0D%0A&ref_=ft_iba"
itemprop='url'>Interest-Based Ads</a>
</li>
                <li class="spacer"></li>
            </ul>
        </div>
    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="ft-copy float-right">
                <a
href="/help/show_article?conditions"
>Copyright &copy;</a> 1990-2017
                <a
href="/help/"
>IMDb.com, Inc.</a>
            </div>
            <div>
                An <span id="amazon_logo" class="footer_logo" align="middle">Amazon.com</span> company.
            </div>
        </div>



    <table class="footer" id="amazon-affiliates">
        <tr>
            <td colspan="8">
                Amazon Affiliates
            </td>
        </tr>
        <tr>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-aiv&token=BCYn_pp3IdJQguJaAIlTno0bXZHLp_0wuy6d5jjkWJoKDxKnZawdpLJPVfKK1jPdDRaET1PBn1-A%0D%0A83fhMJVaGHGNM1h6Cyr_DDGrr3s_T9pWUAXw7UA3FLVbITzyiZyLWjp4l8bmaSYl3N40L8qD_Dtc%0D%0AVor0H8gw1RC0tVAbwjhJIJ9kLSu1tDqFUHA2i0uc0v_2-E2YbS2tqVkvif5LpS2bKNB4Nar16y7A%0D%0AKkpPVfyei4I%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon Video</span><br>
                <span class="amazon-affiliate-site-desc">Watch Movies &<br>TV Online</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-piv&token=BCYrY77SwB30s5Qurze_nezUd3jgtsjwG3wyuBr14kxaSKcXLbHlBMJEQUT2EFP3RawV3GwLWxTJ%0D%0A0oIkc2hbUDoJtFp_iGujoxQ7WesVzw8IFO6W0Uw_XAPWZR_GB_c4ngggdiH4bgbycUKUtEIHfz6Q%0D%0A4hNeibPBeQRPD2qR21kpmPYlswJmrm2dp56VRQRjgSLcrt0cHZuQiGfNIxIFddYaMZEQAR1UJZIn%0D%0A0g-IU_INY10%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Prime Video</span><br>
                <span class="amazon-affiliate-site-desc">Unlimited Streaming<br>of Movies & TV</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-de&token=BCYoXAdrOhXj2CRdxLMQbBTCyoUCOK7agtK6dSCBRpKld7qsfy43iqDJH6CgXexhcK-H4-d6mbyi%0D%0AOo_5q6I3ZNWTL14LwiUSRnjWf8CyDfxsG5_KeE4Ud4knYi9fl640byml_0itWAuTH33TgiVwjiks%0D%0Ayt0a5FD5aylnKkW5TFag_87CS28kaIydi1py0zD0PR-XIMJSet6gSmmK5RDS5dagORVoYqyR8whS%0D%0AQkq8K4g6Ksw%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon Germany</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movies on<br>DVD & Blu-ray</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-it&token=BCYqpWKQYiPu09F-if6bBl2eKKdppn3PQm10RTf7kuWejkMbxV_MiZktyGNQmQxkyCU185oMSHEV%0D%0AK8k8mvZ5vifu7NhddhyORhY249Le9_tWizUj0q9Akf1WhHjuQGOafgn7OE_MPmTMiKrMlyuYOOub%0D%0A-_5EWGq-4U_lc43ZswKsSUi4ax-9mRoWrO76R3ZZV2uCJFytu5kyKYmmJjlaJPcSBfaJGCaZgNgg%0D%0AZycFK_8wkcc%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon Italy</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movies on<br>DVD & Blu-ray</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-fr&token=BCYlByZg8jgvEBWDI9WDMAbwqu7nOgdLE-he-ISDnIiXDsogpgcaBM_1SqpsqpMgnop3ZvEtRaMs%0D%0AxXR5uNIYvcItyQbgF6QpspCePrZ6MCaSgrf2n--YefailyMZbOxHjgrTgWoVDXJVvN4JIAAwsBZh%0D%0AQhEOIl0HskvYF8tZgRxPdzbq-ic9bMQm6bLIxugsVdQuyjn1ItsFm3C9roT1laGKKTLDN4nEQdcg%0D%0AEPdejdm-eVA%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon France</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movies on<br>DVD & Blu-ray</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-in&token=BCYrKYaGTEkCXBmDqjWSy6gneVxah20Sfx7EeZgkIxZ9G900VpeeE4Ozc2wm3kUmyzRYWiTcnhCU%0D%0AmAN2ifvdqhv8_S1-o7gOaSc8ocvEsIMqiVgB5EWW9gjp41SnsQqlfs5QZ76_jnKfeGdXUgXVVGLR%0D%0A2M8TEQdqgf78VDUNdJsdHBI8_w4w6pKfZlDsWOftFJP8Hgd-vum5LdQOiDU36nOV32ux3159zibE%0D%0AdUvwxd9DNNvOCBqPDxaqbJAIsGWvjFmr%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Amazon India</span><br>
                <span class="amazon-affiliate-site-desc">Buy Movie and<br>TV Show DVDs</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-dpr&token=BCYh4XxWSswvAXkqNeQoXeTFwBWtW8bS2qZC68wHxwsNDHGoYPNuSBBWVT2BnfH65hZh8RHt89eR%0D%0ANpFwFDm0lnbJiTxoK9XHgDQmQAgaoLQ3heyvkh8jNZQmlkxtGByruLIR7aQB5LjJq0E0u-rc0S_o%0D%0AXYUpQfGJPOLxCHMIKq7plqM%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">DPReview</span><br>
                <span class="amazon-affiliate-site-desc">Digital<br>Photography</span>
            </a>
        </div>
    </td>

    <td>
        <div>
            <a href="/offsite/?page-action=ft-amzn-aud&token=BCYri91KK27WDvpi6O0kZzEeVYhOvORS7a3oImfyG6L5nOyf4KsD5C1Hpb_pD32fmmqc9a-LA57h%0D%0Aq42Idg7R2rIn5ZEZgg2-Uxm1iUUwUcWeOCi9lHmQEjqRBkOfgQyzLeRWaPn0XRwXvosMWpbyEecr%0D%0AnJj16tZ6ppp9fwSqMXmwk3M%0D%0A" class="amazon-affiliate-site-link">
                <span class="amazon-affiliate-site-name">Audible</span><br>
                <span class="amazon-affiliate-site-desc">Download<br>Audio Books</span>
            </a>
        </div>
    </td>
        </tr>
    </table>
      </div>
            </div>
        </div>



<script type="text/javascript" src="http://ia.media-imdb.com/images/G/01/imdb/js/collections/common-2411119445._CB508084084_.js"></script>
<script type="text/javascript" src="http://ia.media-imdb.com/images/G/01/imdb/js/collections/title-1672259613._CB517606530_.js"></script>

<script type="text/javascript" id="login">
(function(){
    var readyTimeout = setInterval(function() {
        if (window.jQuery && window.imdb && window.imdb.login_lightbox) {
            clearTimeout(readyTimeout);
            window.imdb.login_lightbox();
        }
    }, 100);
})();
</script>

        <script type="text/javascript">
        function jQueryOnReady(remaining_count) {
            if (window.jQuery && typeof $.fn.watchlistRibbon !== 'undefined') {
                jQuery(
                             function() {
           var isAdvertisingThemed = !!(window.custom && window.custom.full_page && window.custom.full_page.theme),
               url = "http://www.facebook.com/widgets/like.php?width=280&show_faces=1&layout=standard&href=http%3A%2F%2Fwww.imdb.com%2Ftitle%2Ftt0462499%2F&colorscheme=light",
               like = document.getElementById('iframe_like');

           if (!isAdvertisingThemed && like) {
              like.src = url;
              like.onload = function () { 
                  if (uex) { uex('ld', 'facebook_like_iframe', {wb: 1}); }
              };
           } else if (isAdvertisingThemed) {
              $('.social_networking_like').closest('.aux-content-widget-2').hide();
           }
        }

                );
                jQuery(
                             function() {
            var facebookTheme = (window.custom && window.custom.full_page &&
                    window.custom.full_page.theme) ?
                window.custom.full_page.theme : "light",
            url = "//www.facebook.com/plugins/likebox.php?href=facebook.com%2Fimdb&width=300&height=190&connections=4&header=false&stream=false&colorscheme=" + facebookTheme,
            like = document.getElementById('facebookIframe'),
            twitterIframe = document.getElementById('twitterIframe');
            if (like) {
                like.src = url;
            }
            if (twitterIframe) {
                twitterIframe.src = "http://i.media-imdb.com/images/social/twitter.html?10#imdb";
            }
         }

                );
            } else if (remaining_count > 0) {
                setTimeout(function() { jQueryOnReady(remaining_count-1) }, 100);
            }
        }
        jQueryOnReady(50);
        </script>


<div id="servertime" time="165"/>



<script>
    if (typeof uet == 'function') {
      uet("be");
    }
</script>

    </body>
</html>


    http_version: 
  recorded_at: Sun, 03 Sep 2017 16:27:32 GMT
recorded_with: VCR 3.0.3
